-- phpMyAdmin SQL Dump
-- version 3.5.7
-- http://www.phpmyadmin.net
--
-- Servidor: localhost
-- Tiempo de generación: 20-03-2013 a las 17:10:23
-- Versión del servidor: 5.5.24-log
-- Versión de PHP: 5.4.3

SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- Base de datos: `devcurricula`
--

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `areas`
--

CREATE TABLE IF NOT EXISTS `areas` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(250) DEFAULT NULL,
  `abbreviation` varchar(10) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=5 ;

--
-- Volcado de datos para la tabla `areas`
--

INSERT INTO `areas` (`id`, `name`, `abbreviation`) VALUES
(1, 'Ãrea de Ciencia de la ComputaciÃ³n (Computer Science)', 'CS'),
(2, 'Ãrea de FormaciÃ³n General', 'FG'),
(3, 'Ãrea de FormaciÃ³n de Empresas de Base TecnolÃ³gica', 'ET'),
(4, 'Ãrea de Ciencias BÃ¡sicas (MatemÃ¡tica y FÃ­sica)', 'CB');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `axes`
--

CREATE TABLE IF NOT EXISTS `axes` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(250) DEFAULT NULL,
  `code` int(10) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=10 ;

--
-- Volcado de datos para la tabla `axes`
--

INSERT INTO `axes` (`id`, `name`, `code`) VALUES
(1, 'Hardware y Arquitectura', 0),
(2, 'Ciencia de la ComputaciÃ³n', 1),
(3, 'IngenierÃ­a de Software', 2),
(4, 'Sistemas de InformaciÃ³n', 3),
(5, 'TecnologÃ­a de InformaciÃ³n', 4),
(6, 'Contenido Empresarial', 5),
(7, 'MatemÃ¡tica para ComputaciÃ³n', 6),
(8, 'Ciencias BÃ¡sicas', 7),
(9, 'FormaciÃ³n General', 8);

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `axes_courses`
--

CREATE TABLE IF NOT EXISTS `axes_courses` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `axis_id` int(10) unsigned NOT NULL,
  `course_id` int(10) unsigned NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=121 ;

--
-- Volcado de datos para la tabla `axes_courses`
--

INSERT INTO `axes_courses` (`id`, `axis_id`, `course_id`) VALUES
(11, 1, 23),
(12, 3, 23),
(20, 7, 21),
(21, 7, 23),
(113, 4, 72),
(114, 8, 72),
(115, 2, 73),
(116, 5, 73),
(117, 3, 77),
(118, 4, 77),
(119, 6, 77),
(120, 7, 77);

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `body_knowledges`
--

CREATE TABLE IF NOT EXISTS `body_knowledges` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(250) NOT NULL,
  `description` text NOT NULL,
  `user_id` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=18 ;

--
-- Volcado de datos para la tabla `body_knowledges`
--

INSERT INTO `body_knowledges` (`id`, `name`, `description`, `user_id`) VALUES
(2, 'CS2013', 'Bla bla bla', 3),
(3, 'CS2013', 'Bla bla bla', 3),
(4, 'aefa', 'ged', 3),
(6, 'sdfs', 'sadsdafs', 3),
(7, 'Computer Science Curricula 2008', 'The Review Task Force (RTF), commissioned by the ACM Education Board and the IEEE Computer Society Education Activities Board, was given a mandate to conduct an interim review of the Computer Science 2001 volume (hereafter referred to as CS2001) that had been published on 15th December, 2001. During the work on the CC2001 series of volumes, it was recognized that there was a need to produce curricular guidance for the community on a regular basis; this was interpreted as being roughly every 5 years. This is necessitated by the pace of change in the discipline and the consequent need to support the meaningful and effective evolution of programs of study.\r\n\r\nThe idea of an interim review was a new concept in the activities of ACM / Computer Society curricular guidance. It was not envisioned that a completely new set of curricular advice for Computer Science would be produced, but that the work on this occasion would absorb significantly less resources than a full review. Rather it had been anticipated that a variant of, or addendum to, the earlier document would be produced with significant matters being updated as necessary. Part of the mandate given to the RTF would involve carrying out a modest but hopefully effective consultation with the community, taking account of relevant industrial views. For instance, the structure might be expected to remain largely unaltered but the review would provide the opportunity to update the guidance and to address issues of concern to the community.', 7),
(8, 'SDVFDVDFZ', 'DDFBDFBFD', 3),
(9, 'Computer Science Curricula 2013', 'CS2013 redefines the knowledge units in CS, rethinking the essentials necessary for a Computer Science curriculum. It also seeks to identify exemplars of actual courses and programs to provide concrete guidance on curricular structure and development in a variety of institutional contexts.', 7),
(12, 'sdfdas', 'dfdsfdf', 3),
(13, 'Mi primer programa', 'Esta es la descripciÃ³n de un programa que estoy creando en este monento.', 7),
(14, 'Este es uno de prueba', 'Esta es la descripciÃ³n de este cuerpo de aprendizaje.', 7),
(15, 'Prueba', 'Esta es una prueba', 7),
(16, 'Name of the Body of Knowledge', 'The description', 7),
(17, 'Nuevo', 'xvzcvfdf', 7);

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `body_knowledges_knowledge_areas`
--

CREATE TABLE IF NOT EXISTS `body_knowledges_knowledge_areas` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `body_knowledge_id` int(11) NOT NULL,
  `knowledge_area_id` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=9 ;

--
-- Volcado de datos para la tabla `body_knowledges_knowledge_areas`
--

INSERT INTO `body_knowledges_knowledge_areas` (`id`, `body_knowledge_id`, `knowledge_area_id`) VALUES
(6, 1, 1),
(7, 1, 2),
(8, 1, 4);

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `brw_files`
--

CREATE TABLE IF NOT EXISTS `brw_files` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `record_id` int(10) unsigned NOT NULL,
  `model` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `description` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `category_code` char(10) COLLATE utf8_unicode_ci NOT NULL,
  `created` datetime NOT NULL,
  `modified` datetime NOT NULL,
  PRIMARY KEY (`id`),
  KEY `category_code` (`category_code`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `brw_images`
--

CREATE TABLE IF NOT EXISTS `brw_images` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `record_id` int(10) unsigned NOT NULL,
  `model` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `description` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `category_code` char(10) COLLATE utf8_unicode_ci NOT NULL,
  `created` datetime NOT NULL,
  `modified` datetime NOT NULL,
  PRIMARY KEY (`id`),
  KEY `category_code` (`category_code`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `brw_users`
--

CREATE TABLE IF NOT EXISTS `brw_users` (
  `id` int(5) unsigned NOT NULL AUTO_INCREMENT,
  `email` varchar(50) COLLATE utf8_unicode_ci NOT NULL,
  `password` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `root` tinyint(1) NOT NULL DEFAULT '1',
  `last_login` datetime NOT NULL,
  `created` datetime NOT NULL,
  `modified` datetime NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`email`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `courses`
--

CREATE TABLE IF NOT EXISTS `courses` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(250) DEFAULT NULL,
  `justification` text NOT NULL,
  `code` varchar(20) NOT NULL,
  `credits` int(11) DEFAULT NULL,
  `identifying_number` int(11) DEFAULT NULL,
  `area_id` int(11) NOT NULL,
  `level_id` int(11) NOT NULL,
  `subject_id` int(11) NOT NULL,
  `type_id` int(11) NOT NULL,
  `implementation_strategy_id` int(11) NOT NULL,
  `semester` int(11) NOT NULL,
  `theory_hours` double DEFAULT NULL,
  `practice_hours` double DEFAULT NULL,
  `lab_hours` double DEFAULT NULL,
  `created` datetime DEFAULT NULL,
  `modified` datetime DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=78 ;

--
-- Volcado de datos para la tabla `courses`
--

INSERT INTO `courses` (`id`, `name`, `justification`, `code`, `credits`, `identifying_number`, `area_id`, `level_id`, `subject_id`, `type_id`, `implementation_strategy_id`, `semester`, `theory_hours`, `practice_hours`, `lab_hours`, `created`, `modified`, `user_id`) VALUES
(21, 'IntroducciÃ³n a la ProgramaciÃ³n', 'Este es el primer curso en la secuencia de los cursos introductorios a la informÃ¡tica. En este curso se pretende cubrir los conceptos seÃ±alados por la Computing Curricula IEEE-CS/ACM 2008, bajo el enfoque functional-first.\r\n\r\nLa programaciÃ³n es uno de los pilares de la informÃ¡tica; cualquier profesional del Ã¡rea, necesitarÃ¡ programar para concretizar sus modelos y propuestas.\r\n\r\nEste curso introducirÃ¡ a los participantes en los conceptos fundamentales de este arte. Lo tÃ³picos incluyen tipos de datos, estructuras de control, funciones, listas, recursividad y la mecÃ¡nica de la ejecuciÃ³n, prueba y depuraciÃ³n.\r\n\r\nEl curso tambiÃ©n ofrecerÃ¡ una introducciÃ³n al contexto histÃ³rico y social de la informÃ¡tica y una revisiÃ³n del Ã¡mbito de esta disciplina.', 'CS101F', 4, 1, 1, 1, 1, 1, 3, 1, 2, 2, 2, '2013-02-28 16:01:40', '2013-03-04 16:58:34', 7),
(23, 'Estructuras Discretas I', 'Las estructuras discretas son fundamentales para la ciencia de la computaciÃ³n. Es evidente que las estructuras discretas son usadas en las Ã¡reas de estructura de datos y algoritmos , sin embargo son tambiÃ©n importantes en otras, como por ejemplo en la verificaciÃ³n, en criptografÃ­a y mÃ©todos formales.', 'CS105A', 4, 5, 1, 1, 1, 1, 5, 1, 2, 2, 0, '2013-02-28 16:14:41', '2013-03-03 18:09:11', 7),
(24, 'Ãlgebra y GeometrÃ­a', 'Curso introductorio, soporte de los posteriores cursos de AnÃ¡lisis MatemÃ¡tico, estudia el plano y el espacio, haciendo Ã©nfasis es su aspecto vectorial y su interpretaciÃ³n geomÃ©trica, lo que permite visualizar conceptos que posteriormente se verÃ¡n en forma abstracta.', 'CB101', 5, 1, 4, 1, 1, 1, 0, 1, 4, 2, 0, '2013-02-28 16:16:30', '2013-03-04 16:59:36', 7),
(25, 'IntroducciÃ³n a la Vida Universitaria', 'El alumno inicia una nueva etapa en su crecimiento personal en bÃºsqueda de una formaciÃ³n profesional que le permita desenvolverse en el mundo. Para responder a sus expectativas es necesario acompaÃ±arlo a descubrir sus anhelos existenciales, de manera que no sÃ³lo se forme en lo acadÃ©mico e intelectual sino que ademÃ¡s comprenda y trabaje por formarse como un ser humano integral. Esto implica ayudarlo a que lleve adelante una profundizaciÃ³n en los temas fundamentales de su conocimiento personal, de la antropologÃ­a del ser humano y de su participaciÃ³n en el medio social, de manera particular en la vida universitaria. Su realizaciÃ³n como buen profesional depende de una buena formaciÃ³n personal y cultural que le brinde horizontes amplios, que sustenten y proyecten su conocimiento y quehacer tÃ©cnicos e intelectuales y que le permitan contribuir a la evangelizaciÃ³n de la cultura y al cambio cultural.', 'FG103', 3, 3, 2, 1, 1, 1, 0, 1, 3, 0, 0, '2013-02-28 16:19:30', '2013-03-04 17:00:03', 7),
(71, 'ssd', 'dsffsd', 'CS103', 7, 3, 1, 1, 1, 1, 0, 7, 7, 7, 3, '2013-03-04 03:27:46', '2013-03-04 03:27:46', 3),
(72, 'Pepe', 'Pancho', 'CS103', 7, 3, 1, 1, 1, 1, 0, 7, 7, 7, 7, '2013-03-04 03:29:50', '2013-03-04 04:22:26', 3),
(73, 'IntroducciÃ³n a Internet', 'El desarrollo de software para la Internet sea convertido en una necesidad primordial para los que trabajan en el mundo informÃ¡tico.\r\n\r\nEste tipo de software plantea nuevos retos: temas como seguridad, modelos cliente servidor, programaciÃ³n de sistemas, etc. y en la actualidad son piezas clave a tener en cuenta.\r\n\r\nEl curso darÃ¡ una revisiÃ³n bÃ¡sica a las tÃ©cnicas y herramientas usadas en este tipo de ambientes.', 'CS100', 3, 0, 1, 1, 1, 1, 0, 3, 2, 0, 2, '2013-03-04 14:55:38', '2013-03-08 03:54:16', 3),
(74, 'ApreciaciÃ³n de la MÃºsica', 'El egresado de la Universidad San Pablo, no sÃ³lo deberÃ¡ ser un excelente profesional, conocedor de la mÃ¡s avanzada tecnologÃ­a, sino tambiÃ©n, un ser humano sensible y de amplia cultura. En esta perspectiva, el curso proporciona los instrumentos conceptuales bÃ¡sicos para una Ã³ptima comprensiÃ³n de las obras musicales como producto cultural y artÃ­stico creado por el hombre.', 'FG105', 2, 5, 2, 1, 1, 2, 0, 2, 1, 2, 0, '2013-03-04 15:28:46', '2013-03-04 17:01:08', 7),
(75, 'Teatro', 'Favorece al estudiante a identificarse a la "Comunidad AcadÃ©mica" de la Universidad, en la medida en que le brinda canales naturales de integraciÃ³n a su grupo y a su Centro de Estudios y le permite, desde una visiÃ³n alternativa, visualizar la valÃ­a interior de las personas a su alrededor, a la vez que puede conocer mejor la suya propia. Relaciona al universitario, a travÃ©s de la experimentaciÃ³n, con un nuevo lenguaje, un medio de comunicaciÃ³n y expresiÃ³n que va mÃ¡s allÃ¡ de la expresiÃ³n verbal conceptualizada. Coadyuva al estudiante en su formaciÃ³n integral, desarrollando en Ã©l capacidades corporales. Estimula en Ã©l, actitudes anÃ­micas positivas, aptitudes cognitivas y afectivas. Enriquece su sensibilidad y despierta su solidaridad. Desinhibe y socializa, relaja y alegra, abriendo un camino de apertura de conocimiento del propio ser y el ser de los demÃ¡s.', 'FG106', 2, 6, 2, 1, 1, 2, 0, 2, 1, 2, 0, '2013-03-04 15:31:23', '2013-03-04 17:01:28', 7),
(76, 'TÃ³picos en ComputaciÃ³n GrÃ¡fica', 'En este curso se puede profundizar en alguno de los tÃ³picos mencionados en el Ã¡rea de ComputaciÃ³n GrÃ¡fica (Graphics and Visual Computing - GV).\r\n\r\nÃ‰ste curso estÃ¡ destinado a realizar algun curso avanzado sugerido por la curricula de la ACM/IEEE.', 'CS355', 4, 5, 1, 3, 6, 2, 0, 9, 2, 2, 2, '2013-03-04 15:33:33', '2013-03-04 17:02:04', 7),
(77, 'El curso de Diana', 'Este es un curso para parender a conquistar una carroÃ±a en tiempo real.', 'ET344F', 4, 4, 3, 3, 5, 1, 3, 1, 10, 9, 2, '2013-03-09 19:23:41', '2013-03-09 19:24:08', 7);

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `courses_programs`
--

CREATE TABLE IF NOT EXISTS `courses_programs` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `course_id` int(10) unsigned NOT NULL,
  `program_id` int(10) unsigned NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=21 ;

--
-- Volcado de datos para la tabla `courses_programs`
--

INSERT INTO `courses_programs` (`id`, `course_id`, `program_id`) VALUES
(3, 21, 2),
(4, 24, 2),
(5, 71, 2),
(6, 73, 2),
(11, 21, 4),
(14, 75, 4),
(16, 23, 4),
(17, 21, 5),
(18, 23, 5),
(19, 24, 5),
(20, 25, 4);

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `implementation_strategies`
--

CREATE TABLE IF NOT EXISTS `implementation_strategies` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(250) DEFAULT NULL,
  `code` varchar(10) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=11 ;

--
-- Volcado de datos para la tabla `implementation_strategies`
--

INSERT INTO `implementation_strategies` (`id`, `name`, `code`) VALUES
(0, 'None', ''),
(1, 'Imperative-first', 'I'),
(2, 'Objects-first', 'O'),
(3, 'Functional-first', 'F'),
(4, 'Breadth-first', 'B'),
(5, 'Algorithms-first', 'A'),
(6, 'Hardware-first', 'H'),
(7, 'Traditional discrete-topic approach', 'T'),
(8, 'Compressed approach', 'C'),
(9, 'Systems-based approach', 'S'),
(10, 'Web-based approach', 'W');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `knowledge_areas`
--

CREATE TABLE IF NOT EXISTS `knowledge_areas` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(250) NOT NULL,
  `description` text NOT NULL,
  `abbreviation` varchar(20) NOT NULL,
  `body_knowledge_id` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=81 ;

--
-- Volcado de datos para la tabla `knowledge_areas`
--

INSERT INTO `knowledge_areas` (`id`, `name`, `description`, `abbreviation`, `body_knowledge_id`) VALUES
(1, 'Discrete Structures', 'Discrete structures are foundational material for computer science. By foundational we mean that relatively few computer scientists will be working primarily on discrete structures, but that many other areas of computer science require the ability to work with concepts from discrete structures. Discrete structures include important material from such areas as set theory, logic, graph theory, and combinatorics.\r\n\r\nThe material in discrete structures is pervasive in the areas of data structures and algorithms but appears elsewhere in computer science as well. For example, an ability to create and understand a proofâ€”either a formal symbolic proof or a less formal but still mathematically rigorous argumentâ€”is essential in formal specification, in verification, in databases, and in cryptography. Graph theory concepts are used in networks, operating systems, and compilers. Set theory concepts are used in software engineering and in databases.\r\n\r\nAs the field of computer science matures, more and more sophisticated analysis techniques are being brought to bear on practical problems. To understand the computational techniques of the future, todayâ€™s students will need a strong background in discrete structures.\r\n\r\nFinally, we note that while areas often have somewhat fuzzy boundaries, this is especially true for discrete structures. We have gathered together here a body of material of a mathematical nature that computer science education must include, and that computer science educators know well enough to specify in great detail. However, the decision about where to draw the line between this area and the Algorithms and Complexity area (AL) on the one hand, and topics left only as supporting mathematics on the other hand, was inevitably somewhat arbitrary. We remind readers that there are vital topics from those two areas that some schools will include in courses with titles like "discrete structures" and "discrete mathematics"; some will require one course, others two. In April 2007, the SIGCSE Committee on the Implementation of a Discrete Mathematics Course released a report detailing three models for a one-semester discrete mathematics course to meet the criteria articulated in CS2001; these models remain applicable under the slightly revised suggestions in this interim report. See SIGCSE Committee Report On the Implementation of a Discrete Mathematics Course.', 'DS', 7),
(2, 'Human-Computer Interaction', 'Human-computer interaction is an important area of computing knowledge. As more people conduct more of their daily activities interacting with a computer, the construction of interfaces that ease that interaction is critical for increasing satisfaction and improving productivity. As more software requires a user interface, knowing how to create a usable interface and testing the usability of that interface become required skills for all computer science students.\r\n\r\nThe design of human-computer interfaces impacts the software life-cycle. Where interfaces used to be designed after the functionality was completed, we now know that the design of a usable interface should occur early in the cycle. We know that the design and implementation of the core functionality can influence the user interface. Human-computer interfaces are themselves software components, and the development and reuse of those components become an important part of the development of most software today.', 'HC', 7),
(3, 'Programming Fundamentals', 'Fluency in a programming language is prerequisite to the study of most of computer science. Undergraduate computer science programs must teach students how to use at least one programming language well; furthermore, computer science programs should teach students to become competent in languages that make use of the object-oriented and event-driven programming paradigms.\r\n\r\nThis knowledge area includes those skills and concepts that are essential to programming practice independent of the underlying paradigm. As a result, this area includes units on fundamental programming concepts, basic data structures, algorithmic processes, and basic security. These units, however, by no means cover the full range of programming knowledge that a computer science undergraduate must know. Many of the other areasâ€”most notably Programming Languages (PL) and Software Engineering (SE)â€”also contain programming-related units that are part of the undergraduate core. In most cases, these units could equally well have been assigned to either Programming Fundamentals or the more advanced area.', 'PF', 7),
(4, 'Graphics and Visual Computing', 'The area encompassed by Graphics and Visual Computing (GV) is divided into four interrelated fields:\r\n\r\nâ€¢ Computer graphics. Computer graphics is the art and science of communicating information using images that are generated and presented through computation. This requires (a) the design and construction of models that represent information in ways that support the creation and viewing of images, (b) the design of devices and techniques through which the person may interact with the model or the view, (c) the creation of techniques for rendering the model, and (d) the design of ways the images may be preserved The goal of computer graphics is to engage the person''s visual centers alongside other cognitive centers in understanding.\r\n\r\nâ€¢ Visualization. The field of visualization seeks to determine and present underlying correlated structures and relationships in both scientific (computational and medical sciences) and more abstract datasets. The prime objective of the presentation should be to communicate the information in a dataset so as to enhance understanding. Although current techniques of visualization exploit visual abilities of humans, other sensory modalities, including sound and haptics (touch), are also being considered to aid the discovery process of information.\r\n\r\nâ€¢ Virtual reality. Virtual reality (VR) enables users to experience a three-dimensional environment generated using computer graphics, and perhaps other sensory modalities, to provide an environment for enhanced interaction between a human user and a computer-created world.\r\n\r\nâ€¢ Computer vision. The goal of computer vision (CV) is to deduce the properties and structure of the three-dimensional world from one or more two-dimensional images. The understanding and practice of computer vision depends upon core concepts in computing, but also relates strongly to the disciplines of physics, mathematics, and psychology.', 'GV', 7),
(5, 'Algorithms and Complexity', 'Algorithms are fundamental to computer science and software engineering. The real-world performance of any software system depends on only two things: (1) the algorithms chosen and (2) the suitability and efficiency of the various layers of implementation. Good algorithm design is therefore crucial for the performance of all software systems. Moreover, the study of algorithms provides insight into the intrinsic nature of the problem as well as possible solution techniques independent of programming language, programming paradigm, computer hardware, or any other implementation aspect.\r\n\r\nAn important part of computing is the ability to select algorithms appropriate to particular purposes and to apply them, recognizing the possibility that no suitable algorithm may exist. This facility relies on understanding the range of algorithms that address an important set of well-defined problems, recognizing their strengths and weaknesses, and their suitability in particular contexts. Efficiency is a pervasive theme throughout this area. With the emergence of multicore processors, issues related to parallel algorithms have become more relevant. While the parallelism topics remain listed here as elective, the committee believes that the role of parallelism throughout the curriculum needs to be considered.', 'AL', 7),
(6, 'Intelligent Systems', 'The field of artificial intelligence (AI) is concerned with the design and analysis of autonomous agents. These are software systems and/or physical machines, with sensors and actuators, embodied for example within a robot or an autonomous spacecraft. An intelligent system has to perceive its environment, to act rationally towards its assigned tasks, to interact with other agents and with human beings.\r\n\r\nThese capabilities are covered by topics such as computer vision, planning and acting, robotics, multiagents systems, speech recognition, and natural language understanding. They rely on a broad set of general and specialized knowledge representations and reasoning mechanisms, on problem solving and search algorithms, and on machine learning techniques.\r\n\r\nFurthermore, artificial intelligence provides a set of tools for solving problems that are difficult or impractical to solve with other methods. These include heuristic search and planning algorithms, formalisms for knowledge representation and reasoning, machine learning techniques, and methods applicable to sensing and action problems such as speech and language understanding, computer vision, and robotics, among others. The student needs to be able to determine when an AI approach is appropriate for a given problem, and to be able to select and implement a suitable AI method.', 'IS', 7),
(7, 'Architecture and Organization', 'The computer lies at the heart of computing. Without it most of the computing disciplines today would be a branch of theoretical mathematics. A professional in any field of computing should not regard the computer as just a black box that executes programs by magic. All students of computing should acquire some understanding and appreciation of a computer system''s functional components, their characteristics, their performance, and their interactions. Students need to understand computer architecture in order to make best use of the software tools and computer languages they use to create programs. In this introduction the term architecture is taken to include instruction set architecture (the programmerâ€™s abstraction of a computer), organization or microarchitecture (the internal implementation of a computer at the register and functional unit level), and system architecture (the organization of the computer at the cache, and bus level). Students should also understand the complex tradeoffs between CPU clock speed, cache size, bus organization, number of core processors, and so on. Computer architecture also underpins other areas of the computing curriculum such as operating systems (input/output, memory technology) and high-level languages (pointers, parameter passing).\r\n\r\nThe learning objectives specified for these topics correspond primarily to the core and are intended to support programs that require only the minimum 36 hours of computer architecture. For programs that want to teach more than the minimum, the same topics (AR1-AR6) can be treated at a more advanced level by implementing a two-course sequence. For programs that want to cover the elective topics, those topics can be introduced within a two-course sequence and/or be treated in a more comprehensive way in a third course.', 'AR', 7),
(8, 'Information Management', 'Information Management (IM) plays a critical role in almost all areas where computers are used. This area includes the capture, digitization, representation, organization, transformation, and presentation of information; algorithms for efficient and effective access and updating of stored information, data modeling and abstraction, and physical file storage techniques. It also encompasses information security, privacy, integrity, and protection in a shared environment. The student needs to be able to develop conceptual and physical data models, determine what IM methods and techniques are appropriate for a given problem, and be able to select and implement an appropriate IM solution that reflects all suitable constraints, including scalability and usability.', 'IM', 7),
(9, 'Operating Systems', 'An operating system defines an abstraction of hardware behavior with which programmers can control the hardware. It also manages resource sharing among the computerâ€™s users. The topics in this area explain the issues that influence the design of contemporary operating systems. Courses that cover this area will typically include a laboratory component to enable students to experiment with operating systems.\r\n\r\nOver the years, operating systems and their abstractions have become complex relative to typical application software. It is necessary to ensure that the student understands the extent of the use of an operating system prior to a detailed study of internal implementation algorithms and data structures. Therefore these topics address both the use of operating systems (externals) and their design and implementation (internals). Many of the ideas involved in operating system use have wider applicability across the field of computer science, such as concurrent programming. Studying internal design has relevance in such diverse areas as dependable programming, algorithm design and implementation, modern device development, building virtual environments, caching material across the web, building secure and safe systems, network management, and many others.', 'OS', 7),
(10, 'Social and Professional Issues', 'Although technical issues are obviously central to any computing curriculum, they do not by themselves constitute a complete educational program in the field. Students must also develop an understanding of the social and professional context in which computing is done.\r\n\r\nThis need to incorporate the study of social issues into the curriculum was recognized in the following excerpt from Computing Curricula 1991 [Tucker91]:\r\n\r\nUndergraduates also need to understand the basic cultural, social, legal, and ethical issues inherent in the discipline of computing. They should understand where the discipline has been, where it is, and where it is heading. They should also understand their individual roles in this process, as well as appreciate the philosophical questions, technical problems, and aesthetic values that play an important part in the development of the discipline.\r\n\r\nStudents also need to develop the ability to ask serious questions about the social impact of computing and to evaluate proposed answers to those questions. Future practitioners must be able to anticipate the impact of introducing a given product into a given environment. Will that product enhance or degrade the quality of life? What will the impact be upon individuals, groups, and institutions?\r\n\r\nFinally, students need to be aware of the basic legal rights of software and hardware vendors and users, and they also need to appreciate the ethical values that are the basis for those rights. Future practitioners must understand the responsibility that they will bear, and the possible consequences of failure. They must understand their own limitations as well as the limitations of their tools. All practitioners must make a long-term commitment to remaining current in their chosen specialties and in the discipline of computing as a whole.\r\n\r\nThe material in this knowledge area is best covered through a combination of one required course along with short modules in other courses. On the one hand, some units listed as coreâ€”in particular, SP2, SP3, SP4, and SP6â€”do not readily lend themselves to being covered in other traditional courses. Without a standalone course, it is difficult to cover these topics appropriately. On the other hand, if ethical considerations are covered only in the standalone course and not â€œin context,â€ it will reinforce the false notion that technical processes are void of ethical issues. Thus it is important that several traditional courses include modules that analyze ethical considerations in the context of the technical subject matter of the course. Courses in areas such as software engineering, databases, computer networks, and introduction to computing provide obvious context for analysis of ethical issues. However, an ethics-related module could be developed for almost any course in the curriculum. It would be explicitly against the spirit of the recommendations to have only a standalone course. Running through all of the issues in this area is the need to speak to the computer practitionerâ€™s responsibility to proactively address these issues by both moral and technical actions.\r\n\r\nThe ethical issues discussed in any class should be directly related to and arise naturally from the subject matter of that class. Examples include a discussion in the database course of data aggregation or data mining, or a discussion in the software engineering course of the potential conflicts between obligations to the customer and obligations to the user and others affected by their work. Programming assignments built around applications such as controlling the movement of a laser during eye surgery can help to address the professional, ethical and social impacts of computing.\r\n\r\nThere is an unresolved pedagogical conflict between having the core course at the lower (freshman-sophomore) level versus the upper (junior-senior) level. Having the course at the lower level \r\n1. Allows for coverage of methods and tools of analysis (SP3) prior to analyzing ethical issues in the context of different technical areas\r\n2. Assures that students who drop out early to enter the workforce will still be introduced to some professional and ethical issues.\r\n\r\nOn the other hand, placing the course too early may lead to the following problems:\r\n1. Lower-level students may not have the technical knowledge and intellectual maturity to support in-depth ethical analysis. Without basic understanding of technical alternatives, it is difficult to consider their ethical implications.\r\n2. Students need a certain level of maturity and sophistication to appreciate the background and issues involved. For that reason, students should have completed at least the discrete mathematics course and the second computer science course. Also, if students take a technical writing course, it should be a prerequisite or corequisite for the required course in the SP area.\r\n3. Some programs may wish to use the course as a â€œcapstoneâ€ experience for seniors. \r\n\r\nAlthough items SP2 and SP3 are listed with a number of hours associated, they are fundamental to all the other topics. Thus, when covering the other areas, instructors should continually be aware of the social context issues and the ethical analysis skills. In practice, this means that the topics in SP2 and SP3 will be continually reinforced as the material in the other areas is covered.', 'SP', 7),
(11, 'Net-Centric Computing', 'Recent advances in computer and telecommunications networking, particularly those based on TCP/IP, have increased the importance of networking technologies in the computing discipline. Net-centric computing covers a range of sub-specialties including: computer communication network concepts and protocols, multimedia systems, Web standards and technologies, network security, wireless and mobile computing, and distributed systems.\r\n\r\nMastery of this subject area involves both theory and practice. Learning experiences that involve hands-on experimentation and analysis are strongly recommended as they reinforce student understanding of concepts and their application to real-world problems. Laboratory experiments should involve data collection and synthesis, empirical modeling, protocol analysis at the source code level, network packet monitoring, software construction, and evaluation of alternative design models. All of these are important concepts that can best understood by laboratory experimentation.', 'NC', 7),
(12, 'Software Engineering', 'Software engineering is the discipline concerned with the application of theory, knowledge, and practice for effectively and efficiently building software systems that satisfy the requirements of users and customers. Software engineering is applicable to small, medium, and large-scale systems. It encompasses all phases of the life cycle of a software system. The life cycle includes requirements analysis and specification, design, construction, testing, deployment, and operation and maintenance.\r\n\r\nSoftware engineering employs engineering methods, processes, techniques, and measurement. It benefits from the use of tools for managing software development; analyzing and modeling software artifacts; assessing and controlling quality; and for ensuring a disciplined, controlled approach to software evolution and reuse. Software development, which can involve an individual developer or a team of developers, requires choosing the tools, methods, and approaches that are most applicable for a given development environment. The SE toolbox has evolved over the years; for instance, the use of contracts (such as a â€˜requiresâ€™ clause, an â€˜ensuresâ€™ clause, class invariants, etc.) is now regarded as good practice.\r\n\r\nThe elements of software engineering are applicable to the development of software in any computing application domain where professionalism, quality, schedule, and cost are important in producing a software system.', 'SE', 7),
(13, 'Programming Languages', 'A programming language is a programmer''s principal interface with the computer. More than just knowing how to program in a single language, programmers need to understand the different styles of programming promoted by different languages. In their professional life, they will be working with many different languages and styles at once, and will encounter many different languages over the course of their careers. Understanding the variety of programming languages and the design tradeoffs between the different programming paradigms makes it much easier to master new languages quickly. Understanding the pragmatic aspects of programming languages also requires a basic knowledge of programming language translation and runtime features such as storage allocation.', 'PL', 7),
(14, 'Computational Science', 'From the earliest days of the discipline, the techniques of computational science have constituted a major area of computer science research. As computers increase in their problem-solving power, this areaâ€”like much of the disciplineâ€”has grown in both breadth and importance. At the present time, scientific computational science stands as an intellectual discipline in its own right, closely related to but nonetheless distinct from computer science.\r\n\r\nAlthough courses in computational science are extremely valuable components of an undergraduate program in computer science, the CS2001 Task Forces believe that none of the topics in this area represent core knowledge. From our surveys of curricula and interaction with the computer science education community, we are convinced no consensus exists that this material is essential for all CS undergraduates. It remains a vital part of the discipline, but need not be a part of every program.\r\n\r\nFor those who choose to pursue it, this area offers exposure to many valuable ideas and techniques, including precision of numerical representation, error analysis, numerical techniques, parallel architectures and algorithms, modeling and simulation, and scientific visualization. At the same time, students who take courses in this area have an opportunity to apply these techniques in a wide range of application areas, such as the following:\r\n\r\nâ€¢ Molecular dynamics\r\nâ€¢ Fluid dynamics\r\nâ€¢ Celestial mechanics\r\nâ€¢ Economic forecasting\r\nâ€¢ Optimization problems\r\nâ€¢ Structural analysis of materials\r\nâ€¢ Bioinformatics\r\nâ€¢ Computational biology\r\nâ€¢ Geologic modeling\r\nâ€¢ Computerized tomography\r\n\r\nEach of the units in this area corresponds to a full-semester course at most institutions. The level of specification of the topic descriptions and the Learning Objectives is therefore different from that used in other areas in which the individual units typically require smaller blocks of time.', 'CN', 7),
(17, 'Algorithms and Complexity', '', 'AL', 8),
(18, 'Algorithms and Complexity', 'Algorithms are fundamental to computer science and software engineering. The real-world performance of any software system depends on only two things: (1) the algorithms chosen and (2) the suitability and efficiency of the various layers of implementation. Good algorithm design is therefore crucial for the performance of all software systems. Moreover, the study of algorithms provides insight into the intrinsic nature of the problem as well as possible solution techniques independent of programming language, programming paradigm, computer hardware, or any other implementation aspect.\r\n\r\nAn important part of computing is the ability to select algorithms appropriate to particular purposes and to apply them, recognizing the possibility that no suitable algorithm may exist. This facility relies on understanding the range of algorithms that address an important set of well-defined problems, recognizing their strengths and weaknesses, and their suitability in particular contexts. Efficiency is a pervasive theme throughout this area.\r\n\r\nWith the emergence of multicore processors, issues related to parallel algorithms have become more relevant. While the parallelism topics remain listed here as elective, the committee believes that the role of parallelism throughout the curriculum needs to be considered.', 'AL', 9),
(19, 'Architecture and Organization', 'The computer lies at the heart of computing. Without it most of the computing disciplines today would be a branch of theoretical mathematics. A professional in any field of computing should not regard the computer as just a black box that executes programs by magic. All students of computing should acquire some understanding and appreciation of a computer system''s functional components, their characteristics, their performance, and their interactions. Students need to understand computer architecture in order to make best use of the software tools and computer languages they use to create programs. In this introduction the term architecture is taken to include instruction set architecture (the programmerâ€™s abstraction of a computer), organization or microarchitecture (the internal implementation of a computer at the register and functional unit level), and system architecture (the\r\norganization of the computer at the cache, and bus level). Students should also understand the complex tradeoffs between CPU clock speed, cache size, bus organization, number of core processors, and so on. Computer architecture also underpins other areas of the computing curriculum such as operating systems (input/output, memory technology) and high-level languages (pointers, parameter passing).\r\n\r\nThe learning objectives specified for these topics correspond primarily to the core and are intended to support programs that require only the minimum 36 hours of computer architecture. For programs that want to teach more than the minimum, the same topics (AR1-AR6) can be treated at a more advanced level by implementing a two-course sequence. For programs that want to cover the elective topics, those topics can be introduced within a two-course sequence and/or be treated in a more comprehensive way in a third course.', 'AR', 9),
(20, 'Computational Science', 'From the earliest days of the discipline, the techniques of computational science have constituted a major area of computer science research. As computers increase in their problem-solving power, this areaâ€”like much of the disciplineâ€”has grown in both breadth and importance. At the present time, scientific computational science stands as an intellectual discipline in its own right, closely related to but nonetheless distinct from computer science.\r\n\r\nAlthough courses in computational science are extremely valuable components of an undergraduate program in computer science, the CS2001 Task Forces believe that none of the topics in this area represent core knowledge. From our surveys of curricula and interaction with the computer science education community, we are convinced no consensus exists that this material is essential for all CS undergraduates. It remains a vital part of the discipline, but need not be a part of every program.\r\n\r\nFor those who choose to pursue it, this area offers exposure to many valuable ideas and techniques, including precision of numerical representation, error analysis, numerical techniques, parallel architectures and algorithms, modeling and simulation, and scientific visualization. At the same time, students who take courses in this area have an opportunity to apply these techniques in a wide range of application areas, such as the following:\r\n\r\nâ€¢ Molecular dynamics\r\nâ€¢ Fluid dynamics\r\nâ€¢ Celestial mechanics\r\nâ€¢ Economic forecasting\r\nâ€¢ Optimization problems\r\nâ€¢ Structural analysis of materials\r\nâ€¢ Bioinformatics\r\nâ€¢ Computational biology\r\nâ€¢ Geologic modeling\r\nâ€¢ Computerized tomography\r\n\r\nEach of the units in this area corresponds to a full-semester course at most institutions. The level of specification of the topic descriptions and the Learning Objectives is therefore different from that used in other areas in which the individual units typically require smaller blocks of time.', 'CN', 9),
(21, 'Discrete Structures', 'Discrete structures are foundational material for computer science. By foundational we mean that relatively few computer scientists will be working primarily on discrete structures, but that many other areas of computer science require the ability to work with concepts from discrete structures. Discrete structures include important material from such areas as set theory, logic, graph theory, and combinatorics.\r\n\r\nThe material in discrete structures is pervasive in the areas of data structures and algorithms but appears elsewhere in computer science as well. For example, an ability to create and understand a proofâ€”either a formal symbolic proof or a less formal but still mathematically rigorous argumentâ€”is essential in formal specification, in verification, in databases, and in cryptography. Graph theory concepts are used in networks, operating systems, and compilers. Set theory concepts are used in software engineering and in databases.\r\n\r\nAs the field of computer science matures, more and more sophisticated analysis techniques are being brought to bear on practical problems. To understand the computational techniques of the future, todayâ€™s students will need a strong background in discrete structures. \r\n\r\nFinally, we note that while areas often have somewhat fuzzy boundaries, this is especially true for discrete structures. We have gathered together here a body of material of a mathematical nature that computer science education must include, and that computer science educators know well enough to specify in great detail. However, the decision about where to draw the line between this area and the Algorithms and Complexity area (AL) on the one hand, and topics left only as supporting mathematics on the other hand, was inevitably somewhat arbitrary. We remind readers that there are vital topics from those two areas that some schools will include in courses with titles like "discrete structures" and "discrete mathematics"; some will require one course, others two. In April 2007, the SIGCSE Committee on the Implementation of a Discrete Mathematics Course released a report detailing three models for a one-semester discrete mathematics course to meet the criteria articulated in CS2001; these models remain applicable under the slightly revised suggestions in this interim report. See SIGCSE Committee Report On the Implementation of a Discrete Mathematics Course.', 'DS', 9),
(22, 'Graphics and Visual Computing', 'The area encompassed by Graphics and Visual Computing (GV) is divided into four interrelated fields:\r\n\r\nâ€¢ Computer graphics. Computer graphics is the art and science of communicating information using images that are generated and presented through computation. This requires (a) the design and construction of models that represent information in ways that support the creation and viewing of images, (b) the design of devices and techniques through which the person may interact with the model or the view, (c) the creation of techniques for rendering the model, and (d) the design of ways the images may be preserved The goal of computer graphics is to engage the person''s visual centers alongside other cognitive centers in understanding.\r\n\r\nâ€¢ Visualization. The field of visualization seeks to determine and present underlying correlated structures and relationships in both scientific (computational and medical sciences) and more abstract datasets. The prime objective of the presentation should be to communicate the information in a dataset so as to enhance understanding. Although current techniques of visualization exploit visual abilities of humans, other sensory modalities, including sound and haptics (touch), are also being considered to aid the discovery process of information.\r\n\r\nâ€¢ Virtual reality. Virtual reality (VR) enables users to experience a three-dimensional environment generated using computer graphics, and perhaps other sensory modalities, to provide an environment for enhanced interaction between a human user and a computer-created world.\r\n\r\nâ€¢ Computer vision. The goal of computer vision (CV) is to deduce the properties and structure of the threedimensional world from one or more two-dimensional images. The understanding and practice of computer vision depends upon core concepts in computing, but also relates strongly to the disciplines of physics, mathematics, and psychology.', 'GV', 9),
(23, 'Human-Computer Interaction', 'Human-computer interaction is an important area of computing knowledge. As more people conduct more of their daily activities interacting with a computer, the construction of interfaces that ease that interaction is critical for increasing satisfaction and improving productivity. As more software requires a user interface, knowing how to create a usable interface and testing the usability of that interface become required skills for all computer science students.\r\n\r\nThe design of human-computer interfaces impacts the software life-cycle. Where interfaces used to be designed after the functionality was completed, we now know that the design of a usable interface should occur early in the cycle. We know that the design and implementation of the core functionality can influence the user interface. Human-computer interfaces are themselves software components, and the development and reuse of those components become an important part of the development of most software today.', 'HCI', 9),
(24, 'Security and Information Assurance', 'IAS is a new KA in recognition of the worldâ€™s reliance on information technology and its critical 35 role in computer science education. IAS as a domain is the set of controls and processes, both 36 technical and policy, intended to protect and defend information and information systems. IAS 37 draws together topics that are pervasive throughout other KAs. Topics germane to only IAS are 38 presented in depth in this KA, whereas other topics are noted and cross referenced to the KAs 39 that contain them. As such, this KA is prefaced with a detailed table of cross-references to other 40 KAs.', 'IAS', 9),
(25, 'Information Management', 'Information Management (IM) plays a critical role in almost all areas where computers are used. This area includes the capture, digitization, representation, organization, transformation, and presentation of information; algorithms for efficient and effectiveaccess and updating of stored information, data modeling and abstraction, and physical file storage techniques. It also encompasses information security, privacy, integrity, and protection in a shared environment. The student needs to be able to develop conceptual and physical data models, determine what IM methods and techniques are appropriate for a given problem, and be able to select and implement an appropriate IM solution that reflects all suitable constraints, including scalability and usability.', 'IM', 9),
(26, 'Intelligent Systems', 'The field of artificial intelligence (AI) is concerned with the design and analysis of autonomous agents. These are software systems and/or physical machines, with sensors and actuators, embodied for example within a robot or an autonomous spacecraft. An intelligent system has to perceive its environment, to act rationally towards its assigned tasks, to interact with other agents and with human beings.\r\n\r\nThese capabilities are covered by topics such as computer vision, planning and acting, robotics, multiagents systems, speech recognition, and natural language understanding. They rely on a broad set of general and specialized knowledge representations and reasoning mechanisms, on problem solving and search algorithms, and on machine learning techniques.\r\n\r\nFurthermore, artificial intelligence provides a set of tools for solving problems that are difficult or impractical to solve with other methods. These include heuristic search and planning algorithms, formalisms for knowledge representation and reasoning, machine learning techniques, and methods applicable to sensing and action problems such as speech and language understanding, computer vision, and robotics, among others. The student needs to be able to determine when an AI approach is appropriate for a given problem, and to be able to select and implement a suitable AI method.', 'IS', 9),
(27, 'Networking and Communication', 'CC2001 introduced a KA entitled â€œNet-Centric Computingâ€ which encompassed a combination 43 of topics including traditional networking, web development, and network security. Given the 44 growth and divergence in these topics since the last report, we renamed and re-factored this KA 45 to focus specifically on topics in networking and communication. Discussions of web 46 applications and mobile device development are now covered in the new PBD-Platform-Based 47 Development KA. Security is covered in the new IAS-Information Assurance and Security KA.', 'NC', 9),
(28, 'Operating Systems', 'An operating system defines an abstraction of hardware behavior with which programmers can control the hardware. It also manages resource sharing among the computerâ€™s users. The topics in this area explain the issues that influence the design of contemporary operating systems. Courses that cover this area will typically include a laboratory component to enable students to experiment with operating systems.\r\n\r\nOver the years, operating systems and their abstractions have become complex relative to typical application software. It is necessary to ensure that the student understands the extent of the use of an operating system prior to a detailed study of internal implementation algorithms and data structures. Therefore these topics address both the use of operating systems (externals) and their design and implementation (internals). Many of the ideas involved in operating system use have wider applicability across the field of computer science, such as concurrent programming. Studying internal design has relevance in such diverse areas as dependable programming, algorithm design and implementation, modern device development, building virtual environments, caching material across the web, building secure and safe systems, network management, and many others.', 'OS', 9),
(29, 'Platform-based Development', 'PBD is a new KA that recognizes the increasing use of platform-specific programming environments, both at the introductory level and in upper-level electives. Platforms such as the Web or mobile devices enable students to learn within and about environments constrained by hardware, APIs, and special services (often in cross-disciplinary contexts). These environments are sufficiently different from â€œgeneral purposeâ€ programming to warrant this new (wholly elective) KA.', 'PBD', 9),
(30, 'Parallel and Distributed Computing', 'Previous curricular volumes had parallelism topics distributed across disparate KAs as electives. Given the vastly increased importance of parallel and distributed computing, it seemed crucial to identify essential concepts in this area and to promote those topics to the core. To highlight and coordinate this material, CS2013 dedicates a KA to this area. This new KA includes material on programming models, programming pragmatics, algorithms, performance, computer architecture, and distributed systems.', 'PD', 9),
(31, 'Programming Languages', 'A programming language is a programmer''s principal interface with the computer. More than just knowing how to program in a single language, programmers need to understand the different styles of programming promoted by different languages. In their professional life, they will be working with many different languages and styles at once, and will encounter many different languages over the course of their careers. Understanding the variety of programming languages and the design tradeoffs between the different programming paradigms makes it much easier to master new languages quickly. Understanding the pragmatic aspects of programming languages also requires a basic knowledge of programming language translation and runtime features such as storage allocation.', 'PL', 9),
(32, 'Software Development Fundamentals', 'This new KA generalizes introductory programming to focus on the entire software development process, identifying concepts and skills that should be mastered in the first year of a computer science program. As a result of its broad purpose, the SDF KA includes fundamental concepts and skills that could appear in other software-oriented KAs (e.g., programming constructs from Programming Languages, simple algorithm analysis from Algorithms and Complexity, simple development methodologies from Software Engineering). Likewise, each of those KAs will contain more advanced material that builds upon the fundamental concepts and skills in SDF. Compared to previous volumes, key approaches to programming -- including object-oriented programming, functional programming, and event-driven programming -- are kept in one place, namely the PL KA, even though many curricula will cover some of these topics in introductory courses.', 'SDF', 9),
(33, 'Software Engineering', 'Software engineering is the discipline concerned with the application of theory, knowledge, and practice for effectively and efficiently building software systems that satisfy the requirements of users and customers. Software engineering is applicable to small, medium, and large-scale systems. It encompasses all phases of the life cycle of a software system. The life cycle includes requirements analysis and specification, design, construction, testing, deployment, and operation and maintenance.\r\n\r\nSoftware engineering employs engineering methods, processes, techniques, and measurement. It benefits from the use of tools for managing software development; analyzing and modeling software artifacts; assessing and controlling quality; and for ensuring a disciplined, controlled approach to software evolution and reuse. Software development, which can involve an individual developer or a team of developers, requires choosing the tools, methods, and approaches that are most applicable for a given development environment. The SE toolbox has evolved over the years; for instance, the use of contracts (such as a â€˜requiresâ€™ clause, an â€˜ensuresâ€™ clause, class invariants, etc.) is now regarded as good practice.\r\n\r\nThe elements of software engineering are applicable to the development of software in any computing application domain where professionalism, quality, schedule, and cost are important in producing a software system.', 'SE', 9),
(34, 'Systems Fundamentals', 'In previous curricular volumes, the interacting layers of a typical computing system, from hardware building blocks, to architectural organization, to operating system services, to application execution environments (particularly for parallel execution in a modern view of applications), were presented in independent knowledge units. The new Systems Fundamentals KA presents a unified systems perspective and common conceptual foundation for other KAs (notably Architecture and Organization, Network and Communications, Operating Systems, and Parallel and Distributed Algorithms). An organizational principle is â€œprogramming for performanceâ€: what a programmer needs to understand about the underlying system to achieve high performance, particularly in terms of exploiting parallelism.', 'SF', 9);
INSERT INTO `knowledge_areas` (`id`, `name`, `description`, `abbreviation`, `body_knowledge_id`) VALUES
(35, 'Social Issues and Professional Practice', 'While technical issues are central to the computing curriculum, they do not constitute a complete educational program in the field. Students must also be exposed to the larger societal context of computing to develop an understanding of the relevant social, ethical, legal and professional issues. This need to incorporate the study of these non-technical issues into the ACM curriculum was formally recognized in 1991, as can be seen from the following excerpt [Tucker91]: \r\n\r\nUndergraduates also need to understand the basic cultural, social, legal, and ethical issues inherent in the discipline of computing. They should understand where the discipline has been, where it is, and where it is heading. They should also understand their individual roles in this process, as well as appreciate the philosophical questions, technical problems, and aesthetic values that play an important part in the development of the discipline.\r\n\r\nStudents also need to develop the ability to ask serious questions about the social impact of computing and to evaluate proposed answers to those questions. Future practitioners must be able to anticipate the impact of introducing a given product into a given environment. Will that product enhance or degrade the quality of life? What will the impact be upon individuals, groups, and institutions?\r\n\r\nFinally, students need to be aware of the basic legal rights of software and hardware vendors and users, and they also need to appreciate the ethical values that are the basis for those rights. Future practitioners must understand the responsibility that they will bear, and the possible consequences of failure. They must understand their own limitations as well as the limitations of their tools. All practitioners must make a long-term commitment to remaining current in their chosen specialties and in the discipline of computing as a whole.\r\n\r\nAs technological advances continue to significantly impact the way we live and work, the critical importance of these social and professional issues continues to increase; new computer-based products and venues pose ever more challenging problems each year. It is our students who must enter the workforce and academia with intentional regard for the identification and resolution of these problems.\r\n\r\nComputer science educators may opt to deliver this core and elective material in stand-alone courses, integrated into traditional technical and theoretical courses, or as special units in capstone and professional practice courses. The material in this familiarity area is best covered through a combination of one required course along with short modules in other courses. On the one hand, some units listed as core tier-1â€”in particular, Social Context, Analytical Tools, Professional Ethics, and Intellectual Propertyâ€”do not readily lend themselves to being covered in other traditional courses. Without a standalone course, it is difficult to cover these topics appropriately. On the other hand, if ethical and social considerations are covered only in the standalone course and not â€œin context,â€ it will reinforce the false notion that technical processes are void of these other relevant issues. Because of this broad relevance, it is important that several traditional courses include modules that analyze the ethical, social and professional considerations in the context of the technical subject matter of the course. Courses in areas such as software engineering, databases, computer networks, computer security, and introduction to computing provide obvious context for analysis of ethical issues. However, an ethics-related module could be developed for almost any course in the curriculum. It would be explicitly against the spirit of the recommendations to have only a standalone course. Running through all of the issues in this area is the need to speak to the computer practitionerâ€™s responsibility to proactively address these issues by both moral and technical actions. The ethical issues discussed in any class should be directly related to and arise naturally from the subject matter of that class. Examples include a discussion in the database course of data aggregation or data mining, or a discussion in the software engineering course of the potential conflicts between obligations to the customer and obligations to the user and others affected by their work. Programming assignments built around applications such as controlling the movement of a laser during eye surgery can help to address the professional, ethical and social impacts of computing. Computing faculty who are unfamiliar with the content and/or pedagogy of applied ethics are urged to take advantage of the considerable resources from ACM, IEEE-CS, SIGCAS (special interest group 55 on computers and society), and other organizations. \r\n\r\nIt should be noted that the application of ethical analysis underlies every subsection of this Social and Professional knowledge area in computing. The ACM Code of Ethics and Professional Conduct - www.acm.org/about/code-of-ethics - provide guidelines that serve as the basis for the conduct of our professional work. The General Moral Imperatives provide an understanding of 60 our commitment to personal responsibility, professional conduct, and our leadership roles.', 'SP', 9),
(51, 'Hola', '', 'HI', 12),
(52, 'Chao', '', 'CH', 12),
(53, 'Pepe', '', 'Pancho', 12),
(56, 'Una Ã¡rea de conocimiento', '', 'UNA', 13),
(57, 'La segunda', '', 'DOS', 13),
(58, 'La tercera', '', 'TRES', 13),
(59, 'Lucho ', '', 'Hola', 12),
(60, 'Area uno', 'Esta es la descripciÃ³n del Ã¡rea uno corregida', 'Uno', 14),
(61, 'Area dos', '', 'Dos', 14),
(63, 'Area uno de prueba', 'DescripciÃ³n', 'uno', 15),
(64, 'Area dos de prueba', 'DescripciÃ­n de area dos', 'Dos', 15),
(65, 'This is the name', '', 'ee', 16),
(66, 'dvdvdvd', 'sdvadvadffds', '33', 16),
(67, 'fffd', '', '44', 16),
(75, 'Uno', '', 'bb', 17),
(78, 'cuatro', 'fghsgsdgdg', 'ffd', 17),
(79, 'cinvo', 'gffggfdg', 'vf', 17);

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `learning_objectives`
--

CREATE TABLE IF NOT EXISTS `learning_objectives` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `description` varchar(250) NOT NULL,
  `unit_id` int(11) NOT NULL,
  `topic_type_id` int(11) NOT NULL,
  `mastery_level_id` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=1254 ;

--
-- Volcado de datos para la tabla `learning_objectives`
--

INSERT INTO `learning_objectives` (`id`, `description`, `unit_id`, `topic_type_id`, `mastery_level_id`) VALUES
(1, 'Explain with examples the basic terminology of functions, relations, and sets.', 1, 0, 0),
(2, 'Perform the operations associated with sets, functions, and relations.', 1, 0, 0),
(3, 'Relate practical examples to the appropriate set, function, or relation model, and interpret the associated operations and terminology in context.', 1, 0, 0),
(4, 'Apply formal methods of symbolic propositional and predicate logic.', 2, 0, 0),
(5, 'Describe how formal tools of symbolic logic are used to model real-life situations, including those arising in computing contexts such as program correctness, database queries, and algorithms.', 2, 0, 0),
(6, 'Use formal logic proofs and/or informal but rigorous logical reasoning to, for example, predict the behavior of software or to solve problems such as puzzles.', 2, 0, 0),
(7, 'Describe the importance and limitations of predicate logic.', 2, 0, 0),
(8, 'Outline the basic structure of and give examples of each proof technique described in this unit.', 3, 0, 0),
(9, 'Discuss which type of proof is best for a given problem.', 3, 0, 0),
(10, 'Relate the ideas of mathematical induction to recursion and recursively defined structures.', 3, 0, 0),
(11, 'Identify the difference between mathematical and strong induction and give examples of the appropriate use of each.', 3, 0, 0),
(12, 'Compute permutations and combinations of a set, and interpret the meaning in the context of the particular application.', 4, 0, 0),
(13, 'State the definition of the Master theorem.', 4, 0, 0),
(14, 'Solve a variety of basic recurrence equations.', 4, 0, 0),
(15, 'Analyze a problem to create relevant recurrence equations or to identify important counting questions.', 4, 0, 0),
(16, 'Illustrate by example the basic terminology of graph theory, and some of the properties and special cases of each.', 5, 0, 0),
(17, 'Demonstrate different traversal methods for trees and graphs.', 5, 0, 0),
(18, 'Model problems in computer science using graphs and trees.', 5, 0, 0),
(19, 'Relate graphs and trees to data structures, algorithms, and counting.', 5, 0, 0),
(20, 'Calculate probabilities of events and expectations of random variables for elementary problems such as games of chance.', 6, 0, 0),
(21, 'Differentiate between dependent and independent events.', 6, 0, 0),
(22, 'Apply the binomial theorem to independent events and Bayes'' theorem to dependent events.', 6, 0, 0),
(23, 'Apply the tools of probability to solve problems in areas such as the Monte Carlo method, the average case analysis of algorithms, and hashing.', 6, 0, 0),
(24, 'Analyze and explain the behavior of simple programs involving the fundamental programming constructs covered by this unit.', 7, 0, 0),
(25, 'Modify and expand short programs that use standard conditional and iterative control structures and functions.', 7, 0, 0),
(26, 'Design, implement, test, and debug a program that uses each of the following fundamental programming constructs: basic computation, simple I/O, standard conditional and iterative structures, and the definition of functions.', 7, 0, 0),
(27, 'Choose appropriate conditional and iteration constructs for a given programming task.', 7, 0, 0),
(28, 'Apply the techniques of structured (functional) decomposition to break a program into smaller pieces.', 7, 0, 0),
(29, 'Describe the mechanics of parameter passing.', 7, 0, 0),
(30, 'Discuss the importance of algorithms in the problem-solving process.', 8, 0, 0),
(31, 'Identify the necessary properties of good algorithms.', 8, 0, 0),
(32, 'Create algorithms for solving simple problems.', 8, 0, 0),
(33, 'Use pseudocode or a programming language to implement, test, and debug algorithms for solving simple problems.', 8, 0, 0),
(34, 'Describe strategies that are useful in debugging.', 8, 0, 0),
(35, 'Describe the representation of numeric and character data.', 9, 0, 0),
(36, 'Understand how precision and round-off can affect numeric calculations.', 9, 0, 0),
(37, 'Discuss the use of primitive data types and built-in data structures.', 9, 0, 0),
(38, 'Describe common applications for each data structure in the topic list.', 9, 0, 0),
(39, 'Implement the user-defined data structures in a high-level language.', 9, 0, 0),
(40, 'Compare alternative implementations of data structures with respect to performance.', 9, 0, 0),
(41, 'Write programs that use each of the following data structures: arrays, strings, linked lists, stacks, queues, and hash tables.', 9, 0, 0),
(42, 'Compare and contrast the costs and benefits of dynamic and static data structure implementations.', 9, 0, 0),
(43, 'Choose the appropriate data structure for modeling a given problem.', 9, 0, 0),
(44, 'Describe the concept of recursion and give examples of its use.', 10, 0, 0),
(45, 'Identify the base case and the general case of a recursively defined problem.', 10, 0, 0),
(46, 'Compare iterative and recursive solutions for elementary problems such as factorial.', 10, 0, 0),
(47, 'Describe the divide-and-conquer approach.', 10, 0, 0),
(48, 'Implement, test, and debug simple recursive functions and procedures.', 10, 0, 0),
(49, 'Determine when a recursive solution is appropriate for a problem.', 10, 0, 0),
(50, 'Explain the difference between event-driven programming and command-line programming.', 11, 0, 0),
(51, 'Design, code, test, and debug simple event-driven programs that respond to user events.', 11, 0, 0),
(52, 'Develop code that responds to exception conditions raised during execution.', 11, 0, 0),
(53, 'Justify the philosophy of object-oriented design and the concepts of encapsulation, abstraction, inheritance, and polymorphism.', 12, 0, 0),
(54, 'Design, implement, test, and debug simple programs in an object-oriented programming language.', 12, 0, 0),
(55, 'Describe how the class mechanism supports encapsulation and information hiding.', 12, 0, 0),
(56, 'Design, implement, and test the implementation of “is-a” relationships among objects using a class hierarchy and inheritance.', 12, 0, 0),
(57, 'Compare and contrast the notions of overloading and overriding methods in an object-oriented language.', 12, 0, 0),
(58, 'Explain the objectives of information security', 13, 0, 0),
(59, 'Analyze the tradeoffs inherent in security', 13, 0, 0),
(60, 'Explain the importance and application of each of confidentiality, integrity, and availability', 13, 0, 0),
(61, 'Understand the basic categories of threats to computers and networks', 13, 0, 0),
(62, 'Discuss issues for creating security policy for a large organization', 13, 0, 0),
(63, 'Defend the need for protection and security, and the role of ethical considerations in computer use', 13, 0, 0),
(64, 'Add a very simple risk-assessment learning outcome here', 13, 0, 0),
(65, 'Rewrite a simple program to remove a simple vulnerability', 14, 0, 0),
(66, 'Explain why or why not a buffer overflow is possible in the programming language you know best', 14, 0, 0),
(67, 'Explain why one or more language constructs may lead to security problems such as overflows.', 14, 0, 0),
(68, 'Explain the use of big O, omega, and theta notation to describe the amount of work done by an algorithm.', 15, 0, 0),
(69, 'Use big O, omega, and theta notation to give asymptotic upper, lower, and tight bounds on time and space complexity of algorithms.', 15, 0, 0),
(70, 'Determine the time and space complexity of simple algorithms.', 15, 0, 0),
(71, 'Deduce recurrence relations that describe the time complexity of recursively defined algorithms.', 15, 0, 0),
(72, 'Solve elementary recurrence relations.', 15, 0, 0),
(73, 'Describe the shortcoming of brute-force algorithms.', 16, 0, 0),
(74, 'For each of several kinds of algorithm (brute force, greedy, divide-and-conquer, backtracking, branch-andbound, and heuristic), identify an example of everyday human behavior that exemplifies the basic concept.', 16, 0, 0),
(75, 'Implement a greedy algorithm to solve an appropriate problem.', 16, 0, 0),
(76, 'Implement a divide-and-conquer algorithm to solve an appropriate problem.', 16, 0, 0),
(77, 'Use backtracking to solve a problem such as navigating a maze.', 16, 0, 0),
(78, 'Describe various heuristic problem-solving methods.', 16, 0, 0),
(79, 'Use pattern matching to analyze substrings.', 16, 0, 0),
(80, 'Use numerical approximation to solve mathematical problems, such as finding the roots of a polynomial.', 16, 0, 0),
(81, 'Implement the most common quadratic and O(NlogN) sorting algorithms.', 17, 0, 0),
(82, 'Design and implement an appropriate hashing function for an application.', 17, 0, 0),
(83, 'Design and implement a collision-resolution algorithm for a hash table.', 17, 0, 0),
(84, 'Discuss the computational efficiency of the principal algorithms for sorting, searching, and hashing.', 17, 0, 0),
(85, 'Discuss factors other than computational efficiency that influence the choice of algorithms, such as', 17, 0, 0),
(86, 'programming time, maintainability, and the use of application-specific patterns in the input data.', 17, 0, 0),
(87, 'Solve problems using the fundamental graph algorithms, including depth-first and breadth-first search, singlesource', 17, 0, 0),
(88, 'and all-pairs shortest paths, transitive closure, topological sort, and at least one minimum spanning tree', 17, 0, 0),
(89, 'algorithm.', 17, 0, 0),
(90, 'Demonstrate the following capabilities: to evaluate algorithms, to select from a range of possible options, to', 17, 0, 0),
(91, 'provide justification for that selection, and to implement the algorithm in programming context.', 17, 0, 0),
(92, 'Explain the distributed paradigm.', 18, 0, 0),
(93, 'Explain one simple distributed algorithm.', 18, 0, 0),
(94, 'Determine when to use consensus or election algorithms.', 18, 0, 0),
(95, 'Distinguish between logical and physical clocks.', 18, 0, 0),
(96, 'Describe the relative ordering of events in a distributed algorithm.', 18, 0, 0),
(97, 'Discuss the concept of finite state machines.', 19, 0, 0),
(98, 'Explain context-free grammars.', 19, 0, 0),
(99, 'Design a deterministic finite-state machine to accept a specified language.', 19, 0, 0),
(100, 'Explain how some problems have no algorithmic solution.', 19, 0, 0),
(101, 'Provide examples that illustrate the concept of uncomputability.', 19, 0, 0),
(102, 'Define the classes P and NP.', 20, 0, 0),
(103, 'Explain the significance of NP-completeness.', 20, 0, 0),
(104, 'Prove that a problem is NP-complete by reducing a classic known NP-complete problem to it.', 20, 0, 0),
(105, 'Determine a language’s location in the Chomsky hierarchy (regular sets, context-free, context-sensitive, and recursively enumerable languages).', 21, 0, 0),
(106, 'Prove that a language is in a specified class and that it is not in the next lower class.', 21, 0, 0),
(107, 'Convert among equivalently powerful notations for a language, including among DFAs, NFAs, and regular expressions, and between PDAs and CFGs.', 21, 0, 0),
(108, 'Explain at least one algorithm for both top-down and bottom-up parsing.', 21, 0, 0),
(109, 'Explain the Church-Turing thesis and its significance.', 21, 0, 0),
(110, 'Use the potential method to provide an amortized analysis of previously unseen data structure, given the potential function.', 22, 0, 0),
(111, 'Explain why competitive analysis is an appropriate measure for online algorithms.', 22, 0, 0),
(112, 'Explain the use of randomization in the design of an algorithm for a problem where a deterministic algorithm is unknown or much more difficult.', 22, 0, 0),
(113, 'Design and implement a dynamic programming solution to a problem.', 22, 0, 0),
(114, 'Describe efficient basic number-theoretic algorithms, including greatest common divisor, multiplicative inverse mod n, and raising to powers mod n.', 23, 0, 0),
(115, 'Describe at least one public-key cryptosystem, including a necessary complexity-theoretic assumption for its security.', 23, 0, 0),
(116, 'Create simple extensions of cryptographic protocols, using known protocols and cryptographic primitives.', 23, 0, 0),
(117, 'Describe and give time analysis of at least two algorithms for finding a convex hull.', 24, 0, 0),
(118, 'Justify the Omega(N log N) lower bound on finding the convex hull.', 24, 0, 0),
(119, 'Describe at least one additional efficient computational geometry algorithm, such as finding the closest pair of points, convex layers, or maximal layers.', 24, 0, 0),
(120, 'Describe implementation of linked lists on a PRAM.', 25, 0, 0),
(121, 'Use parallel-prefix operation to perform simple computations efficiently in parallel.', 25, 0, 0),
(122, 'Explain Brent’s theorem and its relevance.', 25, 0, 0),
(123, 'Design a simple circuit using fundamental building blocks.', 26, 0, 0),
(124, 'Appreciate the effect of AND, OR, NOT and EOR operations on binary data.', 26, 0, 0),
(125, 'Understand how numbers, text, images, and sound can be represented in digital form and the limitations of such representations.', 26, 0, 0),
(126, 'Understand how errors due to rounding effects and their propagation affect the accuracy of chained calculations.', 26, 0, 0),
(127, 'Appreciate how data can be compressed to reduce storage requirements including the concepts of lossless and lossy compression.', 26, 0, 0),
(128, 'Describe the progression of computers from vacuum tubes to VLSI.', 27, 0, 0),
(129, 'Appreciate the concept of an instruction set architecture, ISA, and the nature of a machine-level instruction in', 27, 0, 0),
(130, 'terms of its functionality and use of resources (registers and memory).', 27, 0, 0),
(131, 'To understand the relationship between instruction set architecture, microarchitecture, and system architecture and their roles in the development of the computer.', 27, 0, 0),
(132, 'Be aware of the various classes of instruction: data movement, arithmetic, logical, and flow control.', 27, 0, 0),
(133, 'Appreciate the difference between register-to-memory ISAs and load/store ISAs.', 27, 0, 0),
(134, 'Appreciate how conditional operations are implemented at the machine level.', 27, 0, 0),
(135, 'Understand the way in which subroutines are called and returns made.', 27, 0, 0),
(136, 'Appreciate how a lack of resources in ISPs has an impact on high-level languages and the design of compilers.', 27, 0, 0),
(137, 'Understand how, at the assembly language level, how parameters are passed to subroutines and how local workplace is created and accessed.', 27, 0, 0),
(138, 'Appreciate the need of open- and closed-loop communications and the use of buffers to control dataflow.', 28, 0, 0),
(139, 'Explain how interrupts are used to implement I/O control and data transfers.', 28, 0, 0),
(140, 'Identify various types of buses in a computer system and understand how devices compete for a bus and are granted access to the bus.', 28, 0, 0),
(141, 'Be aware of the progress in bus technology and understand the features and performance of a range of modern buses (both serial and parallel).', 28, 0, 0),
(142, 'Identify the memory technologies found in a computer and be aware of the way in which memory technology is changing.', 29, 0, 0),
(143, 'Appreciate the need for storage standards for complex data storage mechanisms such as DVD.', 29, 0, 0),
(144, 'Understand why a memory hierarchy is necessary to reduce the effective memory latency.', 29, 0, 0),
(145, 'Appreciate that most data on the memory bus is cache refill traffic', 29, 0, 0),
(146, 'Describe the various ways of organizing cache memory and appreciate the cost-performance tradeoffs for each arrangement.', 29, 0, 0),
(147, 'Appreciate the need for cache coherency in multiprocessor systems', 29, 0, 0),
(148, 'Review of the use of register transfer language to describe internal operations in a computer', 30, 0, 0),
(149, 'Understand how a CPU’s control unit interprets a machine-level instruction – either directly or as a microprogram.', 30, 0, 0),
(150, 'Appreciate how processor performance can be improved by overlapping the execution of instruction by pipelining.', 30, 0, 0),
(151, 'Understand the difference between processor performance and system performance (i.e., the effects of memory systems, buses and software on overall performance).', 30, 0, 0),
(152, 'Appreciate how superscalar architectures use multiple arithmetic units to execute more than one instruction per clock cycle.', 30, 0, 0),
(153, 'Understand how computer performance is measured by measurements such as MIPS or SPECmarks and the limitations of such measurements.', 30, 0, 0),
(154, 'Appreciate the relationship between power dissipation and computer performance and the need to minimize power consumption in mobile applications.', 30, 0, 0),
(155, 'Discuss the concept of parallel processing and the relationship between parallelism and performance.', 31, 0, 0),
(156, 'Appreciate that multimedia values (e.g., 8-/16-bit audio and visual data) can be operated on in parallel in 64-bit registers to enhance performance.', 31, 0, 0),
(157, 'Understand how performance can be increased by incorporating multiple processors on a single chip.', 31, 0, 0),
(158, 'Appreciate the need to express algorithms in a form suitable for execution on parallel processors.', 31, 0, 0),
(159, 'Understand how special-purpose graphics processors, GPUs, can accelerate performance in graphics applications.', 31, 0, 0),
(160, 'Understand the organization of computer structures that can be electronically configured and reconfigured', 31, 0, 0),
(161, 'Explain the concept of branch prediction its use in enhancing the performance of pipelined machines.', 32, 0, 0),
(162, 'Understand how speculative execution can improve performance.', 32, 0, 0),
(163, 'Provide a detailed description of superscalar architectures and the need to ensure program correctness when executing instructions out-of-order.', 32, 0, 0),
(164, 'Explain speculative execution and identify the conditions that justify it.', 32, 0, 0),
(165, 'Discuss the performance advantages that multithreading can offer along with the factors that make it difficult to derive maximum benefits from this approach.', 32, 0, 0),
(166, 'Appreciate the nature of VLIW and EPIC architectures and the difference between them (and between superscalar processors)', 32, 0, 0),
(167, 'Understand how a processor re-orders memory loads and stores to increase performance', 32, 0, 0),
(168, 'Explain the basic components of network systems and distinguish between LANs and WANs.', 33, 0, 0),
(169, 'Discuss the architectural issues involved in the design of a layered network protocol.', 33, 0, 0),
(170, 'Explain how architectures differ in network and distributed systems.', 33, 0, 0),
(171, 'Appreciate the special requirements of wireless computing.', 33, 0, 0),
(172, 'Understand the difference between the roles of the physical layer and data link layer and appreciate how imperfections in the physical layer are handled by the data link layer.', 33, 0, 0),
(173, 'Describe emerging technologies in the net-centric computing area and assess their current capabilities, limitations, and near-term potential.', 33, 0, 0),
(174, 'Understand how the network layer can detect and correct errors.', 33, 0, 0),
(175, 'Understand how analog quantities such as pressure can be represented in digital form and how the use of a finite representation leads to quantization errors.', 34, 0, 0),
(176, 'Appreciate the need for multimedia standards and be able to explain in non-technical language what the standard calls for.', 34, 0, 0),
(177, 'Understand how multimedia signals usually have to be compressed to conserve bandwidths using lossless or lossy encoding.', 34, 0, 0),
(178, 'Discuss the design, construction, and operating principles of transducers such as Hall-effect devices and strain gauges', 34, 0, 0),
(179, 'Appreciate how typical input devices operate.', 34, 0, 0),
(180, 'Understand the principles of operation and performance of various display devices.', 34, 0, 0),
(181, 'Study the operation of high-performance computer-based devices such as digital cameras', 34, 0, 0),
(182, 'To appreciate the underlying physical basic of modern computing.', 35, 0, 0),
(183, 'Understand how the physical properties of matter impose limitations on computer technology', 35, 0, 0),
(184, 'Appreciate how the quantum nature of matter can be exploited to permit massive parallelism', 35, 0, 0),
(185, 'Appreciate how light can be used to perform certain types of computation', 35, 0, 0),
(186, 'Understand how the properties of complex molecules can be exploited by organic computers', 35, 0, 0),
(187, 'To get an insight into trends in memory design such as ovonic memory and ferromagnetic memories', 35, 0, 0),
(188, 'Explain the objectives and functions of modern operating systems.', 36, 0, 0),
(189, 'Describe how operating systems have evolved over time from primitive batch systems to sophisticated multiuser systems.', 36, 0, 0),
(190, 'Analyze the tradeoffs inherent in operating system design.', 36, 0, 0),
(191, 'Describe the functions of a contemporary operating system with respect to convenience, efficiency, and the ability to evolve.', 36, 0, 0),
(192, 'Discuss networked, client-server, distributed operating systems and how they differ from single user operating systems.', 36, 0, 0),
(193, 'Identify potential threats to operating systems and the security features design to guard against them.', 36, 0, 0),
(194, 'Describe how issues such as open source software and the increased use of the Internet are influencing operating system design.', 36, 0, 0),
(195, 'Explain the concept of a logical layer.', 37, 0, 0),
(196, 'Explain the benefits of building abstract layers in hierarchical fashion.', 37, 0, 0),
(197, 'Defend the need for APIs and middleware.', 37, 0, 0),
(198, 'Describe how computing resources are used by application software and managed by system software.', 37, 0, 0),
(199, 'Contrast kernel and user mode in an operating system.', 37, 0, 0),
(200, 'Discuss the advantages and disadvantages of using interrupt processing.', 37, 0, 0),
(201, 'Compare and contrast the various ways of structuring an operating system such as object-oriented, modular, micro-kernel, and layered.', 37, 0, 0),
(202, 'Explain the use of a device list and driver I/O queue.', 37, 0, 0),
(203, 'Describe the need for concurrency within the framework of an operating system.', 38, 0, 0),
(204, 'Demonstrate the potential run-time problems arising from the concurrent operation of many separate tasks.', 38, 0, 0),
(205, 'Summarize the range of mechanisms that can be employed at the operating system level to realize concurrent systems and describe the benefits of each.', 38, 0, 0),
(206, 'Explain the different states that a task may pass through and the data structures needed to support the management of many tasks.', 38, 0, 0),
(207, 'Summarize the various approaches to solving the problem of mutual exclusion in an operating system.', 38, 0, 0),
(208, 'Describe reasons for using interrupts, dispatching, and context switching to support concurrency in an operating system.', 38, 0, 0),
(209, 'Create state and transition diagrams for simple problem domains.', 38, 0, 0),
(210, 'Discuss the utility of data structures, such as stacks and queues, in managing concurrency.', 38, 0, 0),
(211, 'Explain conditions that lead to deadlock.', 38, 0, 0),
(212, 'Compare and contrast the common algorithms used for both preemptive and non-preemptive scheduling of tasks in operating systems, such as priority, performance comparison, and fair-share schemes.', 39, 0, 0),
(213, 'Describe relationships between scheduling algorithms and application domains.', 39, 0, 0),
(214, 'Discuss the types of processor scheduling such as short-term, medium-term, long-term, and I/O.', 39, 0, 0),
(215, 'Describe the difference between processes and threads.', 39, 0, 0),
(216, 'Compare and contrast static and dynamic approaches to real-time scheduling.', 39, 0, 0),
(217, 'Discuss the need for preemption and deadline scheduling.', 39, 0, 0),
(218, 'Identify ways that the logic embodied in scheduling algorithms are applicable to other domains, such as disk', 39, 0, 0),
(219, 'I/O, network scheduling, project scheduling, and other problems unrelated to computing.', 39, 0, 0),
(220, 'Explain memory hierarchy and cost-performance trade-offs.', 40, 0, 0),
(221, 'Explain the concept of virtual memory and how it is realized in hardware and software.', 40, 0, 0),
(222, 'Summarize the principles of virtual memory as applied to caching and paging.', 40, 0, 0),
(223, 'Evaluate the trade-offs in terms of memory size (main memory, cache memory, auxiliary memory) and processor speed.', 40, 0, 0),
(224, 'Defend the different ways of allocating memory to tasks, citing the relative merits of each.', 40, 0, 0),
(225, 'Describe the reason for and use of cache memory.', 40, 0, 0),
(226, 'Discuss the concept of thrashing, both in terms of the reasons it occurs and the techniques used to recognize and manage the problem.', 40, 0, 0),
(227, 'Explain the key difference between serial and parallel devices and identify the conditions in which each is appropriate.', 41, 0, 0),
(228, 'Identify the relationship between the physical hardware and the virtual devices maintained by the operating system.', 41, 0, 0),
(229, 'Explain buffering and describe strategies for implementing it.', 41, 0, 0),
(230, 'Differentiate the mechanisms used in interfacing a range of devices (including hand-held devices, networks, multimedia) to a computer and explain the implications of these for the design of an operating system.', 41, 0, 0),
(231, 'Describe the advantages and disadvantages of direct memory access and discuss the circumstances in which its use is warranted.', 41, 0, 0),
(232, 'Identify the requirements for failure recovery.', 41, 0, 0),
(233, 'Implement a simple device driver for a range of possible devices.', 41, 0, 0),
(234, 'Defend the need for protection and security, and the role of ethical considerations in computer use.', 42, 0, 0),
(235, 'Summarize the features and limitations of an operating system used to provide protection and security.', 42, 0, 0),
(236, 'Explain the mechanisms available in an OS to control access to resources.', 42, 0, 0),
(237, 'Carry out simple sysadmin tasks according to a security policy, for example creating accounts, setting permissions, applying patches, and arranging for regular backups.', 42, 0, 0),
(238, 'Summarize the full range of considerations that support file systems.', 43, 0, 0),
(239, 'Compare and contrast different approaches to file organization, recognizing the strengths and weaknesses of each.', 43, 0, 0),
(240, 'Summarize how hardware developments have lead to changes in our priorities for the design and the management of file systems.', 43, 0, 0),
(241, 'Describe what makes a system a real-time system.', 44, 0, 0),
(242, 'Explain the presence of and describe the characteristics of latency in real-time systems.', 44, 0, 0),
(243, 'Summarize special concerns that real-time systems present and how these concerns are addressed.', 44, 0, 0),
(244, 'Explain the relevance of the terms fault tolerance, reliability, and availability.', 45, 0, 0),
(245, 'Outline the range of methods for implementing fault tolerance in an operating system.', 45, 0, 0),
(246, 'Explain how an operating system can continue functioning after a fault occurs.', 45, 0, 0),
(247, 'Describe the performance measurements used to determine how a system performs.', 46, 0, 0),
(248, 'Explain the main evaluation models used to evaluate a system.', 46, 0, 0),
(249, 'Summarize a typical set of system commands provided by an operating system.', 47, 0, 0),
(250, 'Demonstrate the typical functionality of a scripting language, and interpret the implications for programming.', 47, 0, 0),
(251, 'Demonstrate the mechanisms for implementing scripts and the role of scripts on system implementation and integration.', 47, 0, 0),
(252, 'Implement a simple script that exhibits parameter passing.', 47, 0, 0),
(253, 'To explain the problems addressed by digital forensics and to outline the basic principles involved in its practice', 48, 0, 0),
(254, 'To outline the basic processes of information gathering and analysis in line with best practices in digital forensics', 48, 0, 0),
(255, 'To recognize the role that tools can play in digital forensics and to demonstrate their use in simple examples the use of tools and to demonstrate their use', 48, 0, 0),
(256, 'To explain what questions must be asked and answered to determine if the interpretation of forensic evidence is valid or questionable.', 48, 0, 0),
(257, 'Compare and contrast current methods for implementing security.', 49, 0, 0),
(258, 'Compare and contrast the strengths and weaknesses of two or more currently popular operating systems with respect to security.', 49, 0, 0),
(259, 'Compare and contrast the security strengths and weaknesses of two or more currently popular operating systems with respect to recovery management.', 49, 0, 0),
(260, 'Describe the access control matrix and how it relates to ACLs and C-Lists', 49, 0, 0),
(261, 'Apply Biba''s model to the checking of inputs in a program (tainted v. untainted, for example)', 49, 0, 0),
(262, 'Describe how the Bell-LaPadula model combines mandatory and discretionary access control mechanisms, and explain the lattice formulation of Bell-LaPadula and Biba', 49, 0, 0),
(263, 'Compare and contrast two security models', 49, 0, 0),
(264, 'Relate particular security models to the models of the software life cycle', 49, 0, 0),
(265, 'Apply particular models to different environments and select the model that best captures the environment', 49, 0, 0),
(266, 'Discuss the evolution of early networks and the Internet.', 50, 0, 0),
(267, 'Demonstrate the ability to use effectively a range of common networked applications including e-mail, telnet,', 50, 0, 0),
(268, 'FTP, wikis, and web browsers, online web courses, and instant messaging.', 50, 0, 0),
(269, 'Explain the hierarchical, layered structure of a typical network architecture.', 50, 0, 0),
(270, 'Describe emerging technologies in the net-centric computing area and assess their current capabilities, limitations, and near-term potential.', 50, 0, 0),
(271, 'Discuss important network standards in their historical context.', 51, 0, 0),
(272, 'Describe the responsibilities of the first (lowest) four layers of the ISO reference model.', 51, 0, 0),
(273, 'Explain how a network can detect and correct transmission errors.', 51, 0, 0),
(274, 'Explain how a packet is routed over the Internet.', 51, 0, 0),
(275, 'Install a simple network with two clients and a single server using standard host configuration software tools such as DHCP.', 51, 0, 0),
(276, 'Describe the enhancements made to IPv4 by IPSec', 52, 0, 0),
(277, 'Identify protocols used to enhance Internet communication, and choose the appropriate protocol for a particular case.', 52, 0, 0),
(278, 'Understand Intrusions and intrusion detection', 52, 0, 0),
(279, 'Discuss the fundamental ideas of public-key cryptography.', 52, 0, 0),
(280, 'Describe how public-key cryptography works.', 52, 0, 0),
(281, 'Distinguish between the use of private- and public-key algorithms.', 52, 0, 0),
(282, 'Summarize common authentication protocols.', 52, 0, 0),
(283, 'Generate and distribute a PGP key pair and use the PGP package to send an encrypted e-mail message.', 52, 0, 0),
(284, 'Summarize the capabilities and limitations of the means of cryptography that are conveniently available to the general public.', 52, 0, 0),
(285, 'Describe and discuss recent successful security attacks.', 52, 0, 0),
(286, 'Summarize the strengths and weaknesses associated with different approaches to security.', 52, 0, 0),
(287, 'Explain the different roles and responsibilities of clients and servers for a range of possible applications.', 53, 0, 0),
(288, 'Select a range of tools that will ensure an efficient approach to implementing various client-server possibilities.', 53, 0, 0),
(289, 'Design and build a simple interactive web-based application (e.g., a simple web form that collects information from the client and stores it in a file on the server, and a server process to respond to the form data and produce a result).', 53, 0, 0),
(290, 'Illustrate how interactive client-server web applications of medium size can be built using different types of Web technologies.', 54, 0, 0),
(291, 'Demonstrate how to implement a database-driven web site, explaining the relevant technologies involved in each tier of the architecture and the accompanying performance tradeoffs.', 54, 0, 0),
(292, 'Illustrate the current status of Web search effectiveness.', 54, 0, 0),
(293, 'Implement an application that invokes the API of a web-based application.', 54, 0, 0),
(294, 'Implement a distributed system using any two distributed object frameworks and compare them with regard to performance and security issues.', 54, 0, 0),
(295, 'Discuss security issues and strategies in an enterprise-wide web-based application.', 54, 0, 0),
(296, 'Explain the issues for network management arising from a range of security threats, including viruses, worms,', 55, 0, 0),
(297, 'Trojan horses, and denial-of-service attacks', 55, 0, 0),
(298, 'Develop a strategy for ensuring appropriate levels of security in a system designed for a particular purpose.', 55, 0, 0),
(299, 'Implement a network firewall.', 55, 0, 0),
(300, 'Summarize the basic characteristics of sampling and quantization for digital representation.', 56, 0, 0),
(301, 'Select, giving reasons that are sensitive to the specific application and particular circumstances, the most appropriate compression techniques for text, audio, image, and video information.', 56, 0, 0),
(302, 'Explain the asymmetric property of compression and decompression algorithms.', 56, 0, 0),
(303, 'Illustrate the concept of run-length encoding.', 56, 0, 0),
(304, 'Illustrate how a program like the UNIX compress utility, which uses Huffman coding and the Ziv-Lempel algorithm, would compress a typical text file.', 56, 0, 0),
(305, 'For each of several media or multimedia standards, describe in non-technical language what the standard calls for, and explain how aspects of human perception might be sensitive to the limitations of that standard.', 57, 0, 0),
(306, 'Evaluate the potential of a computer system to host one of a range of possible multimedia applications, including an assessment of the requirements of multimedia systems on the underlying networking technology.', 57, 0, 0),
(307, 'Describe the characteristics of a computer system (including identification of support tools and appropriate standards) that has to host the implementation of one of a range of possible multimedia applications.', 57, 0, 0),
(308, 'Implement a multimedia application of modest size.', 57, 0, 0),
(309, 'Describe the main characteristics of mobile IP and explain how differs from IP with regard to mobility management and location management as well as performance.', 58, 0, 0),
(310, 'Illustrate (with home agents and foreign agents) how e-mail and other traffic is routed using mobile IP.', 58, 0, 0),
(311, 'Implement a simple application that relies on mobile and wireless data communications.', 58, 0, 0),
(312, 'Describe areas of current and emerging interest in wireless and mobile computing, and assess the current capabilities, limitations, and near-term potential of each.', 58, 0, 0),
(313, 'Summarize the evolution of programming languages illustrating how this history has led to the paradigms available today.', 59, 0, 0),
(314, 'Identify at least one distinguishing characteristic for each of the programming paradigms covered in this unit.', 59, 0, 0),
(315, 'Evaluate the tradeoffs between the different paradigms, considering such issues as space efficiency, time efficiency (of both the computer and the programmer), safety, and power of expression.', 59, 0, 0),
(316, 'Distinguish between programming-in-the-small and programming-in-the-large.', 59, 0, 0),
(317, 'Describe the importance and power of abstraction in the context of virtual machines.', 60, 0, 0),
(318, 'Explain the benefits of intermediate languages in the compilation process.', 60, 0, 0),
(319, 'Evaluate the tradeoffs in performance vs. portability.', 60, 0, 0),
(320, 'Explain how executable programs can breach computer system security by accessing disk files and memory.', 60, 0, 0),
(321, 'Compare and contrast compiled and interpreted execution models, outlining the relative merits of each.', 61, 0, 0),
(322, 'Describe the phases of program translation from source code to executable code and the files produced by these phases.', 61, 0, 0),
(323, 'Explain the differences between machine-dependent and machine-independent translation and where these differences are evident in the translation process.', 61, 0, 0),
(324, 'Explain the value of declaration models, especially with respect to programming-in-the-large.', 62, 0, 0),
(325, 'Identify and describe the properties of a variable such as its associated address, value, scope, persistence, and size.', 62, 0, 0),
(326, 'Discuss type incompatibility.', 62, 0, 0),
(327, 'Demonstrate different forms of binding, visibility, scoping, and lifetime management.', 62, 0, 0),
(328, 'Defend the importance of types and type-checking in providing abstraction and safety.', 62, 0, 0),
(329, 'Evaluate tradeoffs in lifetime management (reference counting vs. garbage collection).', 62, 0, 0),
(330, 'Explain how abstraction mechanisms support the creation of reusable software components.', 63, 0, 0),
(331, 'Demonstrate the difference between call-by-value and call-by-reference parameter passing.', 63, 0, 0),
(332, 'Defend the importance of abstractions, especially with respect to programming-in-the-large.', 63, 0, 0),
(333, 'Describe how the computer system uses activation records to manage program modules and their data.', 63, 0, 0),
(334, 'Justify the philosophy of object-oriented design and the concepts of encapsulation, abstraction, inheritance, and polymorphism.', 64, 0, 0),
(335, 'Design, implement, test, and debug simple programs in an object-oriented programming language.', 64, 0, 0),
(336, 'Describe how the class mechanism supports encapsulation and information hiding.', 64, 0, 0),
(337, 'Design, implement, and test the implementation of "is-a" relationships among objects using a class hierarchy and inheritance.', 64, 0, 0),
(338, 'Compare and contrast the notions of overloading and overriding methods in an object-oriented language.', 64, 0, 0),
(339, 'Explain the relationship between the static structure of the class and the dynamic structure of the instances of the class.', 64, 0, 0),
(340, 'Describe how iterators access the elements of a container.', 64, 0, 0),
(341, 'Outline the strengths and weaknesses of the functional programming paradigm.', 65, 0, 0),
(342, 'Design, code, test, and debug programs using the functional paradigm.', 65, 0, 0),
(343, 'Explain the use of functions as data, including the concept of closures.', 65, 0, 0),
(344, 'Describe the steps and algorithms used by language translators.', 66, 0, 0),
(345, 'Recognize the underlying formal models such as finite state automata, push-down automata and their connection to language definition through regular expressions and grammars.', 66, 0, 0),
(346, 'Discuss the effectiveness of optimization.', 66, 0, 0),
(347, 'Explain the impact of a separate compilation facility and the existence of program libraries on the compilation process.', 66, 0, 0),
(348, 'Formalize the notion of typing.', 67, 0, 0),
(349, 'Describe each of the elementary data types.', 67, 0, 0),
(350, 'Explain the concept of an abstract data type.', 67, 0, 0),
(351, 'Recognize the importance of typing for abstraction and safety.', 67, 0, 0),
(352, 'Differentiate between static and dynamic typing.', 67, 0, 0),
(353, 'Differentiate between type declarations and type inference.', 67, 0, 0),
(354, 'Evaluate languages with regard to typing.', 67, 0, 0),
(355, 'Explain the importance of formal semantics.', 68, 0, 0),
(356, 'Differentiate between formal and informal semantics.', 68, 0, 0),
(357, 'Describe the different approaches to formal semantics.', 68, 0, 0),
(358, 'Evaluate the different approaches to formal semantics.', 68, 0, 0),
(359, 'Evaluate the impact of different typing regimes on language design, language usage, and the translation process.', 69, 0, 0),
(360, 'Explain the role of different abstraction mechanisms in the creation of user-defined facilities', 69, 0, 0),
(361, 'Discuss why user-centered product development is important.', 70, 0, 0),
(362, 'Explain why both individual human models and social models are important to consider in design of humancomputer interaction.', 70, 0, 0),
(363, 'Define a user-centered design process that explicitly recognizes that the user is not like the developer or her acquaintances.', 70, 0, 0),
(364, 'Describe ways in which a user-centered design process may fail, including examples.', 70, 0, 0),
(365, 'Define different processes for defining interfaces for different contexts.', 70, 0, 0),
(366, 'Differentiate between the role of hypotheses and experimental results vs. correlations.', 70, 0, 0),
(367, 'Choose between qualitative and quantitative evaluation methods for a given evaluation question.', 70, 0, 0),
(368, 'Use vocabulary for analyzing human interaction with software: perceived affordance, conceptual model, mental', 70, 0, 0),
(369, 'model, metaphor, interaction design, feedback, and so forth.', 70, 0, 0),
(370, 'Provide examples of how different interpretations that a given icon, symbol, word, or color can have in (a) two different human cultures and (b) in a culture and one of its subcultures.', 70, 0, 0),
(371, 'Be able to describe at least one national or international user interface design standard', 70, 0, 0),
(372, 'Explain principles for design of user interfaces, such as learnability, flexibility, and robustness.', 71, 0, 0),
(373, 'Describe examples of bad navigation, bad screen layout, and incomprehensible interface design.', 71, 0, 0),
(374, 'Create a simple application that supports a graphical user interface, for either the Web or a windowing system.', 71, 0, 0),
(375, 'Observe a user attempting to use the application and have the user critique the application.', 71, 0, 0),
(376, 'Explain how careful user evaluation goes beyond the simple observation of a single user.', 71, 0, 0),
(377, 'Discuss evaluation criteria: task time/completion, time to learn, retention, errors, and user satisfaction.', 72, 0, 0),
(378, 'Conduct a walkthrough, expert-based analysis, and a Keystroke Level Model (KLM) analysis.', 72, 0, 0),
(379, 'Compare a given user interface to a set of guidelines or standards to identify inadequacies.', 72, 0, 0),
(380, 'Conduct a usability test with more than one user, gathering results using at least two different methods.', 72, 0, 0),
(381, 'Compare a laboratory test to a field test.', 72, 0, 0),
(382, 'Explain a usability problem that is supported by results from a usability test. Recommend a solution to the usability problem.', 72, 0, 0),
(383, 'Critique a user evaluation, to point out threats to validity.', 72, 0, 0),
(384, 'Given an evaluation context (e.g. amount of time, availability of test users, place in the design process, evaluation goals), recommend and justify an evaluation method.', 72, 0, 0),
(385, 'Compare user-centered development to traditional software engineering methods.', 73, 0, 0),
(386, 'Gather requirements for a user interface, using both task analysis and interview with a user.', 73, 0, 0),
(387, 'Identify from requirements analysis at least three functional requirements and at least three usability requirements.', 73, 0, 0),
(388, 'Create a specification for a user interface based on requirements.', 73, 0, 0),
(389, 'Create two different prototypes at different levels of specificity from the specification.', 73, 0, 0),
(390, 'Implement the prototype using some GUI toolkit.', 73, 0, 0),
(391, 'Summarize common interaction styles.', 74, 0, 0),
(392, 'Explain good design principles of each of the following: common widgets; sequenced screen presentations; simple error-trap dialog; a user manual.', 74, 0, 0),
(393, 'Design, prototype, and evaluate a simple GUI illustrating knowledge of the concepts taught in HC3 and HC4.', 74, 0, 0),
(394, 'Identify the challenges that exist in moving from to interaction.', 74, 0, 0),
(395, 'Identify the challenges that exist in moving from desktop or laptop screen to a mobile device.', 74, 0, 0),
(396, 'Differentiate between the responsibilities of the UIMS and the application.', 75, 0, 0),
(397, 'Differentiate between kernel-based and client-server models for the UI.', 75, 0, 0),
(398, 'Compare the event-driven paradigm with more traditional procedural control for the UI.', 75, 0, 0),
(399, 'Describe aggregation of widgets and constraint-based geometry management.', 75, 0, 0),
(400, 'Explain callbacks and their role in GUI builders.', 75, 0, 0),
(401, 'Identify at least three differences common in cross-platform (e.g., desktop, Web, and cell phone) UI design.', 75, 0, 0),
(402, 'Identify as many commonalities as you can that are found in UIs across different platforms.', 75, 0, 0),
(403, 'Discuss how information retrieval differs from transaction processing.', 76, 0, 0),
(404, 'Explain how the organization of information supports retrieval.', 76, 0, 0),
(405, 'Describe the major usability problems with database query languages.', 76, 0, 0),
(406, 'Explain the current state of speech recognition technology in particular and natural language processing in general.', 76, 0, 0),
(407, 'Design, prototype, and evaluate a simple Multimedia Information System illustrating knowledge of the concepts taught in HCHCand HC7.', 76, 0, 0),
(408, 'Compare the HCI issues in individual interaction with group interaction.', 77, 0, 0),
(409, 'Discuss several issues of social concern raised by collaborative software.', 77, 0, 0),
(410, 'Discuss the HCI issues in software that embodies human intention.', 77, 0, 0),
(411, 'Describe the difference between synchronous and asynchronous communication.', 77, 0, 0),
(412, 'Design, prototype, and evaluate a simple groupware or group communication application illustrating knowledge of the concepts taught in HCHCand HC8.', 77, 0, 0),
(413, 'Participate in a team project for which some interaction is face-to-face and other interaction occurs via a mediating software environment.', 77, 0, 0),
(414, 'Describe the similarities and differences between face-to-face and software-mediated collaboration.', 77, 0, 0),
(415, 'Compare the methodological and philosophical issues involved with designing for usability and designing for engagement.', 78, 0, 0),
(416, 'Discuss several issues of social and ethical concern raised by immersive environments and high levels of emotion in HCI.', 78, 0, 0),
(417, 'Discuss the HCI issues involved in interactive software that embodies a level of intelligence.', 78, 0, 0),
(418, 'Describe the difference between interaction design and traditional HCI.', 78, 0, 0),
(419, 'Design, prototype, and evaluate an engaging interactive system for entertainment or education.', 78, 0, 0),
(420, 'Evaluate the experiences or people in immersive environments.', 78, 0, 0),
(421, 'Describe the issues involved with tangible user interfaces, gesture and full body interaction.', 78, 0, 0),
(422, 'Describe the issues involved with engaging all the senses in interactive experiences.', 78, 0, 0),
(423, 'To explain the concept of phishing, and how to recognize it', 79, 0, 0),
(424, 'To explain the concept of identity theft is and how to hinder it', 79, 0, 0),
(425, 'To design a user interface for a security mechanism', 79, 0, 0),
(426, 'To discuss procedures that counter a social engineering attack', 79, 0, 0),
(427, 'To analyze a security policy and/or procedures to show where they meet, or fail to meet, usability considerations', 79, 0, 0),
(428, 'Distinguish the capabilities of different levels of graphics software and describe the appropriateness of each.', 80, 0, 0),
(429, 'Create images using a standard graphics API.', 80, 0, 0),
(430, 'Use the facilities provided by a standard API to express basic transformations such as scaling, rotation, and translation.', 80, 0, 0),
(431, 'Implement simple procedures that perform transformation and clipping operations on a simple 2-dimensional image.', 80, 0, 0),
(432, 'Discuss the 3-dimensional coordinate system and the changes required to extend transformation operations to handle transformations in 3D', 80, 0, 0),
(433, 'Describe the appropriateness of graphics architectures for given applications.', 81, 0, 0),
(434, 'Explain the function of various input devices.', 81, 0, 0),
(435, 'Compare and contrast the techniques of raster graphics and vector graphics.', 81, 0, 0),
(436, 'Use current hardware and software for creating and displaying graphics.', 81, 0, 0),
(437, 'Discuss the expanded capabilities of emerging hardware and software for creating and displaying graphics.', 81, 0, 0),
(438, 'Create simple polyhedral models by surface tessellation.', 83, 0, 0),
(439, 'Construct CSG models from simple primitives, such as cubes and quadric surfaces.', 83, 0, 0),
(440, 'Generate a mesh representation from an implicit surface.', 83, 0, 0),
(441, 'Generate a fractal model or terrain using a procedural method.', 83, 0, 0),
(442, 'Generate a mesh from data points acquired with a laser scanner.', 83, 0, 0),
(443, 'Explain the operation of the Bresenham algorithm for rendering a line on a pixel-based display.', 84, 0, 0),
(444, 'Explain the concept and applications of each of these techniques.', 84, 0, 0),
(445, 'Demonstrate each of these techniques by creating an image using a standard API.', 84, 0, 0),
(446, 'Describe how a graphic image has been created.', 84, 0, 0),
(447, 'Describe several transport equations in detail, noting all comprehensive effects.', 85, 0, 0),
(448, 'Describe efficient algorithms to compute radiosity and explain the tradeoffs of accuracy and algorithmic performance.', 85, 0, 0),
(449, 'Describe the impact of meshing schemes.', 85, 0, 0),
(450, 'Explain image-based rendering techniques, light fields, and associated topics.', 85, 0, 0),
(451, 'Describe the techniques identified in this section.', 86, 0, 0),
(452, 'Explain how to recognize the graphics techniques used to create a particular image.', 86, 0, 0),
(453, 'Implement any of the specified graphics techniques using a primitive graphics system at the individual pixel level.', 86, 0, 0),
(454, 'Use common animation software to construct simple organic forms using metaball and skeleton.', 86, 0, 0);
INSERT INTO `learning_objectives` (`id`, `description`, `unit_id`, `topic_type_id`, `mastery_level_id`) VALUES
(455, 'Explain the spline interpolation method for producing in-between positions and orientations.', 87, 0, 0),
(456, 'Compare and contrast several technologies for motion capture.', 87, 0, 0),
(457, 'Use the particle function in common animation software to generate a simple animation, such as fireworks.', 87, 0, 0),
(458, 'Use free-form deformation techniques to create various deformations.', 87, 0, 0),
(459, 'Describe the basic algorithms behind scalar and vector visualization.', 88, 0, 0),
(460, 'Describe the tradeoffs of the algorithms in terms of accuracy and performance.', 88, 0, 0),
(461, 'Employ suitable theory from signal processing and numerical analysis to explain the effects of visualization operations.', 88, 0, 0),
(462, 'Describe the impact of presentation and user interaction on exploration.', 88, 0, 0),
(463, 'Describe the optical model realized by a computer graphics system to synthesize stereoscopic view.', 89, 0, 0),
(464, 'Describe the principles of different viewer tracking technologies.', 89, 0, 0),
(465, 'Explain the principles of efficient collision detection algorithms for convex polyhedra.', 89, 0, 0),
(466, 'Describe the differences between geometry- and image-based virtual reality.', 89, 0, 0),
(467, 'Describe the issues of user action synchronization and data consistency in a networked environment.', 89, 0, 0),
(468, 'Determine the basic requirements on interface, hardware, and software configurations of a VR system for a specified application.', 89, 0, 0),
(469, 'Explain the image formation process.', 90, 0, 0),
(470, 'Explain the advantages of two and more cameras, stereo vision.', 90, 0, 0),
(471, 'Explain various segmentation approaches, along with their characteristics, differences, strengths, and weaknesses.', 90, 0, 0),
(472, 'Describe object recognition based on contour- and region-based shape representations.', 90, 0, 0),
(473, 'Explain differential motion analysis methods.', 90, 0, 0),
(474, 'Describe the differences in object tracking methods.', 90, 0, 0),
(475, 'Be aware of algorithms for certaoin geometric tasks', 91, 0, 0),
(476, 'Be able to select algorithms appropriate to particular situations', 91, 0, 0),
(477, 'To be aware of the range of possibilities for games engines, including their potential and their limitations', 92, 0, 0),
(478, 'To use a games engine to construct a simple game', 92, 0, 0),
(479, 'Describe the Turing test and the “Chinese Room” thought experiment.', 93, 0, 0),
(480, 'Differentiate the concepts of optimal reasoning and human-like reasoning.', 93, 0, 0),
(481, 'Differentiate the concepts of optimal behavior and human-like behavior.', 93, 0, 0),
(482, 'List examples of intelligent systems that depend on models of the world.', 93, 0, 0),
(483, 'Describe the role of heuristics and the need for tradeoffs between optimality and efficiency.', 93, 0, 0),
(484, 'Formulate an efficient problem space for a problem expressed in English by expressing that problem space in terms of states, operators, an initial state, and a description of a goal state.', 94, 0, 0),
(485, 'Describe the problem of combinatorial explosion and its consequences.', 94, 0, 0),
(486, 'Select an appropriate brute-force search algorithm for a problem, implement it, and characterize its time and space complexities.', 94, 0, 0),
(487, 'Select an appropriate heuristic search algorithm for a problem and implement it by designing the necessary heuristic evaluation function.', 94, 0, 0),
(488, 'Describe under what conditions heuristic algorithms guarantee optimal solution.', 94, 0, 0),
(489, 'Implement minimax search with alpha-beta pruning for some two-player game.', 94, 0, 0),
(490, 'Formulate a problem specified in English as a constraint-satisfaction problem and implement it using a chronological backtracking algorithm.', 94, 0, 0),
(491, 'Explain the operation of the resolution technique for theorem proving.', 95, 0, 0),
(492, 'Explain the distinction between monotonic and non-monotonic inference.', 95, 0, 0),
(493, 'Discuss the advantages and shortcomings of probabilistic reasoning.', 95, 0, 0),
(494, 'Apply Bayes theorem to determine conditional probabilities.', 95, 0, 0),
(495, 'Explain what genetic algorithms are and constrastcontrast their effectiveness with the classic problem-solving and search techniques.', 96, 0, 0),
(496, 'Explain how simulated annealing can be used to reduce search complexity and contrast its operation with classic search techniques.', 96, 0, 0),
(497, 'Apply local search techniques to a classic domain.', 96, 0, 0),
(498, 'Compare and contrast the most common models used for structured knowledge representation, highlighting their strengths and weaknesses.', 97, 0, 0),
(499, 'Characterize the components of nonmonotonic reasoning and its usefulness as a representational mechanisms for belief systems.', 97, 0, 0),
(500, 'Apply situation and event calculus to problems of action and change.', 97, 0, 0),
(501, 'Articulate the distinction between temporal and spatial reasoning, explaining how they interrelate.', 97, 0, 0),
(502, 'Describe and contrast the basic techniques for representing uncertainty.', 97, 0, 0),
(503, 'Describe and contrast the basic techniques for diagnosis and qualitative representation.', 97, 0, 0),
(504, 'Explain how an agent differs from other categories of intelligent systems.', 98, 0, 0),
(505, 'Characterize and contrast the standard agent architectures.', 98, 0, 0),
(506, 'Describe the applications of agent theory, to domains such as software agents, personal assistants, and believable agents.', 98, 0, 0),
(507, 'Describe the distinction between agents that learn and those that don’t.', 98, 0, 0),
(508, 'Demonstrate using appropriate examples how multi-agent systems support agent interaction.', 98, 0, 0),
(509, 'Describe and contrast robotic and mobile agents.', 98, 0, 0),
(510, 'Define and contrast deterministic and stochastic grammars, providing examples to show the adequacy of each.', 99, 0, 0),
(511, 'Identify the classic parsing algorithms for parsing natural language.', 99, 0, 0),
(512, 'Defend the need for an established corpus.', 99, 0, 0),
(513, 'Give examples of catalog and look up procedures in a corpus-based approach.', 99, 0, 0),
(514, 'Articulate the distinction between techniques for information retrieval, language translation, and speech recognition.', 99, 0, 0),
(515, 'Explain the differences among the three main styles of learning: supervised, reinforcement, and unsupervised.', 100, 0, 0),
(516, 'Implement simple algorithms for supervised learning, reinforcement learning, and unsupervised learning.', 100, 0, 0),
(517, 'Determine which of the three learning styles is appropriate to a particular problem domain.', 100, 0, 0),
(518, 'Compare and contrast each of the following techniques, providing examples of when each strategy is superior:', 100, 0, 0),
(519, 'decision trees, neural networks, and belief networks..', 100, 0, 0),
(520, 'Implement a simple learning system using decision trees, neural networks and/or belief networks, as appropriate.', 100, 0, 0),
(521, 'Characterize the state of the art in learning theory, including its achievements and its shortcomings.', 100, 0, 0),
(522, 'Explain the nearest neighbor algorithm and its place within learning theory.', 100, 0, 0),
(523, 'Explain the problem of overfitting, along with techniques for detecting and managing the problem.', 100, 0, 0),
(524, 'Define the concept of a planning system.', 101, 0, 0),
(525, 'Explain how planning systems differ from classical search techniques.', 101, 0, 0),
(526, 'Articulate the differences between planning as search, operator-based planning, and propositional planning,', 101, 0, 0),
(527, 'providing examples of domains where each is most applicable.', 101, 0, 0),
(528, 'Define and provide examples for each of the following techniques: case-based, learning, and probabilistic planning.', 101, 0, 0),
(529, 'Compare and contrast static world planning systems with those need dynamic execution.', 101, 0, 0),
(530, 'Explain the impact of dynamic planning on robotics.', 101, 0, 0),
(531, 'Outline the potential and limitations of today’s state-of-the-art robot systems.', 102, 0, 0),
(532, 'Implement configuration space algorithms for a robot and complex polygons.', 102, 0, 0),
(533, 'Implement simple motion planning algorithms.', 102, 0, 0),
(534, 'Explain the uncertainties associated with sensors and how to deal with those uncertainties.', 102, 0, 0),
(535, 'Design a simple control architecture.', 102, 0, 0),
(536, 'Describe various strategies for navigation in unknown environments, including the strengths and shortcomings of each.', 102, 0, 0),
(537, 'Describe various strategies for navigation with the aid of landmarks, including the strengths and shortcomings of each.', 102, 0, 0),
(538, 'Describe the importance of image and object recognition in Ai and indicate significant applications of thistechnology.', 103, 0, 0),
(539, 'Outline the main approaches to object recognition', 103, 0, 0),
(540, 'Describe the distinguishing characteristics of the technologies used for perception.', 103, 0, 0),
(541, 'Compare and contrast information with data and knowledge.', 104, 0, 0),
(542, 'Critique/defend a small- to medium-size information application with regard to its satisfying real user information needs.', 104, 0, 0),
(543, 'Show uses of explicitly stored metadata/schema associated with data', 104, 0, 0),
(544, 'Explain uses of declarative queries', 104, 0, 0),
(545, 'Give a declarative version for a navigational query', 104, 0, 0),
(546, 'Describe several technical solutions to the problems related to information privacy, integrity, security, and preservation.', 104, 0, 0),
(547, 'Explain measures of efficiency (throughput, response time) and effectiveness (recall, precision).', 104, 0, 0),
(548, 'Describe approaches to ensure that information systems can scale from the individual to the global.', 104, 0, 0),
(549, 'Identify issues of data persistence to an organization.', 104, 0, 0),
(550, 'Describe vulnerabilities to data integrity in specific scenarios.', 104, 0, 0),
(551, 'Explain the characteristics that distinguish the database approach from the traditional approach of programming with data files.', 105, 0, 0),
(552, 'Cite the basic goals, functions, models, components, applications, and social impact of database systems.', 105, 0, 0),
(553, 'Describe the components of a database system and give examples of their use.', 105, 0, 0),
(554, 'Identify major DBMS functions and describe their role in a database system.', 105, 0, 0),
(555, 'Explain the concept of data independence and its importance in a database system.', 105, 0, 0),
(556, 'Use a declarative query language to elicit information from a database.', 105, 0, 0),
(557, 'Categorize data models based on the types of concepts that they provide to describe the database structure—that is, conceptual data model, physical data model, and representational data model.', 106, 0, 0),
(558, 'Describe the modeling concepts and notation of the entity-relationship model and UML, including their use in data modeling.', 106, 0, 0),
(559, 'Describe the main concepts of the OO model such as object identity, type constructors, encapsulation, inheritance, polymorphism, and versioning.', 106, 0, 0),
(560, 'Define the fundamental terminology used in the relational data model .', 106, 0, 0),
(561, 'Describe the basic principles of the relational data model.', 106, 0, 0),
(562, 'Illustrate the modeling concepts and notation of the relational data model.', 106, 0, 0),
(563, 'Describe the differences between relational and semistructured data models', 106, 0, 0),
(564, 'Give a semistructured equivalent (eg in DTD or XMLSchema) for a given relational schema', 106, 0, 0),
(565, 'Generate an index file for a collection of resources.', 107, 0, 0),
(566, 'Explain the role of an inverted index in locating a document in a collection', 107, 0, 0),
(567, 'Explain how stemming and stop words affect indexing', 107, 0, 0),
(568, 'Identify appropriate indices for given relational schema and query set', 107, 0, 0),
(569, 'Estimate time to retrieve information, when indices are used compared to when they are not used.', 107, 0, 0),
(570, 'Prepare a relational schema from a conceptual model developed using the entity- relationship model', 108, 0, 0),
(571, 'Explain and demonstrate the concepts of entity integrity constraint and referential integrity constraint (including definition of the concept of a foreign key).', 108, 0, 0),
(572, 'Demonstrate use of the relational algebra operations from mathematical set theory (union, intersection, difference, and cartesian product) and the relational algebra operations developed specifically for relational databases (select (restrict), proje', 108, 0, 0),
(573, 'Demonstrate queries in the relational algebra.', 108, 0, 0),
(574, 'Demonstrate queries in the tuple relational calculus.', 108, 0, 0),
(575, 'Create a relational database schema in SQL that incorporates key, entity integrity, and referential integrity constraints.', 109, 0, 0),
(576, 'Demonstrate data definition in SQL and retrieving information from a database using the SQL SELECT statement.', 109, 0, 0),
(577, 'Evaluate a set of query processing strategies and select the optimal strategy.', 109, 0, 0),
(578, 'Create a non-procedural query by filling in templates of relations to construct an example of the desired query result.', 109, 0, 0),
(579, 'Embed object-oriented queries into a stand-alone language such as C++ or Java (e.g., SELECT Col.Method() FROM Object).', 109, 0, 0),
(580, 'Write a stored procedure that deals with parameters and has some control flow, to provide a given functionality', 109, 0, 0),
(581, 'Determine the functional dependency between two or more attributes that are a subset of a relation.', 110, 0, 0),
(582, 'Connect constraints expressed as primary key and foreign key, with functional dependencies', 110, 0, 0),
(583, 'Compute the closure of a set of attributes under given functional dependencies', 110, 0, 0),
(584, 'Determine whether or not a set of attributes form a superkey and/or candidate key for a relation with given functional dependencies', 110, 0, 0),
(585, 'Evaluate a proposed decomposition, to say whether or not it has lossless-join and dependency-preservation', 110, 0, 0),
(586, 'Describe what is meant by 1NF, 2NF, 3NF, and BCNF.', 110, 0, 0),
(587, 'Identify whether a relation is in 1NF, 2NF, 3NF, or BCNF.', 110, 0, 0),
(588, 'Normalize a 1NF relation into a set of 3NF (or BCNF) relations and denormalize a relational schema.', 110, 0, 0),
(589, 'Explain the impact of normalization on the efficiency of database operations, especially query optimization.', 110, 0, 0),
(590, 'Describe what is a multivalued dependency and what type of constraints it specifies.', 110, 0, 0),
(591, 'Explain why 4NF is useful in schema design.', 110, 0, 0),
(592, 'Create a transaction by embedding SQL into an application program.', 111, 0, 0),
(593, 'Explain the concept of implicit commits.', 111, 0, 0),
(594, 'Describe the issues specific to efficient transaction execution.', 111, 0, 0),
(595, 'Explain when and why rollback is needed and how logging assures proper rollback.', 111, 0, 0),
(596, 'Explain the effect of different isolation levels on the concurrency control mechanisms.', 111, 0, 0),
(597, 'Choose the proper isolation level for implementing a specified transaction protocol.', 111, 0, 0),
(598, 'Explain the techniques used for data fragmentation, replication, and allocation during the distributed database design process.', 112, 0, 0),
(599, 'Evaluate simple strategies for executing a distributed query to select the strategy that minimizes the amount of data transfer.', 112, 0, 0),
(600, 'Explain how the two-phase commit protocol is used to deal with committing a transaction that accesses databases stored on multiple nodes.', 112, 0, 0),
(601, 'Describe distributed concurrency control based on the distinguished copy techniques and the voting method.', 112, 0, 0),
(602, 'Describe the three levels of software in the client-server model.', 112, 0, 0),
(603, 'Explain the concepts of records, record types, and files, as well as the different techniques for placing file records on disk.', 113, 0, 0),
(604, 'Give examples of the application of primary, secondary, and clustering indexes.', 113, 0, 0),
(605, 'Distinguish between a nondense index and a dense index.', 113, 0, 0),
(606, 'Implement dynamic multilevel indexes using B-trees.', 113, 0, 0),
(607, 'Explain the theory and application of internal and external hashing techniques.', 113, 0, 0),
(608, 'Use hashing to facilitate dynamic file expansion.', 113, 0, 0),
(609, 'Describe the relationships among hashing, compression, and efficient database searches.', 113, 0, 0),
(610, 'Evaluate costs and benefits of various hashing schemes.', 113, 0, 0),
(611, 'Explain how physical database design affects database transaction efficiency.', 113, 0, 0),
(612, 'Compare and contrast different conceptions of data mining as evidenced in both research and application.', 114, 0, 0),
(613, 'Explain the role of finding associations in commercial market basket data.', 114, 0, 0),
(614, 'Characterize the kinds of patterns that can be discovered by association rule mining.', 114, 0, 0),
(615, 'Describe how to extend a relational system to find patterns using association rules.', 114, 0, 0),
(616, 'Evaluate methodological issues underlying the effective application of data mining.', 114, 0, 0),
(617, 'Identify and characterize sources of noise, redundancy, and outliers in presented data.', 114, 0, 0),
(618, 'Identify mechanisms (on-line aggregation, anytime behavior, interactive visualization) to close the loop in the data mining process.', 114, 0, 0),
(619, 'Describe why the various close-the-loop processes improve the effectiveness of data mining.', 114, 0, 0),
(620, 'Explain basic information storage and retrieval concepts.', 115, 0, 0),
(621, 'Describe what issues are specific to efficient information retrieval.', 115, 0, 0),
(622, 'Give applications of alternative search strategies and explain why the particular search strategy is appropriate for the application.', 115, 0, 0),
(623, 'Perform Internet-based research.', 115, 0, 0),
(624, 'Design and implement a small to medium size information storage and retrieval system.', 115, 0, 0),
(625, 'Summarize the evolution of hypertext and hypermedia models from early versions up through current offerings, distinguishing their respective capabilities and limitations.', 116, 0, 0),
(626, 'Explain basic hypertext and hypermedia concepts.', 116, 0, 0),
(627, 'Demonstrate a fundamental understanding of information presentation, transformation, and synchronization.', 116, 0, 0),
(628, 'Compare and contrast hypermedia delivery based on protocols and systems used.', 116, 0, 0),
(629, 'Design and implement web-enabled information retrieval applications using appropriate authoring tools.', 116, 0, 0),
(630, 'Describe the media and supporting devices commonly associated with multimedia information and systems.', 117, 0, 0),
(631, 'Explain basic multimedia presentation concepts.', 117, 0, 0),
(632, 'Demonstrate the use of content-based information analysis in a multimedia information system.', 117, 0, 0),
(633, 'Critique multimedia presentations in terms of their appropriate use of audio, video, graphics, color, and other information presentation concepts.', 117, 0, 0),
(634, 'Implement a multimedia application using a commercial authoring system.', 117, 0, 0),
(635, 'Explain the underlying technical concepts in building a digital library.', 118, 0, 0),
(636, 'Describe the basic service requirements for searching, linking, and browsing.', 118, 0, 0),
(637, 'Critique scenarios involving appropriate and inappropriate use of a digital library, and determine the social, legal, and economic consequences for each scenario.', 118, 0, 0),
(638, 'Describe some of the technical solutions to the problems related to archiving and preserving information in a digital library.', 118, 0, 0),
(639, 'Design and implement a small digital library.', 118, 0, 0),
(640, 'List the contributions of several pioneers in the computing field.', 119, 0, 0),
(641, 'Compare daily life before and after the advent of personal computers and the Internet.', 119, 0, 0),
(642, 'Identify significant continuing trends in the history of the computing field.', 119, 0, 0),
(643, 'Interpret the social context of a particular implementation.', 120, 0, 0),
(644, 'Identify assumptions and values embedded in a particular design including those of a cultural nature.', 120, 0, 0),
(645, 'Evaluate a particular implementation through the use of empirical data.', 120, 0, 0),
(646, 'Describe positive and negative ways in which computing alters the modes of interaction between people.', 120, 0, 0),
(647, 'Explain why computing/network access is restricted in some countries.', 120, 0, 0),
(648, 'Indicate the role of cultural issues in considering team-work.', 120, 0, 0),
(649, 'Analyze the role and risks of computing in the implementation of public policy and government (e.g. electronic voting).', 120, 0, 0),
(650, 'Articulate the impact of the input deficit from diverse populations in the computing profession.', 120, 0, 0),
(651, 'Analyze an argument to identify premises and conclusion.', 121, 0, 0),
(652, 'Illustrate the use of example, analogy, and counter-analogy in ethical argument.', 121, 0, 0),
(653, 'Detect use of basic logical fallacies in an argument.', 121, 0, 0),
(654, 'Identify stakeholders in an issue and our obligations to them.', 121, 0, 0),
(655, 'Articulate the ethical tradeoffs in a technical decision.', 121, 0, 0),
(656, 'Identify progressive stages in a whistle-blowing incident.', 122, 0, 0),
(657, 'Specify the strengths and weaknesses of relevant professional codes as expressions of professionalism and guides to decision-making.', 122, 0, 0),
(658, 'Identify ethical issues that arise in software development and determine how to address them technically and ethically.', 122, 0, 0),
(659, 'Develop a computer use policy with enforcement measures.', 122, 0, 0),
(660, 'Analyze a global computing issue, observing the role of professionals and government officials in managing the problem.', 122, 0, 0),
(661, 'Evaluate the professional codes of ethics from the ACM, the IEEE Computer Society, and other organizations.', 122, 0, 0),
(662, 'Describe the mechanisms that typically exist for a professional to keep up-to-date.', 122, 0, 0),
(663, 'Identify the social implications of ergonomic devices and the workplace environment to people’s health.', 122, 0, 0),
(664, 'Explain the limitations of testing as a means to ensure correctness.', 123, 0, 0),
(665, 'Describe the differences between correctness, reliability, and safety.', 123, 0, 0),
(666, 'Discuss the potential for hidden problems in reuse of existing components.', 123, 0, 0),
(667, 'Describe current approaches to managing risk, and characterize the strengths and shortcomings of each.', 123, 0, 0),
(668, 'Outline the role of risk management in systems design and construction.', 123, 0, 0),
(669, 'Develop an incident-recovery plan for handling system compromises for an organization', 124, 0, 0),
(670, 'Analyze stated security procedures for "weak points" that an attacker could exploit, and explain how they could (or will) fail', 124, 0, 0),
(671, 'Propose appropriate security measures for different situations', 124, 0, 0),
(672, 'Explain to a non-security community of users what measures they must follow and why, in a situation where their jobs are not security-related', 124, 0, 0),
(673, 'Distinguish among patent, copyright, and trade secret protection.', 125, 0, 0),
(674, 'Discuss the legal background of copyright in national and international law.', 125, 0, 0),
(675, 'Explain how patent and copyright laws may vary internationally.', 125, 0, 0),
(676, 'Outline the historical development of software patents.', 125, 0, 0),
(677, 'Discuss the consequences of software piracy on software developers and the role of relevant enforcement organizations.', 125, 0, 0),
(678, 'Summarize the legal bases for the right to privacy and freedom of expression in one’s own nation and how those concepts vary from country to country.', 126, 0, 0),
(679, 'Describe current computer-based threats to privacy.', 126, 0, 0),
(680, 'Explain how the Internet may change the historical balance in protecting freedom of expression.', 126, 0, 0),
(681, 'Describe trends in privacy protection as exemplified in technology.', 126, 0, 0),
(682, 'Clarify the apparent conflict between the requirements of freedom of information and the protection of the rights of the individual.', 126, 0, 0),
(683, 'Describe trends in privacy protection as exemplified in technologyOutline the technical basis of viruses and denial-of-service attacks.', 127, 0, 0),
(684, 'Enumerate techniques to combat “cracker” attacks.', 127, 0, 0),
(685, 'Discuss several different “cracker” approaches and motivations.', 127, 0, 0),
(686, 'Identify the professional’s role in security and the tradeoffs involved.', 127, 0, 0),
(687, 'Indicate measure to be taken both by individuals themselves and by organizations (including government) to prevent identity theft.', 127, 0, 0),
(688, 'Summarize the rationale for antimonopoly efforts.', 128, 0, 0),
(689, 'Describe several ways in which the information technology industry is affected by shortages in the labor supply.', 128, 0, 0),
(690, 'Suggest and defend ways to address limitations on access to computing.', 128, 0, 0),
(691, 'Outline the evolution of pricing strategies for computing goods and services.', 128, 0, 0),
(692, 'Discuss the benefits, the drawbacks and the implications of offshoring and outsourcing.', 128, 0, 0),
(693, 'Identify ways to support environmental computing (e.g. green operations, recyclable products, reduced green house emissions).', 128, 0, 0),
(694, 'Summarize the basic concepts of relativism, utilitarianism, and deontological theories.', 129, 0, 0),
(695, 'Recognize the distinction between ethical theory and professional ethics.', 129, 0, 0),
(696, 'Identify the weaknesses of the “hired agent” approach, strict legalism, naïve egoism, and naïve relativism as ethical frameworks.', 129, 0, 0),
(697, 'Discuss the properties of good software design including the nature and the role of associated documentation.', 130, 0, 0),
(698, 'Evaluate the quality of multiple software designs based on key design principles and concepts.', 130, 0, 0),
(699, 'Select and apply appropriate design patterns in the construction of a software application.', 130, 0, 0),
(700, 'Create and specify the software design for a medium-size software product using a software requirement specification, an accepted program design methodology (e.g., structured or object-oriented), and appropriate design notation.', 130, 0, 0),
(701, 'Conduct a software design review of open-source materials using appropriate guidelines.', 130, 0, 0),
(702, 'Evaluate a software design at the component level.', 130, 0, 0),
(703, 'Evaluate a software design from the perspective of reuse.', 130, 0, 0),
(704, 'Explain the value of application programming interfaces (APIs) in software development.', 131, 0, 0),
(705, 'Use class browsers and related tools during the development of applications using APIs.', 131, 0, 0),
(706, 'Design, implement, test, and debug programs that use large-scale API packages.', 131, 0, 0),
(707, 'Select, with justification, an appropriate set of tools to support the development of a range of software products.', 132, 0, 0),
(708, 'Analyze and evaluate a set of tools in a given area of software development (e.g., management, modeling, or testing).', 132, 0, 0),
(709, 'Demonstrate the capability to use a range of software tools in support of the development of a software product of medium size.', 132, 0, 0),
(710, 'Explain the concept of a software life cycle and provide an example, illustrating its phases including the deliverables that are produced.', 133, 0, 0),
(711, 'Select, with justification the software development models and process elements most appropriate for the development and maintenance of a diverse range of software products.', 133, 0, 0),
(712, 'Explain the role of process maturity models.', 133, 0, 0),
(713, 'Compare the traditional waterfall model to the incremental model, the agile model, and other appropriate models.', 133, 0, 0),
(714, 'For each of various software project scenarios, describe the project’s place in the software life cycle, identify the particular tasks that should be performed next, and identify measurements appropriate to those tasks.', 133, 0, 0),
(715, 'Apply key elements and common methods for elicitation and analysis to produce a set of software requirements for a medium-sized software system.', 134, 0, 0),
(716, 'Discuss the challenges of maintaining legacy software.', 134, 0, 0),
(717, 'Use a common, non-formal method to model and specify (in the form of a requirements specification document) the requirements for a medium-size software system.', 134, 0, 0),
(718, 'Conduct a review of a software requirements document using best practices to determine the quality of the document.', 134, 0, 0),
(719, 'Translate into natural language a software requirements specification (e.g., a software component contract) written in a formal specification language.', 134, 0, 0),
(720, 'Distinguish between program validation and verification.', 135, 0, 0),
(721, 'Describe the role that tools can play in the validation of software.', 135, 0, 0),
(722, 'Distinguish between the different types and levels of testing (unit, integration, systems, and acceptance) for medium-size software products and related materials.', 135, 0, 0),
(723, 'Create, evaluate, and implement a test plan for a medium-size code segment.', 135, 0, 0),
(724, 'Undertake, as part of a team activity, an inspection of a medium-size code segment.', 135, 0, 0),
(725, 'Discuss the issues involving the testing of object-oriented software.', 135, 0, 0),
(726, 'Identify the principal issues associated with software evolution and explain their impact on the software life cycle.', 136, 0, 0),
(727, 'Discuss the challenges of maintaining legacy systems and the need for reverse engineering.', 136, 0, 0),
(728, 'Outline the process of regression testing and its role in release management.', 136, 0, 0),
(729, 'Estimate the impact of a change request to an existing product of medium size.', 136, 0, 0),
(730, 'Develop a plan for re-engineering a medium-sized product in response to a change request.', 136, 0, 0),
(731, 'Discuss the advantages and disadvantages of software reuse.', 136, 0, 0),
(732, 'Exploit opportunities for software reuse in a given context.', 136, 0, 0),
(733, 'Identify weaknesses in a given simple design, and highlight how they can be removed through refactoring.', 136, 0, 0),
(734, 'Demonstrate through involvement in a team project the central elements of team building and team management.', 137, 0, 0),
(735, 'Prepare a project plan for a software project that includes estimates of size and effort, a schedule, resource allocation, configuration control, change management, and project risk identification and management.', 137, 0, 0),
(736, 'Indicate an approach to risk that will help to secure the on-time delivery of software.', 137, 0, 0),
(737, 'Compare and contrast the different methods and techniques used to assure the quality of a software product.', 137, 0, 0),
(738, 'Explain and apply recognized principles to the building of high-quality software components.', 138, 0, 0),
(739, 'Discuss and select an architecture for a component-based system suitable for a given scenario.', 138, 0, 0),
(740, 'Identify the kind of event handling implemented in one or more given APIs.', 138, 0, 0),
(741, 'Explain the role of objects in middleware systems and the relationship with components.', 138, 0, 0),
(742, 'Apply component-oriented approaches to the design of a range of software including those required for concurrency and transactions, reliable communication services, database interaction including services for remote query and database management, sec', 138, 0, 0),
(743, 'Apply formal verification techniques to software segments with low complexity.', 139, 0, 0),
(744, 'Discuss the role of formal verification techniques in the context of software validation and testing, and compare the benefits with those of model checking.', 139, 0, 0),
(745, 'Explain the potential benefits and drawbacks of using formal specification languages.', 139, 0, 0),
(746, 'Create and evaluate pre- and post-assertions for a variety of situations ranging from simple through complex.', 139, 0, 0),
(747, 'Using a common formal specification language, formulate the specification of a simple software system and demonstrate the benefits from a quality perspective.', 139, 0, 0),
(748, 'Demonstrate the ability to apply multiple methods to develop reliability estimates for a software system.', 140, 0, 0),
(749, 'Identify and apply redundancy and fault tolerance for a medium-sized application.', 140, 0, 0),
(750, 'Explain the problems that exist in achieving very high levels of reliability.', 140, 0, 0),
(751, 'Identify methods that will lead to the realization of a software architecture that achieves a specified reliability level.', 140, 0, 0),
(752, 'Identify and discuss different specialized systems.', 141, 0, 0),
(753, 'Discuss life cycle and software process issues in the context of software systems designed for a specialized', 141, 0, 0),
(754, 'context, including systems that may have to operate in a degraded mode of operation.', 141, 0, 0),
(755, 'Select, with appropriate justification, approaches that will result in the efficient and effective development and maintenance of specialized software systems.', 141, 0, 0),
(756, 'Given a specific context and a set of related professional issues, discuss how a software engineer involved in the development of specialized systems should respond to those issues.', 141, 0, 0),
(757, 'Outline the central technical issues associated with the implementation of specialized systems development.', 141, 0, 0),
(758, 'To define the concepts of hazard and risk, hazard', 142, 0, 0),
(759, 'To recognize common security risks in at least two operating systems', 142, 0, 0),
(760, 'To describe the categories of threats to networked computing systems', 142, 0, 0),
(761, 'To display a systematic approach to the task of identifying hazards and risks in a particular situation', 142, 0, 0),
(762, 'To apply the basic principles of risk management in a variety of simple scenarios including a security situation', 142, 0, 0),
(763, 'Rewrite a simple program to remove common vulnerabilities, such as buffer overflows, integer overflows, and race conditions', 143, 0, 0),
(764, 'State and apply the principles of least privilege and fail-safe defaults.', 143, 0, 0),
(765, 'Write a simple library that performs some non-trivial task and will not terminate the calling program regardless of how it is called', 143, 0, 0),
(766, 'Explain the benefits of simulation and modeling in a range of important application areas.', 144, 0, 0),
(767, 'Demonstrate the ability to apply the techniques of modeling and simulation to a range of problem areas.', 144, 0, 0),
(768, 'Evaluate a simulation, highlighting the benefits and the drawbacks.', 144, 0, 0),
(769, 'Apply the fundamental techniques of operations research.', 145, 0, 0),
(770, 'Describe several established techniques for prediction and estimation.', 145, 0, 0),
(771, 'Design, code, test, and debug application programs to solve problems in the domain of operations research.', 145, 0, 0),
(772, 'Compare and contrast architectures for parallel computing, recognizing the strengths and weaknesses of each', 146, 0, 0),
(773, 'Compare and contrast parallel programming paradigms recognizing the strengths and weaknesses of each', 146, 0, 0),
(774, 'Identify the basic properties of bandwidth, latency, scalability and granularity', 146, 0, 0),
(775, 'Design, code, test and debug programs for parallel computation', 146, 0, 0),
(830, 'Como ', 153, 0, 0),
(831, 'les', 153, 0, 0),
(832, 'va?', 153, 0, 0),
(833, 'ddffdssfd', 156, 0, 0),
(834, 'dffdsf', 156, 0, 0),
(835, 'ddfd', 163, 0, 0),
(836, 'dffddfd', 163, 0, 0),
(837, 'FDBGF ', 164, 0, 0),
(838, ' FF F ', 164, 0, 0),
(839, 'DFVFDFD', 165, 0, 0),
(840, 'VFDFFFDSFD', 165, 0, 0),
(841, 'o1', 166, 0, 0),
(842, 'o2', 166, 0, 0),
(843, 'o3', 166, 0, 0),
(844, 'dfsdffdas', 167, 0, 0),
(845, 'dssfddad', 167, 0, 0),
(846, 'dassdffdfdas', 167, 0, 0),
(847, 'Cinco', 168, 0, 0),
(848, 'Seis', 168, 0, 0),
(849, 'Siete', 168, 0, 0),
(850, 'Cinco', 169, 0, 0),
(851, 'Seis', 169, 0, 0),
(852, 'Siete', 169, 0, 0),
(853, 'Ocho', 169, 0, 0),
(854, '', 172, 0, 0),
(855, '', 172, 0, 0),
(856, '', 172, 0, 0),
(857, 'sdfdv', 173, 0, 0),
(858, 'fddv', 173, 0, 0),
(859, 'dfdv', 173, 0, 0),
(860, 'dvd', 173, 0, 0),
(861, 'fdsd', 173, 0, 0),
(862, '', 173, 3, 0),
(889, 'Explain what is meant by â€œbestâ€, â€œexpectedâ€, and â€œworstâ€ case behavior of an algorithm.', 183, 1, 1),
(890, 'In the context of specific algorithms, identify the characteristics of data and/or other conditions or assumptions that lead to different behaviors.', 183, 1, 3),
(891, 'Determine informally the time and space complexity of simple algorithms.', 183, 1, 2),
(892, 'Understand the formal definition of big O.', 183, 1, 1),
(893, 'List and contrast standard complexity classes.', 183, 1, 1),
(894, 'Perform empirical studies to validate hypotheses about runtime stemming from mathematical analysis. Run algorithms on input of various sizes and compare performance.', 183, 1, 3),
(895, 'Give examples that illustrate time-space trade-offs of algorithms.', 183, 1, 1),
(896, 'Use big O notation formally to give asymptotic upper bounds on time and space complexity of algorithms.', 183, 1, 2),
(897, 'Use big O notation formally to give expected case bounds on time complexity of algorithms.', 183, 1, 2),
(898, 'Explain the use of big omega, big theta, and little o notation to describe the amount of work done by an algorithm.', 183, 1, 1),
(899, 'Use recurrence relations to determine the time complexity of recursively defined algorithms.', 183, 1, 2),
(900, 'Solve elementary recurrence relations, e.g., using some form of a Master Theorem.', 183, 1, 2),
(901, 'For each of the above strategies, identify a practical example to which it would apply.', 184, 1, 1),
(902, 'Have facility mapping pseudocode to implementation, implementing examples of algorithmic strategies from scratch, and applying them to specific problems.', 184, 1, 2),
(903, 'Use a greedy approach to solve an appropriate problem and determine if the greedy rule chosen leads to an optimal solution.', 184, 1, 2),
(904, 'Use a divide-and-conquer algorithm to solve an appropriate problem.', 184, 1, 2),
(905, 'Use recursive backtracking to solve a problem such as navigating a maze.', 184, 1, 2),
(906, 'Use dynamic programming to solve an appropriate problem.', 184, 1, 2),
(907, 'Describe various heuristic problem-solving methods.', 184, 2, 1),
(908, 'Use a heuristic approach to solve an appropriate problem.', 184, 2, 2),
(909, 'Describe the trade-offs between brute force and other strategies.', 184, 2, 3),
(910, 'Implement basic numerical algorithms.', 185, 1, 2),
(911, 'Implement simple search algorithms and explain the differences in their time complexities.', 185, 1, 3),
(912, 'Be able to implement common quadratic and O(N log N) sorting algorithms.', 185, 1, 2),
(913, 'nderstand the implementation of hash tables, including collision avoidance and resolution.', 185, 1, 1),
(914, 'Discuss the runtime and memory efficiency of principal algorithms for sorting, searching, and hashing.', 185, 1, 1),
(915, 'Discuss factors other than computational efficiency that influence the choice of algorithms, such as programming time, maintainability, and the use of application-specific patterns in the input data.', 185, 1, 1),
(916, 'Solve problems using fundamental graph algorithms, including depth-first and breadth-first search.', 185, 1, 2),
(917, 'Demonstrate the ability to evaluate algorithms, to select from a range of possible options, to provide justification for that selection, and to implement the algorithm in a particular context.', 185, 1, 3),
(918, 'Understand the heap property and the use of heaps as an implementation of priority queues.', 185, 2, 1),
(919, 'Solve problems using graph algorithms, including single-source and all-pairs shortest paths, and at least one minimum spanning tree algorithm.', 185, 2, 2),
(920, 'Be able to implement a string-matching algorithm.', 185, 2, 2),
(921, 'Discuss the concept of finite state machines.', 186, 1, 1),
(922, 'Design a deterministic finite state machine to accept a specified language.', 186, 1, 2),
(923, 'Generate a regular expression to represent a specified language.', 186, 1, 2),
(924, 'Explain why the halting problem has no algorithmic solution.', 186, 1, 1),
(925, 'Design a context-free grammar to represent a specified language.', 186, 2, 2),
(926, 'Define the classes P and NP.', 186, 2, 1),
(927, 'Explain the significance of NP-completeness.', 186, 2, 1),
(928, 'Define the classes P and NP. (Also appears in AL/Basic Automata, Computability, and Complexity)', 187, 3, 1),
(929, 'Define the P-space class and its relation to the EXP class.', 187, 3, 1),
(930, 'Explain the significance of NP-completeness. (Also appears in AL/Basic Automata, Computability, and Complexity)', 187, 3, 1),
(931, 'Provide examples of classic NP-complete problems.', 187, 3, 1),
(932, 'Prove that a problem is NP-complete by reducing a classic known NP-complete problem to it.', 187, 3, 2),
(945, 'Understand the mapping of real-world problems to algorithmic solutions (e.g., as graph problems, linear programs, etc.)', 190, 3, 2),
(946, 'Use advanced algorithmic techniques (e.g., randomization, approximation) to solve real problems.', 190, 3, 3),
(947, 'Apply advanced analysis techniques (e.g., amortized, probabilistic, etc.) to algorithms.', 190, 3, 3),
(1247, 'Prove that a language is in a specified class and that it is not in the next lower class.', 189, 3, 3),
(1249, 'Convert among equivalently powerful notations for a language, including among DFAs, NFAs, and regular expressions, and between PDAs and CFGs.', 189, 3, 2),
(1250, 'Explain the Church-Turing thesis and its significance.', 189, 3, 1),
(1251, 'Explain Riceâ€™s Theorem and its significance.', 189, 3, 1),
(1252, 'Provide examples of uncomputable functions.', 189, 3, 1),
(1253, 'Prove that a problem is uncomputable by reducing a classic known uncomputable problem to it.', 189, 3, 2);

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `levels`
--

CREATE TABLE IF NOT EXISTS `levels` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(250) DEFAULT NULL,
  `numeric_representation` int(10) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=5 ;

--
-- Volcado de datos para la tabla `levels`
--

INSERT INTO `levels` (`id`, `name`, `numeric_representation`) VALUES
(1, 'Introductory', 1),
(2, 'Intermediate', 2),
(3, 'Advanced', 3),
(4, 'Project', 4);

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `mastery_levels`
--

CREATE TABLE IF NOT EXISTS `mastery_levels` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=4 ;

--
-- Volcado de datos para la tabla `mastery_levels`
--

INSERT INTO `mastery_levels` (`id`, `name`) VALUES
(1, 'Familiarity'),
(2, 'Usage'),
(3, 'Assessment');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `objectives`
--

CREATE TABLE IF NOT EXISTS `objectives` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `description` tinytext NOT NULL,
  `course_id` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=79 ;

--
-- Volcado de datos para la tabla `objectives`
--

INSERT INTO `objectives` (`id`, `description`, `course_id`) VALUES
(1, 'Desarrollar Operaciones asociadas con conjuntos, funciones y relaciones.', 23),
(2, 'Relacionar ejemplos prÃ¡cticos al modelo apropiado de conjunto, funciÃ³n o relaciÃ³n.', 23),
(4, 'Conocer las diferentes tÃ©cnicas de conteo mÃ¡s utilizadas.', 23),
(5, 'Describir como las herramientas formales de lÃ³gica simbÃ³lica son utilizadas.', 23),
(6, 'Describir la importancia y limitaciones de la lÃ³gica de predicados.', 23),
(7, 'Bosquejar la estructura bÃ¡sica y dar ejemplos de cada tipo de prueba descrita en esta unidad.', 23),
(8, 'Relacionar las ideas de inducciÃ³n matemÃ¡tica con la recursividad y con estructuras definidas recursivamente.', 23),
(9, 'Enunciar, identificar y habituarse a los conceptos mÃ¡s importantes de Conjuntos Parcialmente Ordenados y LÃ¡tices', 23),
(10, 'Analizar, comentar y aceptar las nociones bÃ¡sicas de Ãlgebras Booleanas.', 23),
(12, 'Introducir los conceptos fundamentales de programaciÃ³n y estructuras de datos utilizando un lenguaje funcional.', 21),
(13, 'dsdsdsd', 70),
(14, 'Uno', 71),
(15, 'Dos', 71),
(16, 'Tres', 71),
(57, 'Uno uno', 72),
(58, 'Dos uno', 72),
(59, 'Uno dos', 72),
(60, 'Dos corregido de nuevo', 72),
(61, 'Totalmente nuevo', 72),
(62, 'Introducir a los estudiantes a los protocolos de internet.', 73),
(63, 'Introducir a los estudiantes en el mundo del desarrollo de software para la web', 73),
(64, 'Desarrollar su capacidad de abstracciÃ³n, utilizar un lenguaje de programaciÃ³n funcional.', 21),
(65, 'Familiarizarse y manejar las matrices, determinantes y sus relaciones con los sistemas de ecuaciones y aplicaciones.', 24),
(66, 'Establecer relaciones lineales y cuadrÃ¡ticas en el plano y en el espacio.', 24),
(67, 'Relacionar el Ã¡lgebra con la geometrÃ­a, de modo que visualice problemas que de otro modo serÃ­an abstractos.', 24),
(68, 'Que el alumno logre mediante su inserciÃ³n en la vida universitaria una disposiciÃ³n de apertura a su propio mundo interior y a su misiÃ³n en el mundo, de cara a cuestionarse a si mismo para lograr un crecimiento personal que permita su despliegue integra', 25),
(69, 'Analizar de manera crÃ­tica las diferentes manifestaciones artÃ­sticas a travÃ©s de la historia identificando su naturaleza expresiva, compositiva y caracterÃ­sticas estÃ©ticas asÃ­ como las nuevas tendencias artÃ­sticas identificando su relaciÃ³n directa', 74),
(70, 'Contribuir a la formaciÃ³n personal y profesional del estudiante, reconociendo, valorando y desarrollando su lenguaje corporal, integrÃ¡ndolo a su grupo, afianzando su seguridad personal, enriqueciendo su intuiciÃ³n, su imaginaciÃ³n y creatividad, motivÃ¡', 75),
(71, 'Que el alumno utilice tÃ©cnicas de computaciÃ³n grÃ¡fica mÃ¡s sofisticadas que involucren estructuras de datos y algoritmos complejos.', 76),
(72, 'Que el alumno aplique los conceptos aprendidos para crear una aplicaciÃ³n sobre un problema real.', 76),
(73, 'Que el alumno investigue la posibilidad de crear un nuevo algoritmo y/o tÃ©cnica nueva para resolver un problema real.', 76),
(74, 'Este es un nuevo objetivo', 73),
(75, 'Uno', 77),
(76, 'Dos', 77),
(77, 'Tres', 77),
(78, 'Cuatro', 77);

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `programs`
--

CREATE TABLE IF NOT EXISTS `programs` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(250) NOT NULL,
  `description` text NOT NULL,
  `user_id` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=6 ;

--
-- Volcado de datos para la tabla `programs`
--

INSERT INTO `programs` (`id`, `name`, `description`, `user_id`) VALUES
(2, 'Mi primer programa', 'Este es mi primer programa', 0),
(4, 'IngenierÃ­a en Ciencias Computacionales', 'La FIEC a travÃ©s de la especializaciÃ³n Sistemas TecnolÃ³gicos tiene como objetivo formar profesionales orientados al conocimiento de Nuevas TecnologÃ­as de InformaciÃ³n y Comunicaciones (NTIC), de tal forma que sean aplicados en el desarrollo e innovaciÃ³n de proyectos informÃ¡ticos.', 7),
(5, 'Otro mÃ¡s', 'AquÃ­ la descripciÃ³n y el bla bla bla', 7);

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `subjects`
--

CREATE TABLE IF NOT EXISTS `subjects` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(250) DEFAULT NULL,
  `abbreviation` varchar(10) NOT NULL,
  `code` int(10) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=12 ;

--
-- Volcado de datos para la tabla `subjects`
--

INSERT INTO `subjects` (`id`, `name`, `abbreviation`, `code`) VALUES
(1, 'MatemÃ¡ticas/Apliaciones', 'DS, CN', 0),
(2, 'Algoritmos y Complejidad', 'AL', 1),
(3, 'Arquitectura / S. Operativos', 'AR, OS', 2),
(4, 'ComputaciÃ³n centrada en Redes', 'NC', 3),
(5, 'Lenguajes de ProgramaciÃ³n', 'PL', 4),
(6, 'HCI/GrÃ¡ficos', 'HC, GV', 5),
(7, 'Sistemas Inteligentes', 'IS', 6),
(8, 'GestiÃ³n de la InformaciÃ³n', 'IM', 7),
(10, 'Social y Profesional', 'SP', 8),
(11, 'IngenierÃ­a de Software', 'SE', 9);

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `topics`
--

CREATE TABLE IF NOT EXISTS `topics` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `unit_id` int(11) NOT NULL,
  `name` varchar(500) NOT NULL,
  `topic_type_id` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=1261 ;

--
-- Volcado de datos para la tabla `topics`
--

INSERT INTO `topics` (`id`, `unit_id`, `name`, `topic_type_id`) VALUES
(1, 1, 'Functions (surjections, injections, inverses, composition)', 0),
(2, 1, 'Relations (reflexivity, symmetry, transitivity, equivalence relations)', 0),
(3, 1, 'Sets (Venn diagrams, complements, Cartesian products, power sets)', 0),
(4, 1, 'Pigeonhole principle', 0),
(5, 1, 'Cardinality and countability', 0),
(6, 2, 'Propositional logic', 0),
(7, 2, 'Logical connectives', 0),
(8, 2, 'Truth tables', 0),
(9, 2, 'Normal forms (conjunctive and disjunctive)', 0),
(10, 2, 'Validity', 0),
(11, 2, 'Predicate logic', 0),
(12, 2, 'Universal and existential quantification', 0),
(13, 2, 'Modus ponens and modus tollens', 0),
(14, 2, 'Limitations of predicate logic', 0),
(15, 3, 'Notions of implication, converse, inverse, contrapositive, negation,nd contradiction', 0),
(16, 3, 'The structure of mathematical proofs', 0),
(17, 3, 'Direct proofs', 0),
(18, 3, 'Proof by counterexample', 0),
(19, 3, 'Proof by contradiction', 0),
(20, 3, 'Mathematical induction', 0),
(21, 3, 'Strong induction', 0),
(22, 3, 'Recursive mathematical definitions', 0),
(23, 3, 'Well orderings', 0),
(24, 4, 'Counting arguments', 0),
(25, 4, 'Sum and product rule', 0),
(26, 4, 'Inclusion-exclusion principle', 0),
(27, 4, 'Arithmetic and geometric progressions', 0),
(28, 4, 'Fibonacci numbers', 0),
(29, 4, 'The pigeonhole principle', 0),
(30, 4, 'Permutations and combinations', 0),
(31, 4, 'Basic definitions', 0),
(32, 4, 'Pascals identity', 0),
(33, 4, 'The binomial theorem', 0),
(34, 4, 'Solving recurrence relations', 0),
(35, 4, 'Common examples', 0),
(36, 4, 'The Master theorem', 0),
(37, 5, 'Trees', 0),
(38, 5, 'Undirected graphs', 0),
(39, 5, 'Directed graphs', 0),
(40, 5, 'Spanning trees/forests', 0),
(41, 5, 'Traversal strategies', 0),
(42, 6, 'Finite probability space, probability measure, events', 0),
(43, 6, 'Conditional probability, independence, Bayes'' theorem', 0),
(44, 6, 'Integer random variables, expectation', 0),
(45, 6, 'Law of large numbers', 0),
(46, 7, 'Basic syntax and semantics of a higher-level language', 0),
(47, 7, 'Variables, types, expressions, and assignment', 0),
(48, 7, 'Simple I/O', 0),
(49, 7, 'Conditional and iterative control structures', 0),
(50, 7, 'Functions and parameter passing', 0),
(51, 7, 'Structured decomposition', 0),
(52, 8, 'Problem-solving strategies', 0),
(53, 8, 'The role of algorithms in the problem-solving process', 0),
(54, 8, 'Implementation strategies for algorithms', 0),
(55, 8, 'Debugging strategies', 0),
(56, 8, 'The concept and properties of algorithms', 0),
(57, 9, 'Representation of numeric data', 0),
(58, 9, 'Range, precision, and rounding errors', 0),
(59, 9, 'Arrays', 0),
(60, 9, 'Representation of character data', 0),
(61, 9, 'Strings and string processing', 0),
(62, 9, 'Runtime storage management', 0),
(63, 9, 'Pointers and references', 0),
(64, 9, 'Linked structures', 0),
(65, 9, 'Implementation strategies for stacks, queues, and hash tables', 0),
(66, 9, 'Implementation strategies for graphs and trees', 0),
(67, 9, 'Strategies for choosing the right data structure', 0),
(68, 10, 'The concept of recursion', 0),
(69, 10, 'Recursive mathematical functions', 0),
(70, 10, 'Simple recursive functions', 0),
(71, 10, 'Divide-and-conquer strategies', 0),
(72, 10, 'Recursive backtracking', 0),
(73, 11, 'Event-handling methods', 0),
(74, 11, 'Event propagation', 0),
(75, 11, 'Exception handling', 0),
(76, 12, 'Object-oriented design', 0),
(77, 12, 'Encapsulation and information-hiding', 0),
(78, 12, 'Separation of behavior and implementation', 0),
(79, 12, 'Classes and subclasses', 0),
(80, 12, 'Inheritance (overriding, dynamic dispatch)', 0),
(81, 12, 'Polymorphism (subtype polymorphism vs. inheritance)', 0),
(82, 13, 'Role and purpose of computer and network security', 0),
(83, 13, 'Security goals: confidentiality, integrity, availability triad', 0),
(84, 13, 'Security standards and policies', 0),
(85, 13, 'Security mindset', 0),
(86, 13, 'Defense in depth', 0),
(87, 13, 'Common threats: worms, viruses, trojans, denial of service', 0),
(88, 13, 'Risk assessment and cost-benefit analyses', 0),
(89, 13, 'Security versus usability, time, and/or money tradeoffs', 0),
(90, 14, 'Important of checking for and avoiding array and string overflows', 0),
(91, 14, 'Programming language constructs to avoid and alternatives', 0),
(92, 14, 'How attackers use overflows to smash the run-time stack', 0),
(93, 14, 'Asymptotic analysis of upper and average complexity bounds', 0),
(94, 15, 'Identifying differences among best, average, and worst case behaviors', 0),
(95, 15, 'Big O, little o, omega, and theta notation', 0),
(96, 15, 'Standard complexity classes', 0),
(97, 15, 'Empirical measurements of performance', 0),
(98, 15, 'Time and space tradeoffs in algorithms', 0),
(99, 15, 'Using recurrence relations to analyze recursive algorithms', 0),
(100, 16, 'Brute-force algorithms', 0),
(101, 16, 'Greedy algorithms', 0),
(102, 16, 'Divide-and-conquer', 0),
(103, 16, 'Backtracking', 0),
(104, 16, 'Branch-and-bound', 0),
(105, 16, 'Heuristics', 0),
(106, 16, 'Pattern matching and string/text algorithms', 0),
(107, 16, 'Numerical approximation algorithms', 0),
(108, 17, 'Simple numerical algorithms', 0),
(109, 17, 'Sequential and binary search algorithms', 0),
(110, 17, 'Quadratic sorting algorithms (selection, insertion)', 0),
(111, 17, 'O(N log N) sorting algorithms (Quicksort, heapsort, mergesort)', 0),
(112, 17, 'Hash tables, including collision-avoidance strategies', 0),
(113, 17, 'Binary search trees', 0),
(114, 17, 'Representations of graphs (adjacency list, adjacency matrix)', 0),
(115, 17, 'Depth- and breadth-first traversals', 0),
(116, 17, 'Shortest-path algorithms (Dijkstra''s and Floyd''s algorithms)', 0),
(117, 17, 'Transitive closure (Floyd''s algorithm)', 0),
(118, 17, 'Minimum spanning tree (Prim''s and Kruskal''s algorithms)', 0),
(119, 17, 'Topological sort', 0),
(120, 18, 'Consensus and election', 0),
(121, 18, 'Termination detection', 0),
(122, 18, 'Fault tolerance', 0),
(123, 18, 'Stabilization', 0),
(124, 19, 'Finite-state machines', 0),
(125, 19, 'Context-free grammars', 0),
(126, 19, 'Tractable and intractable problems', 0),
(127, 19, 'Uncomputable functions', 0),
(128, 19, 'The halting problem', 0),
(129, 19, 'Implications of uncomputability', 0),
(130, 20, 'Definition of the classes P and NP', 0),
(131, 20, 'NP-completeness (Cook''s theorem)', 0),
(132, 20, 'Standard NP-complete problems', 0),
(133, 20, 'Reduction techniques', 0),
(134, 21, 'Deterministic finite automata (DFAs)', 0),
(135, 21, 'Nondeterministic finite automata (NFAs)', 0),
(136, 21, 'Equivalence of DFAs and NFAs', 0),
(137, 21, 'Regular expressions', 0),
(138, 21, 'The pumping lemma for regular expressions', 0),
(139, 21, 'Push-down automata (PDAs)', 0),
(140, 21, 'Relationship of PDAs and context-free grammars', 0),
(141, 21, 'Properties of context-free grammars', 0),
(142, 21, 'Turing machines', 0),
(143, 21, 'Nondeterministic Turing machines', 0),
(144, 21, 'Sets and languages', 0),
(145, 21, 'Chomsky hierarchy', 0),
(146, 21, 'The Church-Turing thesis', 0),
(147, 22, 'Amortized analysis', 0),
(148, 22, 'Online and offline algorithms', 0),
(149, 22, 'Randomized algorithms', 0),
(150, 22, 'Dynamic programming', 0),
(151, 22, 'Combinatorial optimization', 0),
(152, 23, 'Historical overview of cryptography', 0),
(153, 23, 'Private-key cryptography and the key-exchange problem', 0),
(154, 23, 'Public-key cryptography', 0),
(155, 23, 'Digital signatures', 0),
(156, 23, 'Security protocols', 0),
(157, 23, 'Applications (zero-knowledge proofs, authentication, and so on)', 0),
(158, 24, 'Line segments: properties, intersections', 0),
(159, 24, 'Convex hull finding algorithms', 0),
(160, 25, 'PRAM model', 0),
(161, 25, 'Exclusive versus concurrent reads and writes', 0),
(162, 25, 'Pointer jumping', 0),
(163, 25, 'Brent''s theorem and work efficiency', 0),
(164, 26, 'Introduction to digital logic (logic gates, flip-flops, circuits)', 0),
(165, 26, 'Logic expressions and Boolean functions', 0),
(166, 26, 'Representation of numeric data', 0),
(167, 26, 'Signed and unsigned arithmetic', 0),
(168, 26, 'Range, precision, and errors in floating-point arithmetic', 0),
(169, 26, 'Representation of text, audio, and images', 0),
(170, 26, 'Data compression', 0),
(171, 27, 'Overview of the history of the digital computer', 0),
(172, 27, 'Introduction to instruction set architecture, microarchitecture and system architecture', 0),
(173, 27, 'Processor architecture - instruction types, register sets, addressing modes', 0),
(174, 27, 'Processor structures - memory-to-register and load/store architectures', 0),
(175, 27, 'Instruction sequencing, flow-of-control, subroutine call and return mechanisms', 0),
(176, 27, 'Structure of machine-level programs', 0),
(177, 27, 'Limitations of low-level architectures', 0),
(178, 27, 'Low-level architectural support for high-level languages', 0),
(179, 28, 'I/O fundamentals: handshaking and buffering', 0),
(180, 28, 'Interrupt mechanisms: vectored and prioritized, interrupt acknowledgment', 0),
(181, 28, 'Buses: protocols, arbitration, direct-memory access (DMA)', 0),
(182, 28, 'Examples of modern buses: e.g., PCIe, USB, Hypertransport', 0),
(183, 29, 'Storage systems and their technology (semiconductor, magnetic)', 0),
(184, 29, 'Storage standards (CD-ROM, DVD)', 0),
(185, 29, 'Memory hierarchy, latency and throughput', 0),
(186, 29, 'Cache memories - operating principles, replacement policies, multilevel cache, cache coherency', 0),
(187, 30, 'Review of register transfer language to describe internal operations in a computer', 0),
(188, 30, 'Microarchitectures - hardwired and microprogrammed realizations', 0),
(189, 30, 'Instruction pipelining and instruction-level parallelism (ILP)', 0),
(190, 30, 'Overview of superscalar architectures', 0),
(191, 30, 'Processor and system performance', 0),
(192, 30, 'Performance - their meeasures and their limitations', 0),
(193, 30, 'The significance of power dissipation and its effects on computing structures', 0),
(194, 31, 'Amdahl''s law', 0),
(195, 31, 'Short vector processing (multimedia operations)', 0),
(196, 31, 'Multicore and multithreaded processors', 0),
(197, 31, 'Flynn''s taxonomy: Multiprocessor structures and architectures', 0),
(198, 31, 'Programming multiprocessor systems', 0),
(199, 31, 'GPU and special-purpose graphics processors', 0),
(200, 31, 'Introduction to reconfigurable logic and special-purpose processors', 0),
(201, 32, 'Branch prediction', 0),
(202, 32, 'Speculative execution', 0),
(203, 32, 'Superscalar architecture', 0),
(204, 32, 'Out-of-order execution', 0),
(205, 32, 'Multithreading', 0),
(206, 32, 'Scalability', 0),
(207, 32, 'Introduction to VLIW and EPIC architectures', 0),
(208, 32, 'Memory access ordering', 0),
(209, 33, 'Introduction to LANs and WANs and the history of networking and the Internet', 0),
(210, 33, 'Layered protocol design, network standards and standardization bodies', 0),
(211, 33, 'Network computing and distributed multimedia', 0),
(212, 33, 'Mobile and wireless computing', 0),
(213, 33, 'Streams and datagrams', 0),
(214, 33, 'Physical layer networking concepts', 0),
(215, 33, 'Data link layer concepts (framing, error control, flow control, protocols)', 0),
(216, 33, 'Internetworking and routing (routing algorithms, internetworking, congestion control)', 0),
(217, 33, 'Transport layer services (connection establishment, performance issues)', 0),
(218, 34, 'Representing analog values digitally - quantization and sampling', 0),
(219, 34, 'Sound and audio, image and graphics, animation and video', 0),
(220, 34, 'Multimedia standards (audio, music, graphics, image, telephony, video, TV)', 0),
(221, 34, 'Input transducers (temperature, pressure, position, movement)', 0),
(222, 34, 'Input devices: mice, keyboards (text and musical), scanners, touch-screen, voice', 0),
(223, 34, 'Output devices: displays, printers', 0),
(224, 34, 'Encoding and decoding of multimedia systems including compression and decompression', 0),
(225, 34, 'Example of computer-based systems: GPS, MP3 players, digital cameras', 0),
(226, 35, 'Semiconductor technology and Moore''s law', 0),
(227, 35, 'Limitations to semiconductor technology', 0),
(228, 35, 'Quantum computing', 0),
(229, 35, 'Optical computing', 0),
(230, 35, 'Molecular (biological) computing', 0),
(231, 35, 'New memory technologies', 0),
(232, 36, 'Role and purpose of the operating system', 0),
(233, 36, 'History of operating system development', 0),
(234, 36, 'Functionality of a typical operating system', 0),
(235, 36, 'Mechanisms to support client-server models, hand-held devices', 0),
(236, 36, 'Design issues (efficiency, robustness, flexibility, portability, security, compatibility)', 0),
(237, 36, 'Influences of security, networking, multimedia, windows', 0),
(238, 37, 'Structuring methods (monolithic, layered, modular, micro-kernel models)', 0),
(239, 37, 'Abstractions, processes, and resources', 0),
(240, 37, 'Concepts of application program interfaces (APIs)', 0),
(241, 37, 'Application needs and the evolution of hardware/software techniques', 0),
(242, 37, 'Device organization', 0),
(243, 37, 'Interrupts: methods and implementations', 0),
(244, 37, 'Concept of user/system state and protection, transition to kernel mode', 0),
(245, 38, 'States and state diagrams', 0),
(246, 38, 'Structures (ready list, process control blocks, and so forth)', 0),
(247, 38, 'Dispatching and context switching', 0),
(248, 38, 'The role of interrupts', 0),
(249, 38, 'Concurrent execution: advantages and disadvantages', 0),
(250, 38, 'The "mutual exclusion" problem and some solutions', 0),
(251, 38, 'Deadlock: causes, conditions, prevention', 0),
(252, 38, 'Models and mechanisms (semaphores, monitors, condition variables, rendezvous)', 0),
(253, 38, 'Producer-consumer problems and synchronization', 0),
(254, 38, 'Multiprocessor issues (spin-locks, reentrancy)', 0),
(255, 39, 'Preemptive and nonpreemptive scheduling', 0),
(256, 39, 'Schedulers and policies', 0),
(257, 39, 'Processes and threads', 0),
(258, 39, 'Deadlines and real-time issues', 0),
(259, 40, 'Review of physical memory and memory management hardware', 0),
(260, 40, 'Paging and virtual memory', 0),
(261, 40, 'Working sets and thrashing', 0),
(262, 40, 'Caching', 0),
(263, 41, 'Characteristics of serial and parallel devices', 0),
(264, 41, 'Abstracting device differences', 0),
(265, 41, 'Buffering strategies', 0),
(266, 41, 'Direct memory access', 0),
(267, 41, 'Recovery from failures', 0),
(268, 42, 'Overview of system security', 0),
(269, 42, 'Policy/mechanism separation', 0),
(270, 42, 'Security methods and devices', 0),
(271, 42, 'Protection, access control, and authentication', 0),
(272, 42, 'Backups', 0),
(273, 43, 'Files: data, metadata, operations, organization, buffering, sequential, nonsequential', 0),
(274, 43, 'Directories: contents and structure', 0),
(275, 43, 'File systems: partitioning, mount/unmount, virtual file systems', 0),
(276, 43, 'Standard implementation techniques', 0),
(277, 43, 'Memory-mapped files', 0),
(278, 43, 'Special-purpose file systems', 0),
(279, 43, 'Naming, searching, access, backups', 0),
(280, 44, 'Process and task scheduling', 0),
(281, 44, 'Memory/disk management requirements in a real-time environment', 0),
(282, 44, 'Failures, risks, and recovery', 0),
(283, 44, 'Special concerns in real-time systems', 0),
(284, 45, 'Fundamental concepts: reliable and available systems', 0),
(285, 45, 'Spatial and temporal redundancy', 0),
(286, 45, 'Methods used to implement fault tolerance', 0),
(287, 45, 'Examples of reliable systems', 0),
(288, 46, 'Why system performance needs to be evaluated', 0),
(289, 46, 'What is to be evaluated', 0),
(290, 46, 'Policies for caching, paging, scheduling, memory management, security, and so forth', 0),
(291, 46, 'Evaluation models: deterministic, analytic, simulation, or implementation-specific', 0),
(292, 46, 'How to collect evaluation data (profiling and tracing mechanisms)', 0),
(293, 47, 'Scripting and the role of scripting languages', 0),
(294, 47, 'Basic system commands', 0),
(295, 47, 'Creating scripts, parameter passing', 0),
(296, 47, 'Executing a script', 0),
(297, 47, 'Influences of scripting on programming', 0),
(298, 48, 'Digital forensics and its relationship to other forensic disciplines', 0),
(299, 48, 'Incident response responsibilities', 0),
(300, 48, 'Forensic procedures', 0),
(301, 48, 'Digital evidence and tracking', 0),
(302, 48, 'Rules/Standards of Evidence', 0),
(303, 48, 'Evidence gathering and analysis', 0),
(304, 48, 'Forensic mechanisms', 0),
(305, 48, 'Profiling', 0),
(306, 48, 'Tools to support investigative work', 0),
(307, 49, 'Models of protection', 0),
(308, 49, 'Memory protection', 0),
(309, 49, 'Encryption', 0),
(310, 49, 'Recovery management', 0),
(311, 49, 'Types of access control: mandatory, discretionary, originator-controlled, role-based', 0),
(312, 49, 'Access control matrix model', 0),
(313, 49, 'Harrison-Russo-Ullman model and undecidability of security', 0),
(314, 49, 'Confidentiality models such as Bell-LaPadula', 0),
(315, 49, 'Integrity models such as Biba and Clark-Wilson', 0),
(316, 49, 'Conflict of interest models such as the Chinese Wall', 0),
(317, 50, 'Background and history of networking and the Internet', 0),
(318, 50, 'Network architectures', 0),
(319, 50, 'The range of specializations within net-centric computing', 0),
(320, 50, 'Networks and protocols', 0),
(321, 50, 'Networked multimedia systems', 0),
(322, 50, 'Distributed computing', 0),
(323, 50, 'Client/server and Peer to Peer paradigms', 0),
(324, 50, 'Mobile and wireless computing', 0),
(325, 51, 'Network standards and standardization bodies', 0),
(326, 51, 'The ISO 7-layer reference model in general and its instantiation in TCP/IP', 0),
(327, 51, 'Overview of Physical and Data Link layer concepts (framing, error control, flow control, protocols)', 0),
(328, 51, 'Data Link layer access control concepts', 0),
(329, 51, 'Internetworking and routing (routing algorithms, internetworking, congestion control)', 0),
(330, 51, 'Transport layer services (connection establishment, performance issues, flow and error control)', 0),
(331, 52, 'Fundamentals of cryptography: Secret-key algorithms', 0),
(332, 52, 'Fundamentals of cryptography: Public-key algorithms', 0),
(333, 52, 'Authentication protocols', 0),
(334, 52, 'Digital signatures: Examples', 0),
(335, 52, 'Network attack types: Denial of service, flooding, sniffing and traffic redirection, message integrity attacks, identity hijacking, exploit attacks (buffer overruns, Trojans, backdoors), inside attacks, infrastructure (DNS hijacking, route blackholing, misbehaving routers that drop traffic), etc.)', 0),
(336, 52, 'Use of passwords and access control mechanisms', 0),
(337, 52, 'Basic network defense tools and strategies: Intrusion Detection', 0),
(338, 52, 'Basic network defense tools and strategies: Firewalls', 0),
(339, 52, 'Basic network defense tools and strategies: Detection of malware', 0),
(340, 52, 'Basic network defense tools and strategies: Kerberos', 0),
(341, 52, 'Basic network defense tools and strategies: IPSec', 0),
(342, 52, 'Basic network defense tools and strategies: Virtual Private Networks', 0),
(343, 52, 'Basic network defense tools and strategies: Network Address Translation', 0),
(344, 52, 'Network Resource Management policies', 0),
(345, 52, 'Auditing and logging', 0),
(346, 53, 'Web technologies: Server-side programs', 0),
(347, 53, 'Web technologies: Client-side scripts', 0),
(348, 53, 'Web technologies: The applet concept', 0),
(349, 53, 'Characteristics of web servers: Handling permissions', 0),
(350, 53, 'Characteristics of web servers: File management', 0),
(351, 53, 'Characteristics of web servers: Capabilities of common server architectures', 0),
(352, 53, 'Role of client computers', 0),
(353, 53, 'Nature of the client-server relationship', 0),
(354, 53, 'Web protocols', 0),
(355, 53, 'Support tools for web site creation and web management', 0),
(356, 53, 'Developing Internet information servers', 0),
(357, 53, 'Publishing information and applications', 0),
(358, 53, 'Grid Computing, cluster, mesh', 0),
(359, 53, 'Web Services, Web 2.ajax', 0),
(360, 54, 'Protocols at the application layer', 0),
(361, 54, 'Web interfaces: Browsers and APIs', 0),
(362, 54, 'Web Search Technologies', 0),
(363, 54, 'Principles of web engineering', 0),
(364, 54, 'Database-driven web sites', 0),
(365, 54, 'Remote procedure calls (RPC)', 0),
(366, 54, 'Lightweight distributed objects', 0),
(367, 54, 'The role of middleware', 0),
(368, 54, 'Support tools', 0),
(369, 54, 'Security issues in distributed object systems', 0),
(370, 54, 'Enterprise-wide web-based applications: Service-oriented Architectures', 0),
(371, 55, 'Overview of the issues of network management', 0),
(372, 55, 'Use of passwords and access control mechanisms', 0),
(373, 55, 'Domain names and name services', 0),
(374, 55, 'Issues for Internet service providers (ISPs)', 0),
(375, 55, 'Security issues and firewalls', 0),
(376, 55, 'Quality of service issues: performance, failure recovery', 0),
(377, 56, 'Analog and digital representations', 0),
(378, 56, 'Encoding and decoding algorithms', 0),
(379, 56, 'Lossless and lossy compression', 0),
(380, 56, 'Data compression: Huffman coding and the Ziv-Lempel algorithm', 0),
(381, 56, 'Audio compression and decompression', 0),
(382, 56, 'Image compression and decompression', 0),
(383, 56, 'Video compression and decompression', 0),
(384, 56, 'Performance issues: timing, compression factor, suitability for real-time use', 0),
(385, 57, 'Sound and audio, image and graphics, animation and video', 0),
(386, 57, 'Multimedia standards (audio, music, graphics, image, telephony, video, TV)', 0),
(387, 57, 'Capacity planning and performance issues', 0),
(388, 57, 'Input and output devices (scanners, digital camera, touch-screens, voice-activated)', 0),
(389, 57, 'MIDI keyboards, synthesizers', 0),
(390, 57, 'Storage standards (Magneto Optical disk, CD-ROM, DVD)', 0),
(391, 57, 'Multimedia servers and file systems', 0),
(392, 57, 'Tools to support multimedia development', 0),
(393, 58, 'Overview of the history, evolution, and compatibility of wireless standards', 0),
(394, 58, 'The special problems of wireless and mobile computing', 0),
(395, 58, 'Wireless local area networks and satellite-based networks', 0),
(396, 58, 'Wireless local loops', 0),
(397, 58, 'Mobile Internet protocol', 0),
(398, 58, 'Mobile aware adaption', 0),
(399, 58, 'Extending the client-server model to accommodate mobility', 0),
(400, 58, 'Mobile data access: server data dissemination and client cache management', 0),
(401, 58, 'Software package support for mobile and wireless computing', 0),
(402, 58, 'The role of middleware and support tools', 0),
(403, 58, 'Performance issues', 0),
(404, 58, 'Emerging technologies', 0),
(405, 59, 'History of programming languages', 0),
(406, 59, 'Brief survey of programming paradigms', 0),
(407, 59, 'Procedural languages', 0),
(408, 59, 'Object-oriented languages', 0),
(409, 59, 'Functional languages', 0),
(410, 59, 'Declarative, non-algorithmic languages', 0),
(411, 59, 'Scripting languages', 0),
(412, 59, 'The effects of scale on programming methodology', 0),
(413, 60, 'The concept of a virtual machine', 0),
(414, 60, 'Hierarchy of virtual machines', 0),
(415, 60, 'Intermediate languages', 0),
(416, 60, 'Security issues arising from running code on an alien machine', 0),
(417, 61, 'Comparison of interpreters and compilers', 0),
(418, 61, 'Language translation phases (lexical analysis, parsing, code generation, optimization)', 0),
(419, 61, 'Machine-dependent and machine-independent aspects of translation', 0),
(420, 62, 'The conception of types as a set of values with together with a set of operations', 0),
(421, 62, 'Declaration models (binding, visibility, scope, and lifetime)', 0),
(422, 62, 'Overview of type-checking', 0),
(423, 62, 'Garbage collection', 0),
(424, 63, 'Procedures, functions, and iterators as abstraction mechanisms', 0),
(425, 63, 'Parameterization mechanisms (reference vs. value)', 0),
(426, 63, 'Activation records and storage management', 0),
(427, 63, 'Type parameters and parameterized types', 0),
(428, 63, 'Modules in programming languages', 0),
(429, 64, 'Object-oriented design', 0),
(430, 64, 'Encapsulation and information-hiding', 0),
(431, 64, 'Separation of behavior and implementation', 0),
(432, 64, 'Classes and subclasses', 0),
(433, 64, 'Inheritance (overriding, dynamic dispatch)', 0),
(434, 64, 'Polymorphism (subtype polymorphism vs. inheritance)', 0),
(435, 64, 'Class hierarchies', 0),
(436, 64, 'Collection classes and iteration protocols', 0),
(437, 64, 'Internal representations of objects and method tables', 0),
(438, 65, 'Overview and motivation of functional languages', 0),
(439, 65, 'Recursion over lists, natural numbers, trees, and other recursively-defined data', 0),
(440, 65, 'Pragmatics (debugging by divide and conquer; persistency of data structures)', 0),
(441, 65, 'Amortized efficiency for functional data structures', 0),
(442, 65, 'Closures and uses of functions as data (infinite sets, streams)', 0),
(443, 66, 'Application of regular expressions in lexical scanners', 0),
(444, 66, 'Parsing (concrete and abstract syntax, abstract syntax trees)', 0),
(445, 66, 'Application of context-free grammars in table-driven and recursive-descent parsing', 0),
(446, 66, 'Symbol table management', 0),
(447, 66, 'Code generation by tree walking', 0),
(448, 66, 'Architecture-specific operations: instruction selection and register allocation', 0),
(449, 66, 'Optimization techniques', 0),
(450, 66, 'The use of tools in support of the translation process and the advantages thereof', 0),
(451, 66, 'Program libraries and separate compilation', 0),
(452, 66, 'Building syntax-directed tools', 0),
(453, 67, 'Data type as set of values with set of operations', 0),
(454, 67, 'Data types', 0),
(455, 67, 'Elementary types', 0),
(456, 67, 'Product and coproduct types', 0),
(457, 67, 'Algebraic types', 0),
(458, 67, 'Recursive types', 0),
(459, 67, 'Arrow (function) types', 0),
(460, 67, 'Parameterized types', 0),
(461, 67, 'Type-checking models', 0),
(462, 67, 'Semantic models of user-defined types', 0),
(463, 67, 'Type abbreviations', 0),
(464, 67, 'Abstract data types', 0),
(465, 67, 'Type equality', 0),
(466, 67, 'Parametric polymorphism', 0),
(467, 67, 'Subtype polymorphism', 0),
(468, 67, 'Type-checking algorithms', 0),
(469, 68, 'Informal semantics', 0),
(470, 68, 'Overview of formal semantics', 0),
(471, 68, 'Denotational semantics', 0),
(472, 68, 'Axiomatic semantics', 0),
(473, 68, 'Operational semantics', 0),
(474, 69, 'General principles of language design', 0),
(475, 69, 'Design goals', 0),
(476, 69, 'Typing regimes', 0),
(477, 69, 'Data structure models', 0),
(478, 69, 'Control structure models', 0),
(479, 69, 'Abstraction mechanisms', 0),
(480, 70, 'Motivation: Why the study of how people interact with technology is vital for the development of most usable', 0),
(481, 70, 'and acceptable systems', 0),
(482, 70, 'Contexts for HCI (mobile devices, consumer devices, business applications, web, business applications,', 0),
(483, 70, 'collaboration systems, games, etc.)', 0),
(484, 70, 'Process for user-centered development: early focus on users, empirical testing, iterative design.', 0),
(485, 70, 'Different measures for evaluation: utility, efficiency, learnability, user satisfaction.', 0),
(486, 70, 'Models that inform human-computer interaction (HCI) design: attention, perception and recognition,', 0),
(487, 70, 'movement, and cognition.', 0),
(488, 70, 'Social issues influencing HCI design and use: culture, communication, and organizations.', 0),
(489, 70, 'Accommodating human diversity, including universal design and accessibility and designing for multiple', 0),
(490, 70, 'cultural and linguistic contexts.', 0),
(491, 70, 'The most common interface design mistakes.', 0),
(492, 70, 'User interface standards', 0),
(493, 71, 'Principles of graphical user interfaces (GUIs).', 0),
(494, 71, 'Action-object versus object-action.', 0),
(495, 71, 'User interface events.', 0),
(496, 71, 'Constructing a user-interface for a native system vs. the web.', 0),
(497, 72, 'Evaluation without typical users: walkthroughs, KLM, expert-based analysis, heuristics, guidelines, and standards', 0),
(498, 72, 'Evaluation with typical users: observation, think-aloud, interview, survey, experiment.', 0),
(499, 72, 'Challenges to effective evaluation: sampling, generalization.', 0),
(500, 72, 'Reporting the results of evaluations', 0),
(501, 73, 'Approaches, characteristics, and overview of product development process, with special emphasis on software', 0),
(502, 73, 'development process.', 0),
(503, 73, 'Functionality and usability requirements', 0),
(504, 73, 'Techniques for gathering requirements: task analysis, interviews, surveys', 0),
(505, 73, 'Notations for specifying user interfaces', 0),
(506, 73, 'Prototyping techniques and tools', 0),
(507, 73, 'Sketching', 0),
(508, 73, 'Paper storyboards', 0),
(509, 73, 'Low-fidelity or paper prototyping', 0),
(510, 73, 'Medium fidelity prototyping', 0),
(511, 73, 'Prototyping tools and GUI builders', 0),
(512, 73, 'User-interface software techniques', 0),
(513, 73, 'Inheritance and dynamic dispatch', 0),
(514, 73, 'Prototyping languages and GUI builders', 0),
(515, 74, 'Choosing interaction styles (command line, menu, voice, gestural, WIMP) and interaction techniques', 0),
(516, 74, 'Choosing the right widget for users and tasks', 0),
(517, 74, 'HCI aspects of screen design: layout, color, fonts, labeling', 0),
(518, 74, 'Handling human/system failure.', 0),
(519, 74, 'Beyond simple screen design: visualization, representation, metaphor', 0),
(520, 74, 'Multi-modal interaction: graphics, sound, and haptics.', 0),
(521, 74, '3D interaction and virtual reality', 0),
(522, 74, 'Designing for small devices, e.g., cell phones.', 0),
(523, 74, 'Multi-cultural interaction and communication', 0),
(524, 75, 'UIMS, dialogue independence and levels of analysis, Seeheim model', 0),
(525, 75, 'Widget classes and libraries', 0),
(526, 75, 'Event management and user interaction', 0),
(527, 75, 'Web design vs. native application design', 0),
(528, 75, 'Geometry management', 0),
(529, 75, 'GUI builders and UI programming environments', 0),
(530, 75, 'Cross-platform design', 0),
(531, 75, 'Design for small, mobile devices', 0),
(532, 76, 'Categorization and information architectures: hierarchies, grids, hypermedia , networks', 0),
(533, 76, 'Information retrieval and human performance', 0),
(534, 76, 'Web search', 0),
(535, 76, 'Usability of database query languages', 0),
(536, 76, 'Graphics', 0),
(537, 76, 'Sound', 0),
(538, 76, 'HCI design of multimedia information systems', 0),
(539, 76, 'Speech recognition and natural language processing', 0),
(540, 76, 'Information appliances and mobile computing', 0),
(541, 76, 'Interactive visualizations', 0),
(542, 76, 'Information design and navigation', 0),
(543, 76, 'Touch interfaces', 0),
(544, 77, 'Groupware to support specialized tasks: document preparation, multi-player games', 0),
(545, 77, 'Asynchronous group communication: e-mail, bulletin boards, listservs, wikis, ...', 0),
(546, 77, 'Synchronous group communication: chat rooms, conferencing', 0),
(547, 77, 'Online communities: MUDs/MOOs,', 0),
(548, 77, 'Software characters and intelligent agents, virtual worlds and avatars', 0),
(549, 77, 'Social psychology', 0),
(550, 77, 'Social networking', 0),
(551, 77, 'Social Computing', 0),
(552, 77, 'Collaborative usability techniques.', 0),
(553, 78, 'Interaction design for engaging interactive experiences', 0),
(554, 78, 'Presence, tele-presence and immersive environments', 0),
(555, 78, 'Affective interaction and emotion', 0),
(556, 78, 'Ambient intelligence', 0),
(557, 78, 'Physical computing and embodied interaction', 0),
(558, 79, 'Applied psychology and security policies', 0),
(559, 79, 'Usability design and security', 0),
(560, 79, 'Social engineering', 0),
(561, 79, 'Identity theft', 0),
(562, 79, 'Phishing', 0),
(563, 80, 'Hierarchy of graphics software', 0),
(564, 80, 'Using a graphics API', 0),
(565, 80, 'Simple color models (RGB, HSB, CMYK)', 0),
(566, 80, 'Homogeneous coordinates', 0),
(567, 80, 'Affine transformations (scaling, rotation, translation)', 0),
(568, 80, 'Viewing transformation', 0),
(569, 80, 'Clipping', 0),
(570, 81, 'Raster and vector graphics systems', 0),
(571, 81, 'Video display devices', 0),
(572, 81, 'Physical and logical input devices', 0),
(573, 81, 'Issues facing the developer of graphical systems', 0),
(574, 83, 'Polygonal representation of objects', 0),
(575, 83, 'Parametric polynomial curves and surfaces', 0),
(576, 83, 'Constructive Solid Geometry (CSG) representation', 0),
(577, 83, 'Implicit representation of curves and surfaces', 0),
(578, 83, 'Spatial subdivision techniques', 0),
(579, 83, 'Procedural models', 0),
(580, 83, 'Deformable models', 0),
(581, 83, 'Subdivision surfaces', 0),
(582, 83, 'Multiresolution modeling', 0),
(583, 83, 'Reconstruction', 0),
(584, 84, 'Line generation algorithms (Bresenham)', 0),
(585, 84, 'Font generation: outline vs. bitmap', 0),
(586, 84, 'Light-source and material properties', 0),
(587, 84, 'Ambient, diffuse, and specular reflections', 0),
(588, 84, 'Phong reflection model', 0),
(589, 84, 'Rendering of a polygonal surface; flat, Gouraud, and Phong shading', 0),
(590, 84, 'Texture mapping, bump texture, environment map', 0),
(591, 84, 'Introduction to ray tracing', 0),
(592, 84, 'Image synthesis, sampling techniques, and anti-aliasing', 0),
(593, 85, 'Transport equations', 0),
(594, 85, 'Ray tracing algorithms', 0),
(595, 85, 'Photon tracing', 0),
(596, 85, 'Radiosity for global illumination computation, form factors', 0),
(597, 85, 'Efficient approaches to global illumination', 0),
(598, 85, 'Monte Carlo methods for global illumination', 0),
(599, 85, 'Image-based rendering, panorama viewing, plenoptic function modeling', 0),
(600, 85, 'Rendering of complex natural phenomenon', 0),
(601, 85, 'Non-photorealistic rendering', 0),
(602, 86, 'Color quantization', 0),
(603, 86, 'Scan conversion of primitive, forward differencing', 0),
(604, 86, 'Tessellation of curved surfaces', 0),
(605, 86, 'Hidden surface removal methods', 0),
(606, 86, 'Z-buffer and frame buffer, color channels (a channel for opacity)', 0),
(607, 86, 'Advanced geometric modeling techniques', 0),
(608, 87, 'Key-frame animation', 0),
(609, 87, 'Camera animation', 0),
(610, 87, 'Scripting system', 0),
(611, 87, 'Animation of articulated structures: inverse kinematics', 0),
(612, 87, 'Motion capture', 0),
(613, 87, 'Procedural animation', 0),
(614, 87, 'Deformation', 0),
(615, 88, 'Basic viewing and interrogation functions for visualization', 0),
(616, 88, 'Visualization of vector fields, tensors, and flow data', 0),
(617, 88, 'Visualization of scalar field or height field: isosurface by the marching cube method', 0),
(618, 88, 'Direct volume data rendering: ray-casting, transfer functions, segmentation, hardware', 0),
(619, 88, 'Information visualization: projection and parallel-coordinates methods', 0),
(620, 89, 'Stereoscopic display', 0),
(621, 89, 'Force feedback simulation, haptic devices', 0),
(622, 89, 'Viewer tracking', 0),
(623, 89, 'Collision detection', 0),
(624, 89, 'Visibility computation', 0),
(625, 89, 'Time-critical rendering, multiple levels of details (LOD)', 0),
(626, 89, 'Image-base VR system', 0),
(627, 89, 'Distributed VR, collaboration over computer network', 0),
(628, 89, 'Interactive modeling', 0),
(629, 89, 'User interface issues', 0),
(630, 89, 'Applications in medicine, simulation, and training', 0),
(631, 90, 'Image acquisition', 0),
(632, 90, 'The digital image and its properties', 0),
(633, 90, 'Image preprocessing', 0),
(634, 90, 'Segmentation (thresholding, edge- and region-based segmentation)', 0),
(635, 90, 'Shape representation and object recognition', 0),
(636, 90, 'Motion analysis', 0),
(637, 90, 'Case studies (object recognition, object tracking)', 0),
(638, 91, 'Purpose and nature of computational geometry', 0),
(639, 91, 'Application areas - convex hull, line intersection issues, Delauney triangulation, polgygon triangulation, Voroni diagrams', 0),
(640, 91, 'Combinatorial computational geometry: static problems such as developing efficient algorithms for certain geometric situations; dynamic problems including', 0),
(641, 91, 'Numerical computational geometry: gmodeling, computer-aided geometric design; curve and surface modeling including representation of these: Bezier curves, spline curves and surfaces; level set method.', 0),
(642, 92, 'The nature of games engines (as an integrated development environment) and their purpose', 0),
(643, 92, 'Hardware support including use of threading; performance issues; input devices', 0),
(644, 92, 'Typical components including rendering, and support for real-time graphics and interaction; also physics simulation, collision detaection, sound, artificial intelligence; terrain rendering', 0),
(645, 93, 'History of artificial intelligence', 0),
(646, 93, 'Philosophical questions', 0),
(647, 93, 'The Turing test', 0),
(648, 93, 'Searle''s "Chinese Room" thought experiment', 0),
(649, 93, 'Ethical issues in AI', 0),
(650, 93, 'Fundamental definitions', 0),
(651, 93, 'Optimal vs. human-like reasoning', 0),
(652, 93, 'Optimal vs. human-like behavior', 0),
(653, 93, 'Philosophical questions', 0),
(654, 93, 'Modeling the world', 0),
(655, 93, 'The role of heuristics', 0),
(656, 94, 'Problem spaces; problem solving by search', 0),
(657, 94, 'Brute-force search (breadth-first, depth-first, depth-first with iterative deepening)', 0),
(658, 94, 'Best-first search (generic best-first, Dijkstra''s algorithm, A*, admissibility of A*)', 0),
(659, 94, 'Two-player games (minimax search, alpha-beta pruning', 0),
(660, 94, 'Constraint satisfaction (backtracking and local search methods)', 0),
(661, 95, 'Review of propositional and predicate logic', 0),
(662, 95, 'Resolution and theorem proving', 0),
(663, 95, 'Nonmonotonic inference; unification and lifting, forward chaining, backward chaining, resolution', 0),
(664, 95, 'Probabilistic reasoning', 0),
(665, 95, 'Bayes theorem', 0),
(666, 96, 'Heuristics', 0),
(667, 96, 'Local search and optimization', 0),
(668, 96, 'Hill climbing', 0),
(669, 96, 'Genetic algorithms', 0),
(670, 96, 'Simulated annealing', 0),
(671, 96, 'Local beam search', 0),
(672, 96, 'Adversarial search for games', 0),
(673, 97, 'Structured representation: Frames and objects', 0),
(674, 97, 'Structured representation: Description logics', 0),
(675, 97, 'Structured representation: Inheritance systems', 0),
(676, 97, 'Non-monotonic reasoning: Nonclassical logics', 0),
(677, 97, 'Non-monotonic reasoning: Default reasoning', 0),
(678, 97, 'Non-monotonic reasoning: Belief revision', 0),
(679, 97, 'Non-monotonic reasoning: Preference logics', 0),
(680, 97, 'Non-monotonic reasoning: Integration of knowledge sources', 0),
(681, 97, 'Non-monotonic reasoning: Aggregation of conflicting belief', 0),
(682, 97, 'Reasoning on action and change: Situation calculus', 0),
(683, 97, 'Reasoning on action and change: Event calculus', 0),
(684, 97, 'Reasoning on action and change: Ramification problems', 0),
(685, 97, 'Temporal and spatial reasoning', 0),
(686, 97, 'Uncertainty: Probabilistic reasoning', 0),
(687, 97, 'Uncertainty: Bayesian nets', 0),
(688, 97, 'Uncertainty: Decision theory', 0),
(689, 97, 'Knowledge representation for diagnosis, qualitative representation', 0),
(690, 97, 'Ontology engineering', 0),
(691, 97, 'Semantic networks', 0),
(692, 98, 'Definition of agents', 0),
(693, 98, 'Successful applications and state-of-the-art agent-based systems', 0),
(694, 98, 'Agent architectures: Simple reactive agents', 0),
(695, 98, 'Agent architectures: Reactive planners', 0),
(696, 98, 'Agent architectures: Layered architectures', 0),
(697, 98, 'Agent architectures: Example architectures and applications', 0),
(698, 98, 'Agent theory: Commitments', 0),
(699, 98, 'Agent theory: Intentions', 0),
(700, 98, 'Agent theory: Decision-theoretic agents', 0),
(701, 98, 'Agent theory: Markov decision processes (MDP)', 0),
(702, 98, 'Software agents, personal assistants, and information access: Collaborative agents', 0),
(703, 98, 'Software agents, personal assistants, and information access: Information-gathering agents', 0),
(704, 98, 'Believable agents (synthetic characters, modeling emotions in agents): Learning agents', 0),
(705, 98, 'Believable agents (synthetic characters, modeling emotions in agents): Multi-agent systems', 0),
(706, 98, 'Believable agents (synthetic characters, modeling emotions in agents): Economically inspired multi-agent systems', 0),
(707, 98, 'Believable agents (synthetic characters, modeling emotions in agents): Collaborating agents', 0),
(708, 98, 'Believable agents (synthetic characters, modeling emotions in agents): Agent teams', 0),
(709, 98, 'Believable agents (synthetic characters, modeling emotions in agents): Agent modeling', 0),
(710, 98, 'Believable agents (synthetic characters, modeling emotions in agents): Multi-agent learning', 0),
(711, 98, 'Introduction to robotic agents', 0),
(712, 98, 'Mobile agents', 0),
(713, 99, 'Deterministic and stochastic grammar', 0),
(714, 99, 'Parsing algorithms', 0),
(715, 99, 'Corpus-based methods', 0),
(716, 99, 'Information retrieval and information extraction', 0),
(717, 99, 'Language translation', 0),
(718, 99, 'Speech recognition', 0),
(719, 100, 'Definition and examples of machine learning', 0),
(720, 100, 'Inductive learning, statistical based learning, reinforcement learning', 0),
(721, 100, 'Supervised learning', 0),
(722, 100, 'Learning decision trees', 0),
(723, 100, 'Learning neural networks', 0),
(724, 100, 'Learning belief networks', 0),
(725, 100, 'The nearest neighbor algorithm', 0),
(726, 100, 'Learning theory', 0),
(727, 100, 'The problem of overfitting', 0),
(728, 100, 'Unsupervised learning', 0),
(729, 100, 'Reinforcement learning', 0),
(730, 101, 'Definition and examples of planning systems', 0),
(731, 101, 'Planning as search', 0),
(732, 101, 'Operator-based planning', 0),
(733, 101, 'Planning graphs', 0),
(734, 101, 'Propositional planning', 0),
(735, 101, 'Extending planning systems (case-based, learning, and probabilistic systems)', 0),
(736, 101, 'Static world planning systems', 0),
(737, 101, 'Planning and execution including conditional planning and continuous planning', 0),
(738, 101, 'Mobile agent planning', 0),
(739, 101, 'Planning and robotics', 0),
(740, 102, 'Overview', 0),
(741, 102, 'State-of-the-art robot systems', 0),
(742, 102, 'Planning vs. reactive control', 0),
(743, 102, 'Uncertainty in control', 0),
(744, 102, 'Sensing', 0),
(745, 102, 'World models', 0),
(746, 102, 'Configuration space', 0),
(747, 102, 'Planning', 0),
(748, 102, 'Sensing', 0),
(749, 102, 'Robot programming', 0),
(750, 102, 'Navigation and control', 0),
(751, 102, 'Robotic software and its architecture', 0),
(752, 103, 'Perception: role and applications', 0),
(753, 103, 'Image formation: light, colour, shades', 0),
(754, 103, 'Image and object detection: feature recognition, object recognition', 0),
(755, 103, 'Technologies', 0),
(756, 103, 'Software characteristics', 0),
(757, 104, 'Information storage and retrieval (IS&R)', 0),
(758, 104, 'Information management applications', 0),
(759, 104, 'Information capture and representation', 0),
(760, 104, 'Metadata/schema association with data', 0),
(761, 104, 'Analysis and indexing', 0),
(762, 104, 'Search, retrieval, linking, navigation', 0),
(763, 104, 'Declarative and navigational queries', 0),
(764, 104, 'Information privacy, integrity, security, and preservation', 0),
(765, 104, 'Scalability, efficiency, and effectiveness', 0),
(766, 104, 'Concepts of Information Assurance (data persistence, integrity)', 0),
(767, 105, 'History and motivation for database systems', 0),
(768, 105, 'Components of database systems', 0),
(769, 105, 'DBMS functions', 0),
(770, 105, 'Database architecture and data independence', 0),
(771, 105, 'Use of a declarative query language', 0),
(772, 106, 'Data modeling', 0),
(773, 106, 'Conceptual models (such as entity-relationship or UML)', 0),
(774, 106, 'Object-oriented model', 0),
(775, 106, 'Relational data model', 0),
(776, 106, 'Semistructured data model (expressed using DTD or XMLSchema, for example)', 0),
(777, 107, 'The massive impact of indexes on query performance', 0),
(778, 107, 'The basic structure of an index', 0),
(779, 107, 'Keeping a buffer of data in memory', 0),
(780, 107, 'Creating indexes with SQL', 0),
(781, 107, 'Indexing text', 0),
(782, 107, 'Indexing the web (how search engines work)', 0),
(783, 108, 'Mapping conceptual schema to a relational schema', 0),
(784, 108, 'Entity and referential integrity', 0),
(785, 108, 'Relational algebra and relational calculus', 0),
(786, 109, 'Overview of database languages', 0),
(787, 109, 'SQL (data definition, query formulation, update sublanguage, constraints, integrity)', 0),
(788, 109, 'QBE and 4th-generation environments', 0),
(789, 109, 'Embedding non-procedural queries in a procedural language', 0),
(790, 109, 'Introduction to Object Query Language', 0),
(791, 109, 'Stored procedures', 0),
(792, 110, 'Database design', 0),
(793, 110, 'Functional dependency', 0),
(794, 110, 'Decomposition of a schema; lossless-join and dependency-preservation properties of a decomposition', 0),
(795, 110, 'Candidate keys, superkeys, and closure of a set of attributes', 0),
(796, 110, 'Normal forms (1NF, 2NF, 3NF, BCNF)', 0),
(797, 110, 'Multivalued dependency (4NF)', 0),
(798, 110, 'Join dependency (PJNF, 5NF)', 0),
(799, 110, 'Representation theory', 0),
(800, 111, 'Transactions', 0),
(801, 111, 'Failure and recovery', 0),
(802, 111, 'Concurrency control', 0),
(803, 112, 'Distributed data storage', 0),
(804, 112, 'Distributed query processing', 0),
(805, 112, 'Distributed transaction model', 0),
(806, 112, 'Concurrency control', 0),
(807, 112, 'Homogeneous and heterogeneous solutions', 0),
(808, 112, 'Client-server', 0),
(809, 113, 'Storage and file structure', 0),
(810, 113, 'Indexed files', 0),
(811, 113, 'Hashed files', 0),
(812, 113, 'Signature files', 0),
(813, 113, 'B-trees', 0),
(814, 113, 'Files with dense index', 0),
(815, 113, 'Files with variable length records', 0),
(816, 113, 'Database efficiency and tuning', 0),
(817, 114, 'The usefulness of data mining', 0),
(818, 114, 'Associative and sequential patterns', 0),
(819, 114, 'Data clustering', 0),
(820, 114, 'Market basket analysis', 0),
(821, 114, 'Data cleaning', 0),
(822, 114, 'Data visualization', 0),
(823, 115, 'Characters, strings, coding, text', 0),
(824, 115, 'Documents, electronic publishing, markup, and markup languages', 0),
(825, 115, 'Tries, inverted files, PAT trees, signature files, indexing', 0),
(826, 115, 'Morphological analysis, stemming, phrases, stop lists', 0),
(827, 115, 'Term frequency distributions, uncertainty, fuzziness, weighting', 0),
(828, 115, 'Vector space, probabilistic, logical, and advanced models', 0),
(829, 115, 'Information needs, relevance, evaluation, effectiveness', 0),
(830, 115, 'Thesauri, ontologies, classification and categorization, metadata', 0),
(831, 115, 'Bibliographic information, bibliometrics, citations', 0),
(832, 115, 'Routing and (community) filtering', 0),
(833, 115, 'Search and search strategy, information seeking behavior, user modeling, feedback', 0),
(834, 115, 'Information summarization and visualization', 0),
(835, 115, 'Integration of citation, keyword, classification scheme, and other terms', 0),
(836, 115, 'Protocols and systems (including Z39.5OPACs, WWW engines, research systems)', 0),
(837, 116, 'Hypertext models (early history, web, Dexter, Amsterdam, HyTime)', 0),
(838, 116, 'Link services, engines, and (distributed) hypertext architectures', 0),
(839, 116, 'Nodes, composites, and anchors', 0),
(840, 116, 'Dimensions, units, locations, spans', 0),
(841, 116, 'Browsing, navigation, views, zooming', 0),
(842, 116, 'Automatic link generation', 0),
(843, 116, 'Presentation, transformations, synchronization', 0),
(844, 116, 'Authoring, reading, and annotation', 0),
(845, 116, 'Protocols and systems (including web, HTTP)', 0),
(846, 117, 'Devices, device drivers, control signals and protocols, DSPs', 0),
(847, 117, 'Applications, media editors, authoring systems, and authoring', 0),
(848, 117, 'Streams/structures, capture/represent/transform, spaces/domains, compression/coding', 0),
(849, 117, 'Content-based analysis, indexing, and retrieval of audio, images, and video', 0),
(850, 117, 'Presentation, rendering, synchronization, multi-modal integration/interfaces', 0),
(851, 117, 'Real-time delivery, quality of service, audio/video conferencing, video-on-demand', 0),
(852, 118, 'Digitization, storage, and interchange', 0),
(853, 118, 'Digital objects, composites, and packages', 0),
(854, 118, 'Metadata, cataloging, author submission', 0),
(855, 118, 'Naming, repositories, archives', 0),
(856, 118, 'Spaces (conceptual, geographical, 2/3D, VR)', 0),
(857, 118, 'Architectures (agents, buses, wrappers/mediators), interoperability', 0),
(858, 118, 'Services (searching, linking, browsing, and so forth)', 0),
(859, 118, 'Intellectual property rights management, privacy, protection (watermarking)', 0),
(860, 118, 'Archiving and preservation, integrity', 0),
(861, 119, 'Prehistory - the world before 1946', 0),
(862, 119, 'History of computer hardware, software, networking', 0),
(863, 119, 'Pioneers of computing', 0),
(864, 120, 'Introduction to the social implications of computing', 0),
(865, 120, 'Social implications of networked communication', 0),
(866, 120, 'Growth of, control of, and access to the Internet', 0),
(867, 120, 'Gender-related issues', 0),
(868, 120, 'Cultural issues', 0),
(869, 120, 'International issues', 0),
(870, 120, 'Accessibility issues (e.g. underrepresentation of minorities, women and the disabled in the computing profession)', 0),
(871, 120, 'Public policy issues (e.g. electronic voting)', 0),
(872, 121, 'Making and evaluating ethical arguments', 0),
(873, 121, 'Identifying and evaluating ethical choices', 0),
(874, 121, 'Understanding the social context of design', 0),
(875, 121, 'Identifying assumptions and values', 0),
(876, 122, 'Community values and the laws by which we live', 0),
(877, 122, 'The nature of professionalism (including care, attention and discipline, fiduciary responsibility, and mentoring)', 0),
(878, 122, 'Keeping up-to-date as a professional (in terms of knowledge, tools, skills, legal and professional framework as', 0),
(879, 122, 'well as the ability to self-assess and computer fluency)', 0),
(880, 122, 'Various forms of professional credentialing and the advantages and disadvantages', 0),
(881, 122, 'The role of the professional in public policy', 0),
(882, 122, 'Maintaining awareness of consequences', 0),
(883, 122, 'Ethical dissent and whistle-blowing', 0),
(884, 122, 'Codes of ethics, conduct, and practice (IEEE, ACM, SE, AITP, and so forth)', 0),
(885, 122, 'Dealing with harassment and discrimination', 0),
(886, 122, '"Acceptable use" policies for computing in the workplacE', 0),
(887, 122, 'Healthy computing environment (ergonomics)', 0),
(888, 123, 'Historical examples of software risks (such as the Therac-case) Implications of software complexity', 0);
INSERT INTO `topics` (`id`, `unit_id`, `name`, `topic_type_id`) VALUES
(889, 123, 'Risk assessment and risk management; risk removal, risk reduction and risk control', 0),
(890, 124, 'Physical security', 0),
(891, 124, 'Physical access controls', 0),
(892, 124, 'Personnel access controls', 0),
(893, 124, 'Operational security', 0),
(894, 124, 'Security policies for systems/networks', 0),
(895, 124, 'Recovery and response', 0),
(896, 124, 'Dealing with problems (both technical and human)', 0),
(897, 125, 'Foundations of intellectual property', 0),
(898, 125, 'Copyrights, patents, and trade secrets', 0),
(899, 125, 'Software piracy', 0),
(900, 125, 'Software patents', 0),
(901, 125, 'Transnational issues concerning intellectual property', 0),
(902, 126, 'Ethical and legal basis for privacy protection', 0),
(903, 126, 'Ethical and legal framework for freedom of information', 0),
(904, 126, 'Privacy implications of database systems (e.g. data gathering, storage, and sharing, massive data collecting,', 0),
(905, 126, 'computer surveillance systems)', 0),
(906, 126, 'Technological strategies for privacy protection', 0),
(907, 126, 'Freedom of expression in cyberspace', 0),
(908, 126, 'International and intercultural implications', 0),
(909, 127, 'History and examples of computer crime', 0),
(910, 127, '"Cracking" ("hacking") and its effects', 0),
(911, 127, 'Viruses, worms, and Trojan horses', 0),
(912, 127, 'Identity theft', 0),
(913, 127, 'Crime prevention strategies', 0),
(914, 128, 'Monopolies and their economic implications', 0),
(915, 128, 'Effect of skilled labor supply and demand on the quality of computing products', 0),
(916, 128, 'Pricing strategies in the computing domain', 0),
(917, 128, 'The phenomenon of outsourcing and offshoring; impacts on employment and on economics', 0),
(918, 128, 'Differences in access to computing resources and the possible effects thereof', 0),
(919, 128, 'Environmental sustainability', 0),
(920, 129, 'Philosophical frameworks, particularly utilitarianism and deontological theories', 0),
(921, 129, 'Problems of ethical relativism', 0),
(922, 129, 'Scientific ethics in historical perspective', 0),
(923, 129, 'Differences in scientific and philosophical approaches', 0),
(924, 130, 'Fundamental design concepts and principles', 0),
(925, 130, 'The role and the use of contracts', 0),
(926, 130, 'Design patterns', 0),
(927, 130, 'Software architecture', 0),
(928, 130, 'Structured design', 0),
(929, 130, 'Object-oriented analysis and design', 0),
(930, 130, 'Component-level design', 0),
(931, 130, 'Design qualities', 0),
(932, 130, 'Internal including low coupling, high cohesion, information hiding, efficiency', 0),
(933, 130, 'External including reliability, maintainability, usability, performance', 0),
(934, 130, 'Other approaches: data-structured centered, aspect oriented, function oriented, service oriented, agile', 0),
(935, 130, 'Design for reuse', 0),
(936, 130, 'Use of open-source materials', 0),
(937, 131, 'Programming using APIs', 0),
(938, 131, 'Design of APIs', 0),
(939, 131, 'Class browsers and related tools', 0),
(940, 131, 'Debugging in the API environment Introduction to component-based computing', 0),
(941, 131, 'Introduction to Component-based Computing', 0),
(942, 132, 'Programming environments', 0),
(943, 132, 'Requirements analysis and design modeling tools', 0),
(944, 132, 'Testing tools including static and dynamic analysis tools', 0),
(945, 132, 'Tools for source control, and their use in particular in team-work', 0),
(946, 132, 'Configuration management and version control tools', 0),
(947, 132, 'Tool integration mechanisms', 0),
(948, 133, 'Software life-cycle and process models', 0),
(949, 133, 'Software process capability maturity models', 0),
(950, 133, 'Approaches to process improvement', 0),
(951, 133, 'Process assessment models', 0),
(952, 133, 'Software process measurements', 0),
(953, 134, 'Systems level considerations', 0),
(954, 134, 'Software requirements elicitation', 0),
(955, 134, 'Requirements analysis modeling techniques', 0),
(956, 134, 'Functional and non-functional requirements', 0),
(957, 134, 'Acceptability of certainty / uncertainty considerations regarding software / system behaviour', 0),
(958, 134, 'Prototyping', 0),
(959, 134, 'Basic concepts of formal specification techniques', 0),
(960, 135, 'Distinguishing between verification and validation', 0),
(961, 135, 'Static approaches and dynamic approaches', 0),
(962, 135, 'Validation planning; documentation for validation', 0),
(963, 135, 'Different kinds of testing – human computer interface, usability, reliability, security, conforman to specification', 0),
(964, 135, 'Testing fundamentals, including test plan creation and test case generation black-box and white-box testing techniques', 0),
(965, 135, 'Defect seeding', 0),
(966, 135, 'Unit, integration, validation, and system testing', 0),
(967, 135, 'Object-oriented testing; systems testing', 0),
(968, 135, 'Measurements: process, design, program', 0),
(969, 135, 'Verification and validation of non-code (documentation, help files, training materials)', 0),
(970, 135, 'Fault logging, fault tracking and technical support for such activities', 0),
(971, 135, 'Regression testing', 0),
(972, 135, 'Inspections, reviews, audits', 0),
(973, 136, 'Software maintenance', 0),
(974, 136, 'Characteristics of maintainable software', 0),
(975, 136, 'Reengineering Legacy systems', 0),
(976, 136, 'Refactoring', 0),
(977, 136, 'Software reuse', 0),
(978, 137, 'Team management: Team processes', 0),
(979, 137, 'Team management: Team organization and decision-making', 0),
(980, 137, 'Team management: Roles and responsibilities in a software team', 0),
(981, 137, 'Team management: Role identification and assignment', 0),
(982, 137, 'Team management: Project tracking', 0),
(983, 137, 'Team management: Team problem resolution', 0),
(984, 137, 'Project scheduling', 0),
(985, 137, 'Software measurement and estimation techniques', 0),
(986, 137, 'Risk analysis: The issue of security', 0),
(987, 137, 'Risk analysis: High integrity systems, safety critical systems', 0),
(988, 137, 'Risk analysis: The role of risk in the life cycle', 0),
(989, 137, 'Software quality assurance: The role of measurements', 0),
(990, 137, 'Software configuration management and version control; release management', 0),
(991, 137, 'Project management tools', 0),
(992, 137, 'Software process models and process measurements', 0),
(993, 138, 'Fundamentals: The definition and nature of components', 0),
(994, 138, 'Fundamentals: Components and interfaces', 0),
(995, 138, 'Fundamentals: Interfaces as contracts', 0),
(996, 138, 'Fundamentals: The benefits of components', 0),
(997, 138, 'Fundamentals: Basic techniques', 0),
(998, 138, 'Fundamentals: Component design and assembly', 0),
(999, 138, 'Fundamentals: Relationship with the client-server model and with patterns', 0),
(1000, 138, 'Fundamentals: Use of objects and object lifecycle services', 0),
(1001, 138, 'Fundamentals: Use of object brokers', 0),
(1002, 138, 'Fundamentals: Marshalling', 0),
(1003, 138, 'Applications (including the use of mobile components)', 0),
(1004, 138, 'Patterns as used in analysis and design; context of use including enterprise architectures', 0),
(1005, 138, 'Architecture of component-based systems', 0),
(1006, 138, 'Component-oriented design', 0),
(1007, 138, 'Application frameworks', 0),
(1008, 138, 'Event handling: detection, notification, and response', 0),
(1009, 138, 'Middleware: The object-oriented paradigm within middleware', 0),
(1010, 138, 'Middleware: Object request brokers', 0),
(1011, 138, 'Middleware: Transaction processing monitors', 0),
(1012, 138, 'Middleware: Workflow systems', 0),
(1013, 138, 'Middleware: State-of-the-art tools', 0),
(1014, 139, 'Formal methods concepts', 0),
(1015, 139, 'Formal specification languages', 0),
(1016, 139, 'Model checking', 0),
(1017, 139, 'Executable and non-executable specifications', 0),
(1018, 139, 'Pre and post assertions', 0),
(1019, 139, 'Formal verification', 0),
(1020, 139, 'Tools in support of formal methods', 0),
(1021, 140, 'Software reliability models', 0),
(1022, 140, 'Redundancy and fault tolerance', 0),
(1023, 140, 'Defect classification', 0),
(1024, 140, 'Probabilistic methods of analysis', 0),
(1025, 141, 'Real-time systems', 0),
(1026, 141, 'Client-server systems', 0),
(1027, 141, 'Distributed systems', 0),
(1028, 141, 'Parallel systems', 0),
(1029, 141, 'Web-based systems', 0),
(1030, 141, 'High-integrity systems', 0),
(1031, 142, 'Definition of terms: in security, vulnerability, threat, security breach; in safety, hazard.', 0),
(1032, 142, 'The concept of risk; hazard and risk identification', 0),
(1033, 142, 'Risk analysis including evaluation', 0),
(1034, 142, 'Need for a system-wide approach including hazards associated with tools', 0),
(1035, 142, 'Risk and immature technologies', 0),
(1036, 142, 'Cost/benefit analysis', 0),
(1037, 142, 'Principles of risk management', 0),
(1038, 143, 'Defensive programming: Principles of secure design and coding:', 0),
(1039, 143, 'Defensive programming: Principle of least privilege', 0),
(1040, 143, 'Defensive programming: Principle of fail-safe defaults', 0),
(1041, 143, 'Principle of psychological acceptability: How to detect potential security problems in programs', 0),
(1042, 143, 'Principle of psychological acceptability: Buffer and other types of overflows', 0),
(1043, 143, 'Principle of psychological acceptability: Race conditions', 0),
(1044, 143, 'Principle of psychological acceptability: Improper initialization, including choice of privileges', 0),
(1045, 143, 'Principle of psychological acceptability: Checking input', 0),
(1046, 143, 'Principle of psychological acceptability: Assuming success and correctness', 0),
(1047, 143, 'Principle of psychological acceptability: Validating assumptions', 0),
(1048, 143, 'How to document security considerations in using a program', 0),
(1049, 144, 'Definition of simulation and modeling; relationship between simulation and modeling', 0),
(1050, 144, 'Purpose including benefits and limitations: role - addressing performance, optimization; supporting decision making, forecasting, safety considerations; for training and education', 0),
(1051, 144, 'Important application areas: healthcare (including assisting with diagnostics); economics and finance; classroom of the future; training and education; city and urban simulations; simulation in science and in engineering; games; military simulation', 0),
(1052, 144, 'Different kinds of simulations - physical, human in the loop, interaction, computer, virtual reality', 0),
(1053, 144, 'The simulation process - sound basis, identification of key characteristics or behaviors, simplifying assumptions; validation of outcomes. Model building: use of mathematical formula or equation, graphs, constraints. Methodologies and techniques. Use of time stepping for dynamic systems.', 0),
(1054, 144, 'Theoretical considerations; Monte Carlo methods, stochastic processes, queuing theory', 0),
(1055, 144, 'Technologies in support of simulation and modeling: graphics processors; Haptic feedback devices. Human computer interaction considerations.', 0),
(1056, 144, 'Assessing and evaluating simulations in a variety of contexts.', 0),
(1057, 144, 'Software in support of simulation and modeling; packages, languages', 0),
(1058, 145, 'Linear programming: Integer programming', 0),
(1059, 145, 'Linear programming: The Simplex method', 0),
(1060, 145, 'Probabilistic modeling', 0),
(1061, 145, 'Queuing theory: Petri nets', 0),
(1062, 145, 'Queuing theory: Markov models and chains', 0),
(1063, 145, 'Optimization', 0),
(1064, 145, 'Network analysis and routing algorithms', 0),
(1065, 145, 'Prediction and estimation: Decision analysis', 0),
(1066, 145, 'Prediction and estimation: Forecasting', 0),
(1067, 145, 'Prediction and estimation: Risk management', 0),
(1068, 145, 'Prediction and estimation: Econometrics, microeconomics', 0),
(1069, 145, 'Prediction and estimation: Sensitivity analysis', 0),
(1070, 145, 'Dynamic programming', 0),
(1071, 145, 'Sample applications', 0),
(1072, 145, 'Software tools', 0),
(1073, 146, 'Overview of topics', 0),
(1074, 146, 'Models of computation', 0),
(1075, 146, 'Kinds of computation', 0),
(1076, 146, 'Task parallelism', 0),
(1077, 146, 'Data parallelism', 0),
(1078, 146, 'Event parallelism', 0),
(1079, 146, 'Properties of computation', 0),
(1080, 146, 'Bandwidth', 0),
(1081, 146, 'Latency', 0),
(1082, 146, 'Scalability', 0),
(1083, 146, 'Granularity', 0),
(1084, 146, 'Parallel architectures', 0),
(1085, 146, 'Processor architectures including multi-core', 0),
(1086, 146, 'Memory systems for high performance', 0),
(1087, 146, 'Caching and coherence', 0),
(1088, 146, 'Clusters', 0),
(1089, 146, 'Parallel programming paradigms', 0),
(1090, 146, 'Threading', 0),
(1091, 146, 'Message passing', 0),
(1092, 146, 'Event driven techniques', 0),
(1093, 146, 'Parallel software architectures: MapReduce', 0),
(1094, 146, 'Grid computing', 0),
(1095, 146, 'Open community distributed computing (BOINC, SETI, ...)', 0),
(1132, 152, 'Esta tiene un tÃ³pico', 0),
(1133, 153, 'HOla', 0),
(1134, 153, 'amifos', 0),
(1135, 156, 'dfsfsfdsfdsfdfd', 0),
(1136, 164, 'FDSGSFD', 3),
(1137, 165, 'DVFDVFD', 1),
(1138, 166, 't4', 1),
(1139, 167, 'sadsfdfds', 1),
(1140, 168, 'Uno', 1),
(1141, 168, 'Dos', 2),
(1142, 168, 'Tres', 3),
(1143, 168, 'Cuatro', 1),
(1144, 169, 'Un tÃ³pico', 1),
(1145, 169, 'Dos tÃ³picos', 2),
(1146, 169, 'Tres', 2),
(1147, 169, 'Cuatro', 3),
(1148, 172, 'Uno', 1),
(1149, 172, 'Dos', 1),
(1150, 172, 'Tres', 1),
(1151, 173, 'dvfdv', 1),
(1152, 173, 'dfvsfd', 2),
(1153, 173, 'fddvfdd', 2),
(1154, 173, 'fdvddv', 1),
(1155, 173, 'Pancho', 3),
(1156, 173, 'Pancho 2', 3),
(1157, 173, 'Mi topico', 1),
(1158, 173, 'Otro tÃ³pico', 2),
(1159, 173, 'Pancho', 1),
(1185, 183, 'Differences among best, expected, and worst case behaviors of an algorithm', 1),
(1186, 183, 'Asymptotic analysis of upper and expected complexity bounds', 1),
(1187, 183, 'Big O notation: formal definition', 1),
(1188, 183, 'Complexity classes, such as constant, logarithmic, linear, quadratic, and exponential', 1),
(1189, 183, 'Empirical measurements of performance', 1),
(1190, 183, 'Time and space trade-offs in algorithms', 1),
(1191, 183, 'Big O notation: use', 2),
(1192, 183, 'Little o, big omega and big theta notation', 2),
(1193, 183, 'Recurrence relations', 2),
(1194, 183, 'Analysis of iterative and recursive algorithms', 2),
(1195, 183, 'Some version of a Master Theorem', 2),
(1196, 184, 'Brute-force algorithms', 1),
(1197, 184, 'Greedy algorithms', 1),
(1198, 184, 'Divide-and-conquer (cross-reference SDF/Algorithms and Design/Problem-solving strategies)', 1),
(1199, 184, 'Recursive backtracking', 1),
(1200, 184, 'Dynamic Programming', 1),
(1201, 184, 'Branch-and-bound', 2),
(1202, 184, 'Heuristics', 2),
(1203, 184, 'Reduction: transform-and-conquer', 2),
(1204, 185, 'Simple numerical algorithms, such as computing the average of a list of numbers, finding the min, max, and mode in a list, approximating the square root of a number, or finding the greatest common divisor', 1),
(1205, 185, 'Sequential and binary search algorithms', 1),
(1206, 185, 'Worst case quadratic sorting algorithms (selection, insertion)', 1),
(1207, 185, 'Worst or average case O(N log N) sorting algorithms (quicksort, heapsort, mergesort)', 1),
(1208, 185, 'Hash tables, including strategies for avoiding and resolving collisions', 1),
(1209, 185, 'Binary search trees: Common operations on binary search trees such as select min, max, insert, delete, iterate over tree', 1),
(1210, 185, 'Graphs and graph algorithms: Representations of graphs (e.g., adjacency list, adjacency matrix)', 1),
(1211, 185, 'Graphs and graph algorithms: Depth- and breadth-first traversals', 1),
(1212, 185, 'Heaps', 2),
(1213, 185, 'Graphs and graph algorithms: Shortest-path algorithms (Dijkstraâ€™s and Floydâ€™s algorithms)', 2),
(1214, 185, 'Graphs and graph algorithms: Minimum spanning tree (Primâ€™s and Kruskalâ€™s algorithms)', 1),
(1215, 185, 'Pattern matching and string/text algorithms (e.g., substring matching, regular expression matching, longest common subsequence algorithms)', 1),
(1216, 186, 'Finite-state machines', 1),
(1217, 186, 'Regular expressions', 1),
(1218, 186, 'The halting problem', 1),
(1219, 186, 'Context-free grammars (cross-reference PL/Syntax Analysis)', 2),
(1220, 186, 'Introduction to the P and NP classes and the P vs NP problem', 2),
(1221, 186, 'Introduction to the NP-complete class and exemplary NP-complete problems (e.g., SAT, Knapsack)', 2),
(1222, 187, 'Review definitions of the classes P and NP; introduce P-space and EXP', 3),
(1223, 187, 'NP-completeness (Cookâ€™s theorem)', 3),
(1224, 187, 'Classic NP-complete problems', 3),
(1225, 187, 'Reduction Techniques', 3),
(1230, 189, 'Sets and languages', 3),
(1231, 189, 'Regular languages: Review of deterministic finite automata (DFAs)', 3),
(1232, 189, 'Regular languages: Nondeterministic finite automata (NFAs)', 3),
(1233, 189, 'Regular languages: Equivalence of DFAs and NFAs', 3),
(1234, 189, 'Regular languages: Review of regular expressions; their equivalence to finite automata', 3),
(1235, 189, 'Regular languages: Closure properties', 3),
(1236, 189, 'Regular languages: Proving languages non-regular, via the pumping lemma or alternative means', 3),
(1237, 189, 'Context-free languages: Push-down automata (PDAs)', 3),
(1238, 189, 'Context-free languages: Relationship of PDAs and context-free grammars', 3),
(1239, 189, 'Context-free languages: Properties of context-free languages', 3),
(1240, 189, 'Turing machines, or an equivalent formal model of universal computation', 3),
(1241, 189, 'Nondeterministic Turing machines', 3),
(1242, 189, 'Chomsky hierarchy', 3),
(1243, 189, 'The Church-Turing thesis', 3),
(1244, 189, 'Computability', 3),
(1245, 189, 'Riceâ€™s Theorem', 3),
(1246, 189, 'Examples of uncomputable functions', 3),
(1247, 189, 'Implications of uncomputability', 3),
(1248, 190, 'Balanced trees (e.g., AVL trees, red-black trees, splay trees, treaps)', 3),
(1249, 190, 'Graphs (e.g., topological sort, finding strongly connected components, matching)', 3),
(1250, 190, 'Advanced data structures (e.g., B-trees, Fibonacci heaps)', 3),
(1251, 190, 'String-based data structures and algorithms (e.g., suffix arrays, suffix trees, tries)', 3),
(1252, 190, 'Network flows (e.g., max flow [Ford-Fulkerson algorithm], max flow â€“ min cut, maximum bipartite  matching)', 3),
(1253, 190, 'Linear Programming (e.g., duality, simplex method, interior point algorithms)', 3),
(1254, 190, 'Number-theoretic algorithms (e.g., modular arithmetic, primality testing, integer factorization)', 3),
(1255, 190, 'Geometric algorithms (e.g., points, line segments, polygons [properties, intersections], finding convex hull, spatial decomposition, collision detection, geometric search/proximity)', 3),
(1256, 190, 'Randomized algorithms', 3),
(1257, 190, 'Approximation algorithms', 3),
(1258, 190, 'Amortized analysis', 3),
(1259, 190, 'Probabilistic analysis', 3),
(1260, 190, 'Online algorithms and competitive analysis', 3);

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `topic_types`
--

CREATE TABLE IF NOT EXISTS `topic_types` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=4 ;

--
-- Volcado de datos para la tabla `topic_types`
--

INSERT INTO `topic_types` (`id`, `name`) VALUES
(1, 'Core Tier-1'),
(2, 'Core Tier-2'),
(3, 'Elective');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `types`
--

CREATE TABLE IF NOT EXISTS `types` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(250) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=3 ;

--
-- Volcado de datos para la tabla `types`
--

INSERT INTO `types` (`id`, `name`) VALUES
(1, 'Obligatorio'),
(2, 'Electivo');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `units`
--

CREATE TABLE IF NOT EXISTS `units` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `name` varchar(250) NOT NULL,
  `knowledge_area_id` int(11) NOT NULL,
  `hours` int(11) NOT NULL,
  `core_tier_1_hours` int(11) NOT NULL,
  `core_tier_2_hours` int(11) NOT NULL,
  `includes_electives` varchar(10) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=191 ;

--
-- Volcado de datos para la tabla `units`
--

INSERT INTO `units` (`id`, `user_id`, `name`, `knowledge_area_id`, `hours`, `core_tier_1_hours`, `core_tier_2_hours`, `includes_electives`) VALUES
(1, 0, 'Functions Relations And Sets', 1, 6, 0, 0, '0'),
(2, 0, 'Basic Logic', 1, 10, 0, 0, '0'),
(3, 0, 'Proof Techniques', 1, 12, 0, 0, '0'),
(4, 0, 'Basics Of Counting', 1, 5, 0, 0, '0'),
(5, 0, 'Graphs And Trees', 1, 4, 0, 0, '0'),
(6, 0, 'Discrete Probability', 1, 6, 0, 0, '0'),
(7, 0, 'Fundamental Constructs', 3, 9, 0, 0, '0'),
(8, 0, 'Algorithmic Problem Solving', 3, 6, 0, 0, '0'),
(9, 0, 'Data Structures', 3, 10, 0, 0, '0'),
(10, 0, 'Recursion', 3, 4, 0, 0, '0'),
(11, 0, 'Event Driven Programming', 3, 4, 0, 0, '0'),
(12, 0, 'Object Oriented', 3, 8, 0, 0, '0'),
(13, 0, 'Foundations Information Security', 3, 4, 0, 0, '0'),
(14, 0, 'Secure Programming', 3, 2, 0, 0, '0'),
(15, 0, 'Basic Analysis', 5, 4, 0, 0, '0'),
(16, 0, 'Algorithmic Strategies', 5, 6, 0, 0, '0'),
(17, 0, 'Fundamental Algorithms', 5, 12, 0, 0, '0'),
(18, 0, 'Distributed Algorithms', 5, 3, 0, 0, '0'),
(19, 0, 'Basic Computability', 5, 6, 0, 0, '0'),
(20, 0, 'P versus NP', 5, 0, 0, 0, '0'),
(21, 0, 'Automata Theory', 5, 0, 0, 0, '0'),
(22, 0, 'Advanced Analysis', 5, 0, 0, 0, '0'),
(23, 0, 'Cryptographic Algorithms', 5, 0, 0, 0, '0'),
(24, 0, 'Geometric Algorithms', 5, 0, 0, 0, '0'),
(25, 0, 'Parallel Algorithms', 5, 0, 0, 0, '0'),
(26, 0, 'Digital Logic And Data Representation', 7, 7, 0, 0, '0'),
(27, 0, 'Computer Architecture And Organization', 7, 9, 0, 0, '0'),
(28, 0, 'Interfacing And I/O Strategies', 7, 3, 0, 0, '0'),
(29, 0, 'Memory Architecture', 7, 5, 0, 0, '0'),
(30, 0, 'Functional Organization', 7, 6, 0, 0, '0'),
(31, 0, 'Multiprocessing', 7, 6, 0, 0, '0'),
(32, 0, 'Performance Enhancements', 7, 0, 0, 0, '0'),
(33, 0, 'Distributed Architectures', 7, 0, 0, 0, '0'),
(34, 0, 'Devices', 7, 0, 0, 0, '0'),
(35, 0, 'Directions In Computing', 7, 0, 0, 0, '0'),
(36, 0, 'Overview Of Operating Systems', 9, 2, 0, 0, '0'),
(37, 0, 'Operating System Principles', 9, 2, 0, 0, '0'),
(38, 0, 'Concurrency', 9, 6, 0, 0, '0'),
(39, 0, 'Scheduling and Dispatch', 9, 3, 0, 0, '0'),
(40, 0, 'Memory Management', 9, 3, 0, 0, '0'),
(41, 0, 'Security And Protection', 9, 2, 0, 0, '0'),
(42, 0, 'Device Management', 9, 0, 0, 0, '0'),
(43, 0, 'File Systems', 9, 0, 0, 0, '0'),
(44, 0, 'Real Time And Embedded Systems', 9, 0, 0, 0, '0'),
(45, 0, 'Fault Tolerance', 9, 0, 0, 0, '0'),
(46, 0, 'System Performance Evaluation', 9, 0, 0, 0, '0'),
(47, 0, 'Scripting', 9, 0, 0, 0, '0'),
(48, 0, 'Digital Forensics', 9, 0, 0, 0, '0'),
(49, 0, 'Security Models', 9, 0, 0, 0, '0'),
(50, 0, 'Introduction', 11, 2, 0, 0, '0'),
(51, 0, 'Network Communication', 11, 7, 0, 0, '0'),
(52, 0, 'Network Security', 11, 6, 0, 0, '0'),
(53, 0, 'Web Organization', 11, 0, 0, 0, '0'),
(54, 0, 'Networked Applications', 11, 0, 0, 0, '0'),
(55, 0, 'Network Management', 11, 0, 0, 0, '0'),
(56, 0, 'Compression', 11, 0, 0, 0, '0'),
(57, 0, 'Multimedia Technologies', 11, 0, 0, 0, '0'),
(58, 0, 'Mobile Computing', 11, 0, 0, 0, '0'),
(59, 0, 'Overview', 13, 2, 0, 0, '0'),
(60, 0, 'Virtual Machines', 13, 1, 0, 0, '0'),
(61, 0, 'Basic Language Translation', 13, 2, 0, 0, '0'),
(62, 0, 'Declarations And Types', 13, 3, 0, 0, '0'),
(63, 0, 'Abstraction Mechanisms', 13, 3, 0, 0, '0'),
(64, 0, 'Object Oriented Programming', 13, 10, 0, 0, '0'),
(65, 0, 'Functional Programming', 13, 0, 0, 0, '0'),
(66, 0, 'Language Translation Systems', 13, 0, 0, 0, '0'),
(67, 0, 'Type Systems', 13, 0, 0, 0, '0'),
(68, 0, 'Programming Language Semantics', 13, 0, 0, 0, '0'),
(69, 0, 'Programming Language Design', 13, 0, 0, 0, '0'),
(70, 0, 'Foundations', 2, 6, 0, 0, '0'),
(71, 0, 'Building GUI Interfaces', 2, 2, 0, 0, '0'),
(72, 0, 'User Ccentered Software Evaluation', 2, 0, 0, 0, '0'),
(73, 0, 'User Centered Software Development', 2, 0, 0, 0, '0'),
(74, 0, 'GUI Design', 2, 0, 0, 0, '0'),
(75, 0, 'GUI Programming', 2, 0, 0, 0, '0'),
(76, 0, 'Multimedia And Multimodal Systems', 2, 0, 0, 0, '0'),
(77, 0, 'Collaboration And Communication', 2, 0, 0, 0, '0'),
(78, 0, 'Interaction Design For New Environments', 2, 0, 0, 0, '0'),
(79, 0, 'Human Factors And Security', 2, 0, 0, 0, '0'),
(80, 0, 'Fundamental Techniques', 4, 2, 0, 0, '0'),
(81, 0, 'Graphic Systems', 4, 1, 0, 0, '0'),
(82, 0, 'Graphic Communication', 4, 0, 0, 0, '0'),
(83, 0, 'Geometric Modeling', 4, 0, 0, 0, '0'),
(84, 0, 'Basic Rendering', 4, 0, 0, 0, '0'),
(85, 0, 'Advanced Rendering', 4, 0, 0, 0, '0'),
(86, 0, 'Advanced Techniques', 4, 0, 0, 0, '0'),
(87, 0, 'Computer Animation', 4, 0, 0, 0, '0'),
(88, 0, 'Visualization', 4, 0, 0, 0, '0'),
(89, 0, 'Virtual Reality', 4, 0, 0, 0, '0'),
(90, 0, 'Computer Vision', 4, 0, 0, 0, '0'),
(91, 0, 'Computational Geometry', 4, 0, 0, 0, '0'),
(92, 0, 'Game Engine Programming', 4, 0, 0, 0, '0'),
(93, 0, 'Fundamental Issues', 6, 1, 0, 0, '0'),
(94, 0, 'Basic Search Strategies', 6, 5, 0, 0, '0'),
(95, 0, 'Knowledge Based Reasoning', 6, 4, 0, 0, '0'),
(96, 0, 'Advanced Search', 6, 0, 0, 0, '0'),
(97, 0, 'Advanced Reasoning', 6, 0, 0, 0, '0'),
(98, 0, 'Agents', 6, 0, 0, 0, '0'),
(99, 0, 'Natural Language Processing', 6, 0, 0, 0, '0'),
(100, 0, 'Machine Learning', 6, 0, 0, 0, '0'),
(101, 0, 'Planning Systems', 6, 0, 0, 0, '0'),
(102, 0, 'Robotics', 6, 0, 0, 0, '0'),
(103, 0, 'Perception', 6, 0, 0, 0, '0'),
(104, 0, 'Information Models', 8, 4, 0, 0, '0'),
(105, 0, 'Database Systems', 8, 3, 0, 0, '0'),
(106, 0, 'Data Modeling', 8, 4, 0, 0, '0'),
(107, 0, 'Indexing', 8, 0, 0, 0, '0'),
(108, 0, 'Relational Databases', 8, 0, 0, 0, '0'),
(109, 0, 'Query Languages', 8, 0, 0, 0, '0'),
(110, 0, 'Relational Database Design', 8, 0, 0, 0, '0'),
(111, 0, 'Transaction Processing', 8, 0, 0, 0, '0'),
(112, 0, 'Distributed Databases', 8, 0, 0, 0, '0'),
(113, 0, 'Physical Database Design', 8, 0, 0, 0, '0'),
(114, 0, 'Data Mining', 8, 0, 0, 0, '0'),
(115, 0, 'Information Storage And Retrieval', 8, 0, 0, 0, '0'),
(116, 0, 'Hypermedia', 8, 0, 0, 0, '0'),
(117, 0, 'Multimedia Systems', 8, 0, 0, 0, '0'),
(118, 0, 'Digital Libraries', 8, 0, 0, 0, '0'),
(119, 0, 'History Of Computing', 10, 1, 0, 0, '0'),
(120, 0, 'Social Context', 10, 3, 0, 0, '0'),
(121, 0, 'Analytical Tools', 10, 2, 0, 0, '0'),
(122, 0, 'Professional Ethics', 10, 3, 0, 0, '0'),
(123, 0, 'Risks', 10, 2, 0, 0, '0'),
(124, 0, 'Intellectual Property', 10, 3, 0, 0, '0'),
(125, 0, 'Privacy And Civil Liberties', 10, 2, 0, 0, '0'),
(126, 0, 'Security Operations', 10, 0, 0, 0, '0'),
(127, 0, 'Computer Crime', 10, 0, 0, 0, '0'),
(128, 0, 'Economics Of Computing', 10, 0, 0, 0, '0'),
(129, 0, 'Philosophical Frameworks', 10, 0, 0, 0, '0'),
(130, 0, 'Software Design', 12, 8, 0, 0, '0'),
(131, 0, 'Using APIs', 12, 5, 0, 0, '0'),
(132, 0, 'Tools And Environments', 12, 3, 0, 0, '0'),
(133, 0, 'Software Processes', 12, 2, 0, 0, '0'),
(134, 0, 'Requirements Specifications', 12, 4, 0, 0, '0'),
(135, 0, 'Software Verification Validation', 12, 3, 0, 0, '0'),
(136, 0, 'Software Evolution', 12, 3, 0, 0, '0'),
(137, 0, 'Software Project Management', 12, 3, 0, 0, '0'),
(138, 0, 'Component Based Computing', 12, 0, 0, 0, '0'),
(139, 0, 'Formal Methods', 12, 0, 0, 0, '0'),
(140, 0, 'Software Reliability', 12, 0, 0, 0, '0'),
(141, 0, 'Specialized Systems', 12, 0, 0, 0, '0'),
(142, 0, 'Risk Assessment', 12, 0, 0, 0, '0'),
(143, 0, 'Robust And Security-Enhanced Programming', 12, 0, 0, 0, '0'),
(144, 0, 'Modeling And Simulation', 14, 0, 0, 0, '0'),
(145, 0, 'Operations Research', 14, 0, 0, 0, '0'),
(146, 0, 'Parallel Computation', 14, 0, 0, 0, '0'),
(147, 7, 'asdsafsdfsdasdfds', 32, 0, 1, 2, 'Yes'),
(148, 7, 'asdsafsdfsdasdfds', 32, 0, 1, 2, 'Yes'),
(149, 7, 'Pepe', 31, 0, 4, 3, 'Yes'),
(150, 7, 'Pancho', 33, 0, 2, 2, 'Yes'),
(151, 7, 'Nueva Unidad', 34, 0, 1, 3, 'Yes'),
(152, 7, 'Segunda Unidad de esta nota', 34, 0, 2, 3, 'Yes'),
(153, 7, 'Una tercera unidad', 34, 0, 1, 3, 'Yes'),
(155, 7, 'sfasfasdfdas', 62, 0, 3, 3, 'Yes'),
(156, 7, 'asfsafsdsdsdsad', 62, 0, 4, 4, 'Yes'),
(163, 7, 'Nueva unidad', 1, 0, 28, 8, 'Yes'),
(164, 7, 'Pepe', 1, 0, 1, 5, 'Yes'),
(165, 7, 'SDFDADFADFAD', 1, 0, 3, 3, 'Yes'),
(166, 7, 'SDDFSSFDSFDSFD', 1, 0, 2, 3, 'Yes'),
(167, 7, 'sdfdsdfsds', 1, 0, 2, 3, 'Yes'),
(169, 7, 'Nombre de la unidad nueva', 1, 0, 2, 2, 'Yes'),
(183, 7, 'Basic Analysis', 18, 0, 2, 2, ''),
(184, 7, 'Algorithmic Strategies', 18, 0, 5, 1, ''),
(185, 7, 'Fundamental Data Structures and Algorithms', 18, 0, 9, 3, ''),
(186, 7, 'Basic Automata Computability and Complexity', 18, 0, 3, 3, ''),
(187, 7, 'Advanced Computational Complexity', 18, 0, 0, 0, ''),
(189, 7, 'Advanced Automata Theory and Computability', 18, 0, 0, 0, ''),
(190, 7, 'Advanced Data Structures Algorithms and Analysis', 18, 0, 0, 0, '');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `users`
--

CREATE TABLE IF NOT EXISTS `users` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `username` varchar(50) DEFAULT NULL,
  `password` varchar(50) DEFAULT NULL,
  `display_name` varchar(250) NOT NULL,
  `role` varchar(20) DEFAULT NULL,
  `created` datetime DEFAULT NULL,
  `modified` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=8 ;

--
-- Volcado de datos para la tabla `users`
--

INSERT INTO `users` (`id`, `username`, `password`, `display_name`, `role`, `created`, `modified`) VALUES
(1, 'gmendez', 'e7cbdfdcadcbfb9b791a8f55a3e0cef97bc5025b', 'Gonzalo Gabriel Méndez', 'admin', '2013-02-07 20:55:17', '2013-02-07 20:55:17'),
(3, 'user1', '938b5dc4fa28ca25f4deacc9183af4d829eab7c3', 'Diana Jaramillo', 'author', '2013-02-07 21:07:03', '2013-02-07 21:07:03'),
(4, 'user2', 'cb3b0f2964d0609f3e48883812b3553a104c7e43', 'Daniel Méndez Cobeña', 'admin', '2013-02-07 21:10:07', '2013-02-07 21:10:07'),
(5, 'admin', 'b72cebf51055ecf6c8ceb702b797ffa76273fe82', '', 'admin', '2013-02-08 19:00:34', '2013-02-08 19:00:34'),
(6, 'Pepe MÃ©ndez', '39e8c30bc12f4a495fa169094eb01232b569b763', '', 'admin', '2013-02-12 01:13:34', '2013-02-12 01:13:34'),
(7, 'ernesto', '1504a6ba656faee2f31fa57fd97ab7dde0e00f85', 'Ernesto Cuadros-Vargas', 'author', '2013-02-28 16:44:46', '2013-02-28 16:44:46');

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
